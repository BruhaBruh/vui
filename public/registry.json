{"dependecyVersions":{"@floating-ui/vue":"^1.1.6","@tabler/icons-vue":"^3.31.0","@vueuse/core":"^13.1.0","@vueuse/integrations":"^13.1.0","class-variance-authority":"^0.7.1","embla-carousel-vue":"^8.3.0","focus-trap":"^7.6.4","motion-v":"^1.0.1","tailwind-merge":"^3.3.0","@bruhabruh/type-safe":"^1.2.3","@tailwindcss/vite":"^4.1.5","tailwindcss":"^4.1.5"},"dependencies":["@floating-ui/vue","@tabler/icons-vue","@vueuse/core","@vueuse/integrations","class-variance-authority","embla-carousel-vue","focus-trap","motion-v","tailwind-merge"],"devDependencies":["@bruhabruh/type-safe","@tailwindcss/vite","tailwindcss"],"files":[{"path":"index.ts","content":"export * from './components';\nexport * from './composables';\nexport * from './config';\nexport * from './types';\n","hash":"0404eba924022252fdef5da178539c553be74b6c1936a92084e6d878a6d891b9"},{"path":"components/index.ts","content":"export * from './actions';\nexport * from './communications';\nexport * from './containments';\nexport * from './inputs';\nexport * from './navigations';\nexport * from './selections';\nexport * from './utility';\n","hash":"b3c582bba686fbc5ac01913d2ab88300bdd3b2d1f22d16d01214ec16feb88ce0"},{"path":"components/utility/index.ts","content":"export { default as MotionComponent, type MotionComponentProps } from './motion-component.vue';\nexport * from './slot';\n\n","hash":"c003e873ca5c185cc4be7682b12d52627d3d3eabce82f9a9808b682c91f2e4f3"},{"path":"components/utility/motion-component.vue","content":"<script setup lang=\"ts\">\nimport { transitionConfig } from '@/config';\nimport { type AsTag, Motion, type MotionProps } from 'motion-v';\nimport { Slot } from './slot';\n\nexport type MotionComponentProps = MotionProps<AsTag>;\n\nconst {\n  as = 'div',\n  asChild,\n  transition = transitionConfig.preset.short.beginEnd.asMotion(),\n  ...props\n} = defineProps<MotionComponentProps>();\n</script>\n\n<template>\n  <Motion as-child :transition v-bind=\"props\" v-tw-merge>\n    <Slot>\n      <slot v-if=\"asChild\" />\n      <component v-else :is=\"as\">\n        <slot />\n      </component>\n    </Slot>\n  </Motion>\n</template>\n","hash":"39f98adceb5b8cb5874b0b9eb0674228a26beeb25c75f3c4975047ac1483247f"},{"path":"components/utility/slot.ts","content":"import {\n  Comment,\n  Fragment,\n  type VNode,\n  cloneVNode,\n  defineComponent,\n  mergeProps,\n} from 'vue';\n\nexport const Slot = defineComponent({\n  name: 'ui-slot',\n  inheritAttrs: false,\n  setup(_, { attrs, slots }) {\n    return () => {\n      if (!slots.default) return null;\n\n      const childrens = renderSlotFragments(slots.default());\n      const firstNonCommentChildrenIndex = childrens.findIndex(\n        (child) => child.type !== Comment,\n      );\n      if (firstNonCommentChildrenIndex === -1) return childrens;\n\n      const firstNonCommentChildren = childrens[firstNonCommentChildrenIndex];\n\n      // Remove props ref from being inferred\n      delete firstNonCommentChildren.props?.ref;\n\n      const mergedProps = firstNonCommentChildren.props\n        ? mergeProps(attrs, firstNonCommentChildren.props)\n        : attrs;\n      // Remove class to prevent duplicated\n      if (attrs.class && firstNonCommentChildren.props?.class)\n        delete firstNonCommentChildren.props.class;\n      const cloned = cloneVNode(firstNonCommentChildren, mergedProps);\n\n      // Explicitly override props starting with `on`.\n      // It seems cloneVNode from Vue doesn't like overriding `onXXX` props.\n      // So we have to do it manually.\n      for (const prop in mergedProps) {\n        if (prop.startsWith('on')) {\n          cloned.props ||= {};\n          cloned.props[prop] = mergedProps[prop];\n        }\n      }\n\n      if (childrens.length === 1) return cloned;\n\n      childrens[firstNonCommentChildrenIndex] = cloned;\n      return childrens;\n    };\n  },\n});\n\nfunction renderSlotFragments(children?: VNode[]): VNode[] {\n  if (!children) return [];\n  return children.flatMap((child) => {\n    if (child.type === Fragment)\n      return renderSlotFragments(child.children as VNode[]);\n\n    return [child];\n  });\n}\n","hash":"fb2fe05f6416c9403bc5ab6065c51655cec8ddc37d989bf486f28185a6175bbe"},{"path":"components/selections/index.ts","content":"export * from './ui-checkbox';\nexport * from './ui-menu';\nexport * from './ui-radio';\nexport * from './ui-slider';\nexport * from './ui-switch';\n\n","hash":"1a9abb87f7e2ba1ed44d8e60e65c3a39b7415cb022432c8ab58754fda08bb4f6"},{"path":"components/selections/ui-switch/index.ts","content":"export * from './ui-switch.variants';\nexport { default as Switch, type SwitchProps } from './ui-switch.vue';\n","hash":"1ffa495989cb4c5766cb17eeefedac3ff01636ac6e4f7df6943ef12ba3d3a30c"},{"path":"components/selections/ui-switch/ui-switch.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva(\n  [\n    'switch group/switch',\n    'relative',\n    'inline-flex items-center',\n    'transition easing-standard duration-medium-1',\n    'border-2',\n    'h-8 w-13 rounded-full',\n    'is-disabled:pointer-events-none',\n  ],\n  {\n    variants: {\n      color: {\n        primary: [],\n        secondary: [],\n        info: [],\n        success: [],\n        caution: [],\n        critical: [],\n      },\n      isSelected: {\n        true: [\n          'border-transparent',\n          'bg-surface-container-highest',\n          'is-disabled:bg-on-surface/12',\n          'is-disabled:text-on-surface/38',\n        ],\n        false: [\n          'border-outline',\n          'is-disabled:border-outline/12',\n          'text-surface',\n        ],\n      },\n    },\n    defaultVariants: {\n      color: 'primary',\n      isSelected: false,\n    },\n    compoundVariants: [\n      {\n        isSelected: true,\n        color: 'primary',\n        class: ['bg-primary text-on-primary-container'],\n      },\n      {\n        isSelected: true,\n        color: 'secondary',\n        class: ['bg-secondary text-on-secondary-container'],\n      },\n      {\n        isSelected: true,\n        color: 'info',\n        class: ['bg-info text-on-info-container'],\n      },\n      {\n        isSelected: true,\n        color: 'success',\n        class: ['bg-success text-on-success-container'],\n      },\n      {\n        isSelected: true,\n        color: 'caution',\n        class: ['bg-caution text-on-caution-container'],\n      },\n      {\n        isSelected: true,\n        color: 'critical',\n        class: ['bg-critical text-on-critical-container'],\n      },\n    ],\n  },\n);\n\nconst thumbWrapperVariants = cva(\n  [\n    'switch--thumb-wrapper',\n    'absolute',\n    'inline-flex items-center justify-center',\n    'transition easing-standard duration-medium-1',\n    'size-10 rounded-full',\n    'group-is-disabled/switch:state-transparent',\n    'group-is-hovered/switch:state-hover',\n    'group-in-focus-within/switch:state-focus',\n    'group-is-pressed/switch:state-press',\n  ],\n  {\n    variants: {\n      color: {\n        primary: ['state-primary'],\n        secondary: ['state-secondary'],\n        info: ['state-info'],\n        success: ['state-success'],\n        caution: ['state-caution'],\n        critical: ['state-critical'],\n      },\n      isSelected: {\n        true: ['translate-x-3.5'],\n        false: ['-translate-x-1.5'],\n      },\n    },\n    defaultVariants: {\n      color: 'primary',\n      isSelected: false,\n    },\n  },\n);\n\nconst thumbVariants = cva(\n  [\n    'switch--thumb',\n    'relative',\n    'inline-flex items-center justify-center',\n    'transition easing-standard duration-medium-1',\n    'bg-outline',\n    'rounded-full group-is-pressed/switch:size-7',\n  ],\n  {\n    variants: {\n      size: {\n        default: [],\n        icon: ['size-6'],\n      },\n      color: {\n        primary: {},\n        secondary: {},\n        info: {},\n        success: {},\n        caution: {},\n        critical: {},\n      },\n      isSelected: {\n        true: ['group-is-disabled/switch:bg-surface'],\n        false: [\n          'group-is-hovered/switch:bg-on-surface-variant',\n          'group-is-pressed/switch:bg-on-surface-variant',\n          'group-in-focus-within/switch:bg-on-surface-variant',\n          'group-is-disabled/switch:bg-on-surface/38',\n        ],\n      },\n    },\n    defaultVariants: {\n      size: 'default',\n      color: 'primary',\n      isSelected: false,\n    },\n    compoundVariants: [\n      {\n        isSelected: false,\n        size: 'default',\n        class: 'size-4',\n      },\n      {\n        isSelected: true,\n        size: 'default',\n        class: 'size-6',\n      },\n      {\n        isSelected: true,\n        color: 'primary',\n        class: [\n          'bg-on-primary',\n          'group-is-hovered/switch:bg-primary-container',\n          'group-is-pressed/switch:bg-primary-container',\n          'group-in-focus-within/switch:bg-primary-container',\n          'group-is-hovered/switch:text-on-primary-container',\n        ],\n      },\n      {\n        isSelected: true,\n        color: 'secondary',\n        class: [\n          'bg-on-secondary',\n          'group-is-hovered/switch:bg-secondary-container',\n          'group-is-pressed/switch:bg-secondary-container',\n          'group-in-focus-within/switch:bg-secondary-container',\n          'group-is-hovered/switch:text-on-secondary-container',\n        ],\n      },\n      {\n        isSelected: true,\n        color: 'info',\n        class: [\n          'bg-on-info',\n          'group-is-hovered/switch:bg-info-container',\n          'group-is-pressed/switch:bg-info-container',\n          'group-in-focus-within/switch:bg-info-container',\n          'group-is-hovered/switch:text-on-info-container',\n        ],\n      },\n      {\n        isSelected: true,\n        color: 'success',\n        class: [\n          'bg-on-success',\n          'group-is-hovered/switch:bg-success-container',\n          'group-is-pressed/switch:bg-success-container',\n          'group-in-focus-within/switch:bg-success-container',\n          'group-is-hovered/switch:text-on-success-container',\n        ],\n      },\n      {\n        isSelected: true,\n        color: 'caution',\n        class: [\n          'bg-on-caution',\n          'group-is-hovered/switch:bg-caution-container',\n          'group-is-pressed/switch:bg-caution-container',\n          'group-in-focus-within/switch:bg-caution-container',\n          'group-is-hovered/switch:text-on-caution-container',\n        ],\n      },\n      {\n        isSelected: true,\n        color: 'critical',\n        class: [\n          'bg-on-critical',\n          'group-is-hovered/switch:bg-critical-container',\n          'group-is-pressed/switch:bg-critical-container',\n          'group-in-focus-within/switch:bg-critical-container',\n          'group-is-hovered/switch:text-on-critical-container',\n        ],\n      },\n    ],\n  },\n);\n\nconst iconVariants = cva([\n  'switch--icon',\n  'relative inline-block',\n  'size-4',\n  'transition easing-standard duration-short-2',\n]);\n\nexport const switchVariants = Object.assign(variants, {\n  thumbWrapper: thumbWrapperVariants,\n  thumb: thumbVariants,\n  icon: iconVariants,\n});\n\nexport type SwitchVariants = Variants<typeof switchVariants>;\n\nexport type SwitchThumbWrapperVariants = Variants<\n  typeof switchVariants.thumbWrapper\n>;\n\nexport type SwitchThumbVariants = Variants<typeof switchVariants.thumb>;\n\nexport type SwitchIconVariants = Variants<typeof switchVariants.icon>;\n","hash":"50190c2a23db5399dc929018d7e0771f2801b37dfbecd80b25acd48f8b87b9d8"},{"path":"components/selections/ui-switch/ui-switch.vue","content":"<script setup lang=\"ts\">\nimport { switchVariants } from './ui-switch.variants';\nimport type { UnknownRecord } from '@bruhabruh/type-safe';\nimport type { SwitchVariants } from './ui-switch.variants';\nimport { useTemplateRef } from 'vue';\nimport { computedVariants, useInteractions } from '@/composables';\nimport { AnimatePresence, motion } from 'motion-v';\nimport { materialDuration, materialEasing, transitionConfig } from '@/config';\nimport {\n  MotionComponent,\n  type MotionComponentProps,\n} from '@/components/utility';\n\nexport type SwitchProps = MotionComponentProps & {\n  color?: SwitchVariants['color'];\n  checked?: boolean;\n  disabled?: boolean;\n};\n\nconst {\n  color,\n  checked,\n  disabled,\n  as = 'div',\n  initial,\n  animate,\n  exit,\n  ...motionProps\n} = defineProps<SwitchProps>();\n\ndefineOptions({\n  inheritAttrs: false,\n});\n\nconst elementRef = useTemplateRef<HTMLElement>('switch');\nconst inputRef = useTemplateRef<HTMLInputElement>('input');\n\nconst emit = defineEmits<{\n  change: [checked: boolean];\n}>();\n\nfunction attrsWithoutClass(attrs: UnknownRecord) {\n  const newAttrs = { ...attrs };\n  if ('class' in newAttrs) delete newAttrs.class;\n  return newAttrs;\n}\n\nfunction onClick() {\n  emit('change', !checked);\n  if (!elementRef.value) return;\n  inputRef.value?.focus();\n}\n\nfunction onChange(e: Event) {\n  const target = e.target as HTMLInputElement | null;\n  if (!target) return;\n  emit('change', Boolean(target.checked));\n}\n\nconst { isPressed } = useInteractions(elementRef, {\n  disabled: false,\n});\n\nconst {\n  initial: initialObject,\n  animate: animateObject,\n  exit: exitObject,\n} = computedVariants(() => ({\n  initial,\n  animate,\n  exit,\n}));\n</script>\n\n<template>\n  <MotionComponent\n    :as\n    ref=\"switch\"\n    v-bind=\"motionProps\"\n    :initial=\"{\n      transition: transitionConfig.preset.short.enter.asMotion(),\n      ...initialObject,\n    }\"\n    :animate=\"{\n      transition: transitionConfig.preset.short.beginEnd.asMotion(),\n      ...animateObject,\n    }\"\n    :exit=\"{\n      transition: transitionConfig.preset.short.exit.asMotion(),\n      ...exitObject,\n    }\"\n    :class=\"[switchVariants({ color, isSelected: checked }), $attrs.class]\"\n    :data-is-disabled=\"disabled ? 'true' : undefined\"\n    @click=\"onClick\"\n    v-tw-merge\n  >\n    <input\n      ref=\"input\"\n      type=\"checkbox\"\n      role=\"switch\"\n      class=\"sr-only\"\n      :disabled\n      :checked\n      @change=\"onChange\"\n      v-bind=\"attrsWithoutClass($attrs)\"\n      v-tw-merge\n    />\n    <span\n      aria-hidden\n      :class=\"switchVariants.thumbWrapper({ color, isSelected: checked })\"\n      v-tw-merge\n    >\n      <motion.span\n        :animate=\"{\n          width: isPressed\n            ? 'var(--spacing-7)'\n            : checked || $slots.unchecked\n              ? 'var(--spacing-6)'\n              : 'var(--spacing-4)',\n          height: isPressed\n            ? 'var(--spacing-7)'\n            : checked || $slots.unchecked\n              ? 'var(--spacing-6)'\n              : 'var(--spacing-4)',\n        }\"\n        :transition=\"{\n          duration: materialDuration.asMotion('medium-1'),\n          ease: materialEasing.standard,\n        }\"\n        :class=\"\n          switchVariants.thumb({\n            color,\n            isSelected: checked,\n            size: checked\n              ? $slots.checked\n                ? 'icon'\n                : 'default'\n              : $slots.unchecked\n                ? 'icon'\n                : 'default',\n          })\n        \"\n        v-tw-merge\n      >\n        <AnimatePresence mode=\"wait\">\n          <MotionComponent\n            as-child\n            v-if=\"checked && $slots.checked\"\n            :key=\"`checked-${checked}`\"\n            :initial=\"{ width: 0, height: 0 }\"\n            :exit=\"{ width: 0, height: 0 }\"\n            :animate=\"{\n              width: 'var(--spacing-4)',\n              height: 'var(--spacing-4)',\n            }\"\n            :transition=\"{\n              duration: materialDuration.asMotion('short-2'),\n              ease: materialEasing.standard,\n            }\"\n            :class=\"switchVariants.icon()\"\n          >\n            <slot name=\"checked\" />\n          </MotionComponent>\n          <MotionComponent\n            as-child\n            v-else-if=\"!checked && $slots.unchecked\"\n            :key=\"`unchecked-${checked}`\"\n            :initial=\"{ width: 0, height: 0 }\"\n            :exit=\"{ width: 0, height: 0 }\"\n            :animate=\"{\n              width: 'var(--spacing-4)',\n              height: 'var(--spacing-4)',\n            }\"\n            :transition=\"{\n              duration: materialDuration.asMotion('short-2'),\n              ease: materialEasing.standard,\n            }\"\n            :class=\"switchVariants.icon()\"\n          >\n            <slot name=\"unchecked\" />\n          </MotionComponent>\n        </AnimatePresence>\n      </motion.span>\n    </span>\n  </MotionComponent>\n</template>\n","hash":"6483c677affd8cb09dc891aa2e1728a49afb4ace50e45f029a43da6cc8b6be48"},{"path":"components/selections/ui-slider/index.ts","content":"export * from './ui-slider.variants';\nexport { default as Slider, type SliderProps } from './ui-slider.vue';\n\n","hash":"28ea644f3979d420fe52699957de546097864d3c5638ee6a55309a4a78f2a6a5"},{"path":"components/selections/ui-slider/ui-slider-thumb.vue","content":"<script setup lang=\"ts\">\nimport { computed, useTemplateRef } from 'vue';\nimport { AnimatePresence, motion } from 'motion-v';\nimport { materialDuration, materialEasing, transitionConfig } from '@/config';\nimport { type SliderThumbVariants, sliderVariants } from './ui-slider.variants';\nimport {\n  autoUpdate,\n  flip,\n  hide,\n  offset,\n  shift,\n  useFloating,\n} from '@floating-ui/vue';\nimport { useEventListener, useFocus } from '@vueuse/core';\n\nconst {\n  color,\n  id,\n  value,\n  minValue,\n  maxValue,\n  percent,\n  formatOptions = { style: 'decimal' },\n  disabled,\n  dragging,\n} = defineProps<{\n  color?: SliderThumbVariants['color'];\n  id: string;\n  value: number;\n  minValue: number;\n  maxValue: number;\n  percent: number;\n  disabled: boolean;\n  dragging: boolean;\n  formatOptions?: Intl.NumberFormatOptions;\n}>();\n\ndefineOptions({\n  inheritAttrs: false,\n});\n\nconst emit = defineEmits<{\n  change: [\n    changeType: 'inc' | 'dec' | 'inc-large' | 'dec-large' | 'min' | 'max',\n  ];\n}>();\n\nconst elementRef = useTemplateRef<HTMLElement>('slider-thumb');\nconst tooltip = useTemplateRef<HTMLElement>('slider-thumb-tooltip');\n\nconst {\n  floatingStyles,\n  update,\n  placement: floatingPlacement,\n} = useFloating(elementRef, tooltip, {\n  placement: 'top',\n  middleware: [offset(4), flip(), hide(), shift()],\n  whileElementsMounted: autoUpdate,\n  transform: false,\n});\n\nconst placement = computed(() => {\n  if (floatingPlacement.value.includes('bottom')) return 'bottom';\n  if (floatingPlacement.value.includes('left')) return 'left';\n  if (floatingPlacement.value.includes('right')) return 'right';\n  return 'top';\n});\n\nconst formattedValue = computed(() => {\n  const formatted = new Intl.NumberFormat('ru-RU', formatOptions);\n  return formatted.format(value);\n});\n\nconst { focused: inFocus } = useFocus(elementRef);\n\nuseEventListener('keydown', (e) => {\n  if (disabled) return;\n  if (!inFocus.value) return;\n  const isControlKey = [\n    'Home',\n    'End',\n    'PageUp',\n    'PageDown',\n    'ArrowUp',\n    'ArrowRight',\n    'ArrowDown',\n    'ArrowLeft',\n  ].includes(e.key);\n  if (!isControlKey) return;\n  e.preventDefault();\n\n  if (e.key === 'Home') {\n    emit('change', 'min');\n  } else if (e.key === 'End') {\n    emit('change', 'max');\n  } else if (e.key === 'PageUp') {\n    emit('change', 'inc-large');\n  } else if (e.key === 'PageDown') {\n    emit('change', 'dec-large');\n  } else if (e.key === 'ArrowUp' || e.key === 'ArrowRight') {\n    emit('change', 'inc');\n  } else if (e.key === 'ArrowDown' || e.key === 'ArrowLeft') {\n    emit('change', 'dec');\n  }\n});\n</script>\n\n<template>\n  <motion.div\n    :id\n    ref=\"slider-thumb\"\n    role=\"slider\"\n    tabindex=\"0\"\n    :aria-disabled=\"disabled\"\n    :aria-valuemin=\"minValue\"\n    :aria-valuenow=\"value\"\n    :aria-valuemax=\"maxValue\"\n    :animate=\"{\n      left: `${percent}%`,\n      width: dragging && !disabled ? 'var(--spacing-0h)' : 'var(--spacing-1)',\n      transition: transitionConfig.preset.short.beginEnd.asMotion(),\n    }\"\n    @animationiteration=\"update()\"\n    @animation-complete=\"update()\"\n    :class=\"sliderVariants.thumb({ color })\"\n    v-bind=\"$attrs\"\n    v-tw-merge\n  />\n  <Teleport to=\"body\">\n    <AnimatePresence>\n      <motion.div\n        ref=\"slider-thumb-tooltip\"\n        v-if=\"(dragging || inFocus) && !disabled\"\n        :initial=\"{\n          opacity: 0,\n          scale: 0,\n          transition: transitionConfig.preset.short.enter.asMotion(),\n        }\"\n        :animate=\"{\n          opacity: 1,\n          scale: 1,\n          transition: transitionConfig.preset.short.beginEnd.asMotion(),\n        }\"\n        :exit=\"{\n          opacity: 0,\n          scale: 0,\n          transition: transitionConfig.preset.short.exit.asMotion(),\n        }\"\n        :transition=\"{\n          duration: materialDuration.asMotion('short-2'),\n          ease: materialEasing['emphasized-decelerate'],\n        }\"\n        :id\n        role=\"tooltip\"\n        :style=\"floatingStyles\"\n        :class=\"sliderVariants.tooltip({ placement })\"\n        v-tw-merge\n      >\n        {{ formattedValue }}\n      </motion.div>\n    </AnimatePresence>\n  </Teleport>\n</template>\n","hash":"8c60c4ef2406c568a3997f46b12f55696eaee6ad5184c31bf01732659b770018"},{"path":"components/selections/ui-slider/ui-slider.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva([\n  'slider group/slider',\n  'inline-flex items-center',\n  'h-12',\n  'relative',\n  'touch-none select-none',\n]);\n\nconst thumbVariants = cva(\n  [\n    'slider--thumb',\n    'inline-flex items-center justify-between',\n    ['transition easing-standard duration-medium-1'],\n    'h-11',\n    'rounded-full',\n    'absolute',\n    '-translate-x-1/2',\n    ['group-is-disabled/slider:bg-on-surface/38'],\n  ],\n  {\n    variants: {\n      color: {\n        standard: 'bg-primary',\n        primary: 'bg-primary',\n        secondary: 'bg-secondary',\n        info: 'bg-info',\n        success: 'bg-success',\n        caution: 'bg-caution',\n        critical: 'bg-critical',\n      },\n      isDragging: {\n        true: 'w-0.5',\n        false: 'w-1',\n      },\n    },\n    defaultVariants: {\n      color: 'standard',\n      isDragging: false,\n    },\n  },\n);\n\nconst trackVariants = cva(\n  [\n    'slider--track',\n    'absolute',\n    'h-4',\n    'inline-flex items-center',\n    'overflow-hidden',\n    'transition easing-standard duration-medium-1',\n    'before:absolute',\n    'before:h-full',\n    'before:w-(--ui-slider-before-width)',\n  ],\n  {\n    variants: {\n      position: {\n        left: [\n          'before:rounded-l-full rounded-r-xs before:left-0',\n          [\n            'after:absolute',\n            'after:left-1.5',\n            'after:size-1',\n            'after:rounded-full',\n          ],\n        ],\n        center: ['rounded-xs'],\n        right: [\n          'rounded-l-xs before:rounded-r-full before:right-0',\n          [\n            'after:absolute',\n            'after:right-1.5',\n            'after:size-1',\n            'after:rounded-full',\n          ],\n        ],\n      },\n    },\n    defaultVariants: {\n      position: 'center',\n    },\n  },\n);\n\nconst activeTrackVariants = cva(\n  ['slider--active-track', 'group-is-disabled/slider:before:bg-on-surface/38'],\n  {\n    variants: {\n      color: {\n        standard: 'before:bg-primary',\n        primary: 'before:bg-primary',\n        secondary: 'before:bg-secondary',\n        info: 'before:bg-info',\n        success: 'before:bg-success',\n        caution: 'before:bg-caution',\n        critical: 'before:bg-critical',\n      },\n    },\n    defaultVariants: {\n      color: 'standard',\n    },\n  },\n);\n\nconst inactiveTrackVariants = cva(\n  [\n    'slider--inactive-track',\n    'group-is-disabled/slider:before:bg-on-surface/12',\n    'group-is-disabled/slider:after:bg-on-surface/38',\n  ],\n  {\n    variants: {\n      color: {\n        standard: ['before:bg-secondary-container', 'after:bg-primary'],\n        primary: ['before:bg-primary-container', 'after:bg-primary'],\n        secondary: ['before:bg-secondary-container', 'after:bg-secondary'],\n        info: ['before:bg-info-container', 'after:bg-info'],\n        success: ['before:bg-success-container', 'after:bg-success'],\n        caution: ['before:bg-caution-container', 'after:bg-caution'],\n        critical: ['before:bg-critical-container', 'after:bg-critical'],\n      },\n    },\n    defaultVariants: {\n      color: 'standard',\n    },\n  },\n);\n\nconst tooltipVariants = cva(\n  [\n    'slider--tooltip',\n    'px-4 py-3',\n    'bg-inverse-surface',\n    'typography-label-large text-inverse-on-surface',\n    'rounded-full',\n    'z-20',\n  ],\n  {\n    variants: {\n      placement: {\n        top: ['origin-bottom'],\n        right: ['origin-left'],\n        bottom: ['origin-top'],\n        left: ['origin-right'],\n      },\n    },\n  },\n);\n\nexport const sliderVariants = Object.assign(variants, {\n  thumb: thumbVariants,\n  track: trackVariants,\n  activeTrack: activeTrackVariants,\n  inactiveTrack: inactiveTrackVariants,\n  tooltip: tooltipVariants,\n});\n\nexport type SliderVariants = Variants<typeof sliderVariants>;\n\nexport type SliderThumbVariants = Variants<typeof sliderVariants.thumb>;\n\nexport type SliderTrackVariants = Variants<typeof sliderVariants.track>;\n\nexport type SliderActiveTrackVariants = Variants<\n  typeof sliderVariants.activeTrack\n>;\n\nexport type SliderInactiveTrackVariants = Variants<\n  typeof sliderVariants.inactiveTrack\n>;\n\nexport type SliderTooltipVariants = Variants<typeof sliderVariants.tooltip>;\n","hash":"d6b27762436ba23be9deca32951bc6f671fc96402716aae69fb8842bd035cbec"},{"path":"components/selections/ui-slider/ui-slider.vue","content":"<script setup lang=\"ts\">\nimport {\n  computed,\n  onBeforeUnmount,\n  ref,\n  shallowRef,\n  useId,\n  useTemplateRef,\n} from 'vue';\nimport { computedVariants, useInteractions } from '@/composables';\nimport {\n  type SliderThumbVariants,\n  type SliderTrackVariants,\n  sliderVariants,\n} from './ui-slider.variants';\nimport { default as SliderThumb } from './ui-slider-thumb.vue';\nimport { motion } from 'motion-v';\nimport { transitionConfig } from '@/config';\nimport {\n  MotionComponent,\n  type MotionComponentProps,\n} from '@/components/utility';\n\nexport type SliderProps = MotionComponentProps & {\n  min?: number;\n  max?: number;\n  step?: number;\n  stepMultiplier?: number;\n  disabled?: boolean;\n  formatOptions?: Intl.NumberFormatOptions;\n  variant?: 'centered' | 'continuous';\n  color?: SliderThumbVariants['color'];\n};\n\nconst {\n  min = 0,\n  max = 100,\n  step = 1,\n  stepMultiplier = 10,\n  disabled,\n  variant = 'continuous',\n  color,\n  formatOptions,\n  as = 'div',\n  initial,\n  animate,\n  exit,\n  ...motionProps\n} = defineProps<SliderProps>();\n\nconst elementRef = useTemplateRef<HTMLElement>('slider');\n\nconst id = useId();\n\nconst abortController = shallowRef(new AbortController());\n\nconst value = defineModel<number | number[]>('value', {\n  default: 0,\n});\n\nconst valueArray = computed(() =>\n  (typeof value.value === 'number' ? [value.value] : value.value).map((v) => {\n    if (v < min) return min;\n    if (v > max) return max;\n    return v;\n  }),\n);\n\ntype Thumb = {\n  id: string;\n  index: number;\n  value: number;\n  minValue: number;\n  maxValue: number;\n  percent: number;\n};\n\nconst thumbs = computed<Thumb[]>(() => {\n  return valueArray.value.map((v, i, arr) => {\n    const val = v - min;\n    const diff = max - min;\n    return {\n      id: `${id}-thumb-${i}`,\n      index: i,\n      value: v,\n      minValue: arr[i - 1] ?? min,\n      maxValue: arr[i + 1] ?? max,\n      percent: (val / diff) * 100,\n    };\n  });\n});\n\nconst tracks = computed(() => {\n  return Array(thumbs.value.length + 1)\n    .fill(null)\n    .map((_, index, arr) => {\n      const isFirst = index === 0;\n      const isLast = index + 1 === arr.length;\n      const inCenter = !isFirst && !isLast;\n\n      const percentBefore = thumbs.value[index - 1]?.percent ?? 0;\n      const percentCurrent = thumbs.value[index]?.percent ?? 0;\n      let trackPercent = percentCurrent - percentBefore;\n      if (isLast) {\n        trackPercent = 100 - percentBefore;\n      }\n\n      let position: SliderTrackVariants['position'] = 'center';\n      if (isFirst) {\n        position = 'left';\n      } else if (isLast) {\n        position = 'right';\n      }\n\n      let isActive = false;\n      const isOneThumbAndFirst = thumbs.value.length === 1 && isFirst;\n      const isTwoThumbsAndCenter = thumbs.value.length === 2 && inCenter;\n      if (\n        variant === 'continuous' &&\n        (isOneThumbAndFirst || isTwoThumbsAndCenter)\n      ) {\n        isActive = true;\n      }\n\n      return {\n        id: `${id}-track-${index}`,\n        width: `calc(${trackPercent}% - ${inCenter ? 'var(--spacing-4)' : 'var(--spacing-2)'})`,\n        left: isFirst ? '0%' : `calc(${percentBefore}% + var(--spacing-2))`,\n        position,\n        isActive,\n      };\n    });\n});\n\nconst currentDraggingThumbId = ref<string | null>(null);\n\nuseInteractions(elementRef, {\n  disabled: false,\n});\n\nonBeforeUnmount(() => {\n  abortController.value.abort();\n});\n\nfunction clamp(minValue: number, currentValue: number, maxValue: number) {\n  return Math.min(maxValue, Math.max(minValue, currentValue));\n}\n\nfunction calculateValue(el: HTMLElement, x: number) {\n  const bounding = el.getBoundingClientRect();\n  const percent = clamp(0, (x - bounding.x) / bounding.width, 1);\n  const diff = max - min;\n  const diffValue = diff * percent;\n  const val = min + diffValue;\n  const stepDiff = val % step;\n  if (stepDiff < step / 2) {\n    return val - stepDiff;\n  }\n  return val + step - stepDiff;\n}\n\nfunction nearestThumb(val: number): Thumb | undefined {\n  const valuesWithDiff = thumbs.value.map((thumb) => ({\n    thumb,\n    diff: Math.max(val, thumb.value) - Math.min(val, thumb.value),\n  }));\n  const sorted = valuesWithDiff.sort((a, b) => {\n    if (a.diff !== b.diff) return a.diff - b.diff;\n    if (val < a.thumb.value) {\n      return a.thumb.index - b.thumb.index;\n    }\n    return b.thumb.index - a.thumb.index;\n  });\n  return sorted[0]?.thumb;\n}\n\nfunction setValue(thumb: Thumb, val: number) {\n  if (typeof value.value === 'number') {\n    value.value = val;\n  } else {\n    value.value[thumb.index] = val;\n  }\n}\n\nfunction onChange(\n  thumb: Thumb,\n  changeType: 'inc' | 'dec' | 'inc-large' | 'dec-large' | 'min' | 'max',\n) {\n  if (changeType === 'min') {\n    setValue(thumb, thumb.minValue);\n  } else if (changeType === 'max') {\n    setValue(thumb, thumb.maxValue);\n  } else if (changeType === 'inc-large') {\n    setValue(\n      thumb,\n      clamp(\n        thumb.minValue,\n        thumb.value + step * stepMultiplier,\n        thumb.maxValue,\n      ),\n    );\n  } else if (changeType === 'dec-large') {\n    setValue(\n      thumb,\n      clamp(\n        thumb.minValue,\n        thumb.value - step * stepMultiplier,\n        thumb.maxValue,\n      ),\n    );\n  } else if (changeType === 'inc') {\n    setValue(thumb, clamp(thumb.minValue, thumb.value + step, thumb.maxValue));\n  } else if (changeType === 'dec') {\n    setValue(thumb, clamp(thumb.minValue, thumb.value - step, thumb.maxValue));\n  }\n}\n\nfunction onStart(e: MouseEvent | TouchEvent) {\n  if (disabled) return;\n  const element = e.currentTarget as HTMLElement | null;\n  if (!element) return;\n\n  let x: number | null = null;\n  if (e instanceof MouseEvent) {\n    x = e.x;\n  } else if (e instanceof TouchEvent) {\n    x = e.touches[0].clientX;\n  }\n  if (x === null) return;\n\n  const initialValue = calculateValue(element, x);\n  const thumb = nearestThumb(initialValue);\n  if (!thumb) return;\n\n  setValue(thumb, initialValue);\n  currentDraggingThumbId.value = thumb.id;\n\n  abortController.value.abort();\n  abortController.value = new AbortController();\n\n  window.addEventListener(\n    'mousemove',\n    (ev) => recalculate({ x: ev.x, thumb, element }),\n    { signal: abortController.value.signal },\n  );\n  window.addEventListener(\n    'mouseup',\n    (ev) => {\n      abortController.value.abort();\n      currentDraggingThumbId.value = null;\n      recalculate({ x: ev.x, thumb, element });\n    },\n    { signal: abortController.value.signal },\n  );\n  window.addEventListener(\n    'touchmove',\n    (ev) => {\n      const touch = ev.touches[0];\n      if (!touch) return;\n      recalculate({ x: touch.clientX, thumb, element });\n    },\n    { signal: abortController.value.signal },\n  );\n  window.addEventListener(\n    'touchend',\n    (ev) => {\n      abortController.value.abort();\n      currentDraggingThumbId.value = null;\n      const touch = ev.touches[0];\n      if (!touch) return;\n      recalculate({ x: touch.clientX, thumb, element });\n    },\n    { signal: abortController.value.signal },\n  );\n}\n\nfunction recalculate({\n  x,\n  thumb,\n  element,\n}: {\n  x: number;\n  thumb: Thumb;\n  element: HTMLElement;\n}) {\n  const minValue = valueArray.value[thumb.index - 1] ?? min;\n  const maxValue = valueArray.value[thumb.index + 1] ?? max;\n  const newValue = calculateValue(element, x);\n  setValue(thumb, clamp(minValue, newValue, maxValue));\n  (document.querySelector(`#${thumb.id}`) as HTMLElement | null)?.focus();\n}\n\nconst {\n  initial: initialObject,\n  animate: animateObject,\n  exit: exitObject,\n} = computedVariants(() => ({\n  initial,\n  animate,\n  exit,\n}));\n</script>\n\n<template>\n  <MotionComponent\n    :as\n    ref=\"slider\"\n    v-bind=\"motionProps\"\n    :initial=\"{\n      transition: transitionConfig.preset.short.enter.asMotion(),\n      ...initialObject,\n    }\"\n    :animate=\"{\n      transition: transitionConfig.preset.short.beginEnd.asMotion(),\n      ...animateObject,\n    }\"\n    :exit=\"{\n      transition: transitionConfig.preset.short.exit.asMotion(),\n      ...exitObject,\n    }\"\n    :id\n    :data-is-disabled=\"disabled\"\n    @touchstart=\"onStart\"\n    @mousedown=\"onStart\"\n    :class=\"sliderVariants()\"\n    v-tw-merge\n  >\n    <SliderThumb\n      v-for=\"thumb in thumbs\"\n      :key=\"thumb.id\"\n      :dragging=\"thumb.id === currentDraggingThumbId\"\n      :format-options\n      :color\n      :disabled\n      @change=\"(e) => onChange(thumb, e)\"\n      v-bind=\"thumb\"\n    />\n    <motion.div\n      aria-hidden\n      v-for=\"track in tracks\"\n      :key=\"track.id\"\n      :animate=\"{\n        width: track.width,\n        left: track.left,\n        transition: transitionConfig.preset.short.beginEnd.asMotion(),\n      }\"\n      :style=\"{\n        '--ui-slider-before-width': `${elementRef?.clientWidth ?? 1920}px`,\n      }\"\n      :class=\"[\n        sliderVariants.track({ position: track.position }),\n        track.isActive\n          ? sliderVariants.activeTrack({ color })\n          : sliderVariants.inactiveTrack({ color }),\n      ]\"\n      v-tw-merge\n    />\n  </MotionComponent>\n</template>\n","hash":"7e73c9f20dd724ebfb1a60e1e12490a3844f43571c9a7997491e472a53c266fa"},{"path":"components/selections/ui-radio/index.ts","content":"export * from './ui-radio.variants';\nexport { default as Radio, type RadioProps } from './ui-radio.vue';\n\n","hash":"827b4c95ee7d26cfe796f5a3bbf17b5a9fed2d753090e68ed0f272505d94151a"},{"path":"components/selections/ui-radio/ui-radio.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva(\n  [\n    'radio group/radio',\n    'relative',\n    'inline-flex items-center justify-center',\n    'transition easing-standard duration-medium-1',\n    'size-10 rounded-full',\n    'is-disabled:pointer-events-none',\n    [\n      'is-disabled:state-transparent',\n      'is-hovered:state-hover',\n      'in-focus-within:state-focus',\n      'is-pressed:state-press',\n    ],\n    ['ripple-wrapper:inset-0'],\n  ],\n  {\n    variants: {\n      color: {\n        primary: ['state-primary', 'ripple:bg-primary'],\n        secondary: ['state-secondary', 'ripple:bg-secondary'],\n        info: ['state-info', 'ripple:bg-info'],\n        success: ['state-success', 'ripple:bg-success'],\n        caution: ['state-caution', 'ripple:bg-caution'],\n        critical: ['state-critical', 'ripple:bg-critical'],\n      },\n    },\n    defaultVariants: {\n      color: 'primary',\n    },\n  },\n);\n\nconst markVariants = cva(\n  [\n    'radio--mark',\n    'relative',\n    'inline-flex items-center justify-center',\n    'transition easing-standard duration-medium-1',\n    'size-5 rounded-full',\n    'overflow-hidden',\n    'border-2',\n    'group-is-disabled/radio:border-on-surface/38',\n  ],\n  {\n    variants: {\n      color: {\n        primary: ['text-primary'],\n        secondary: ['text-secondary'],\n        info: ['text-info'],\n        success: ['text-success'],\n        caution: ['text-caution'],\n        critical: ['text-critical'],\n      },\n      checked: {\n        true: [],\n        false: ['border-outline'],\n      },\n    },\n    defaultVariants: {\n      color: 'primary',\n      checked: true,\n    },\n  },\n);\n\nconst iconVariants = cva(\n  [\n    'radio--icon',\n    'absolute inline-block size-2.5 rounded-full',\n    'transition easing-standard duration-medium-1',\n    'overflow-hidden',\n    'group-is-disabled/radio:bg-on-surface/38',\n  ],\n  {\n    variants: {\n      color: {\n        primary: ['bg-primary'],\n        secondary: ['bg-secondary'],\n        info: ['bg-info'],\n        success: ['bg-success'],\n        caution: ['bg-caution'],\n        critical: ['bg-critical'],\n      },\n    },\n    defaultVariants: {\n      color: 'primary',\n    },\n  },\n);\n\nexport const radioVariants = Object.assign(variants, {\n  mark: markVariants,\n  icon: iconVariants,\n});\n\nexport type RadioVariants = Variants<typeof radioVariants>;\n\nexport type RadioMarkVariants = Variants<typeof radioVariants.mark>;\n\nexport type RadioIconVariants = Variants<typeof radioVariants.icon>;\n","hash":"482574e862ac89f0994c0c7facc92c98cb2e3346fa42d43db003a56ac5440d60"},{"path":"components/selections/ui-radio/ui-radio.vue","content":"<script setup lang=\"ts\">\nimport type { UnknownRecord } from '@bruhabruh/type-safe';\nimport { useTemplateRef } from 'vue';\nimport { computedVariants, useInteractions, useRipple } from '@/composables';\nimport { AnimatePresence, motion } from 'motion-v';\nimport { materialDuration, materialEasing, transitionConfig } from '@/config';\nimport { radioVariants } from './ui-radio.variants';\nimport type { RadioVariants } from './ui-radio.variants';\nimport {\n  MotionComponent,\n  type MotionComponentProps,\n} from '@/components/utility';\n\nexport type RadioProps = MotionComponentProps & {\n  value: string | number;\n  color?: RadioVariants['color'];\n  checked?: boolean;\n  disabled?: boolean;\n};\n\nconst {\n  value,\n  color,\n  checked,\n  disabled,\n  as = 'div',\n  initial,\n  animate,\n  exit,\n  ...motionProps\n} = defineProps<RadioProps>();\n\ndefineOptions({\n  inheritAttrs: false,\n});\n\nconst elementRef = useTemplateRef<HTMLElement>('radio');\nconst inputRef = useTemplateRef<HTMLInputElement>('input');\n\nconst emit = defineEmits<{\n  change: [];\n}>();\n\nconst group = defineModel<string | number | undefined>('group', {\n  default: undefined,\n});\n\nfunction attrsWithoutClass(attrs: UnknownRecord) {\n  const newAttrs = { ...attrs };\n  if ('class' in newAttrs) delete newAttrs.class;\n  return newAttrs;\n}\n\nfunction update() {\n  emit('change');\n  if (group.value !== undefined) {\n    group.value = value;\n  }\n}\n\nfunction onClick() {\n  update();\n  if (!elementRef.value) return;\n  inputRef.value?.focus();\n}\n\nfunction onChange() {\n  update();\n}\n\nuseInteractions(elementRef, {\n  disabled: false,\n});\nuseRipple(elementRef);\n\nconst {\n  initial: initialObject,\n  animate: animateObject,\n  exit: exitObject,\n} = computedVariants(() => ({\n  initial,\n  animate,\n  exit,\n}));\n</script>\n\n<template>\n  <MotionComponent\n    :as\n    ref=\"radio\"\n    v-bind=\"motionProps\"\n    :initial=\"{\n      transition: transitionConfig.preset.short.enter.asMotion(),\n      ...initialObject,\n    }\"\n    :animate=\"{\n      transition: transitionConfig.preset.short.beginEnd.asMotion(),\n      ...animateObject,\n    }\"\n    :exit=\"{\n      transition: transitionConfig.preset.short.exit.asMotion(),\n      ...exitObject,\n    }\"\n    :class=\"[radioVariants({ color }), $attrs.class]\"\n    :data-is-disabled=\"disabled ? 'true' : undefined\"\n    @click=\"onClick\"\n    v-tw-merge\n  >\n    <input\n      ref=\"input\"\n      type=\"radio\"\n      class=\"sr-only\"\n      :disabled\n      :checked=\"group === value || checked\"\n      :value\n      @change=\"onChange\"\n      v-bind=\"attrsWithoutClass($attrs)\"\n      v-tw-merge\n    />\n    <span\n      aria-hidden\n      :class=\"\n        radioVariants.mark({\n          color,\n          checked: group === value || checked,\n        })\n      \"\n      v-tw-merge\n    >\n      <AnimatePresence mode=\"wait\">\n        <motion.span\n          v-if=\"group === value || checked\"\n          :initial=\"{ scale: 0, opacity: 0 }\"\n          :exit=\"{ scale: 0, opacity: 0 }\"\n          :animate=\"{\n            scale: 1,\n            opacity: 1,\n          }\"\n          :transition=\"{\n            duration: materialDuration.asMotion('short-2'),\n            ease: materialEasing.standard,\n          }\"\n          :class=\"radioVariants.icon({ color })\"\n          v-tw-merge\n        />\n      </AnimatePresence>\n    </span>\n  </MotionComponent>\n</template>\n","hash":"7634e373b3ce616f84e1ee19743ad6f014c142cc373b54830139e3ca2cbc242e"},{"path":"components/selections/ui-menu/index.ts","content":"export {\n  Popover as Menu,\n  PopoverTrigger as MenuTrigger\n} from '../../containments';\nexport { default as MenuContent, type MenuContentProps } from './ui-menu-content.vue';\nexport { default as MenuItem, type MenuItemProps } from './ui-menu-item.vue';\nexport { default as MenuSection, type MenuSectionProps } from './ui-menu-section.vue';\nexport * from './ui-menu.variants';\n\n","hash":"903652ac402dca0dfdf2eecbe1ba28596063c8ad02de5fb28fd7c0a6a9b65847"},{"path":"components/selections/ui-menu/ui-menu-content.vue","content":"<script setup lang=\"ts\">\nimport {\n  PopoverContent,\n  type PopoverContentProps,\n} from '@/components/containments';\nimport { materialDuration, materialEasing } from '@/config';\nimport type { PropsPolymorphic } from '@/types';\nimport { motion } from 'motion-v';\nimport { menuVariants } from './ui-menu.variants';\nimport { provideMenuState } from './ui-menu.context';\nimport type { MenuStateOptions } from './ui-menu.context';\nimport { computed, onUnmounted } from 'vue';\n\nexport type MenuContentProps = PropsPolymorphic &\n  Omit<PopoverContentProps, 'as'> & {\n    contentAs?: PropsPolymorphic['as'];\n    selectedValues?: MenuStateOptions['selectedValues'];\n    selectionMode?: MenuStateOptions['selectionMode'];\n    disabledValues?: MenuStateOptions['disabledValues'];\n  };\n\nconst {\n  as = motion.div,\n  selectionMode = 'none',\n  selectedValues = [],\n  disabledValues = [],\n  contentAs,\n  placement = 'bottom',\n  offset = 4,\n  ...contentProps\n} = defineProps<MenuContentProps>();\n\ndefineOptions({\n  inheritAttrs: false,\n});\n\nconst emit = defineEmits<{\n  change: [values: MenuStateOptions['selectedValues']];\n}>();\n\nconst selectedValuesComputed = computed(() => selectedValues);\n\nconst { triggerId, clearCollection } = provideMenuState({\n  selectionMode: () => selectionMode,\n  disabledValues: () => disabledValues,\n  selectedValues: selectedValuesComputed,\n  onChange: (v) => emit('change', v),\n});\n\nonUnmounted(clearCollection);\n</script>\n\n<template>\n  <PopoverContent :as=\"contentAs\" :placement :offset v-bind=\"contentProps\">\n    <component\n      :is=\"as\"\n      :initial=\"{ opacity: 0, scale: 0 }\"\n      :animate=\"{ opacity: 1, scale: 1 }\"\n      :exit=\"{ opacity: 0, scale: 0 }\"\n      :transition=\"{\n        duration: materialDuration.asMotion('medium-1'),\n        ease: materialEasing.standard,\n      }\"\n      :class=\"menuVariants()\"\n      v-bind=\"$attrs\"\n      v-tw-merge\n    >\n      <ul\n        :aria-labelledby=\"triggerId\"\n        role=\"menu\"\n        tabindex=\"-1\"\n        :class=\"menuVariants.list()\"\n        v-tw-merge\n      >\n        <slot />\n      </ul>\n    </component>\n  </PopoverContent>\n</template>\n","hash":"bc6e6b543bb16f6da488c15944236dc6dcf8ec0967f23462af4ddd3f5bfba595"},{"path":"components/selections/ui-menu/ui-menu-item.vue","content":"<script setup lang=\"ts\">\nimport { computed, onUnmounted, useId, useTemplateRef } from 'vue';\nimport { useMenuState } from './ui-menu.context';\nimport { menuVariants } from './ui-menu.variants';\nimport { useInteractions, useRipple } from '@/composables';\nimport { AnimatePresence } from 'motion-v';\nimport { materialDuration, materialEasing } from '@/config';\nimport { IconCheck } from '@tabler/icons-vue';\nimport { MotionComponent } from '@/components/utility';\n\nexport type MenuItemProps = {\n  value: string;\n  emptyLeftIcon?: boolean;\n  leftKey?: string;\n  rightKey?: string;\n};\n\nconst { value, emptyLeftIcon, leftKey, rightKey } =\n  defineProps<MenuItemProps>();\n\nconst {\n  selectionMode,\n  selectedValues,\n  disabledValues,\n  focusedId,\n  addToCollection,\n  removeFromCollection,\n  toggleSelect,\n} = useMenuState();\n\nconst elementRef = useTemplateRef<HTMLElement>('menu-item');\n\nconst id = useId();\n\nconst isSelected = computed(() => selectedValues.value.includes(value));\nconst isDisabled = computed(() => disabledValues.value.includes(value));\n\naddToCollection(id);\n\nonUnmounted(() => {\n  removeFromCollection(id);\n});\n\nconst role = computed(() => {\n  if (selectionMode.value === 'multiple') return 'menuitemcheckbox';\n  if (selectionMode.value === 'single') return 'menuitemradio';\n  return 'menuitem';\n});\n\nuseInteractions(elementRef);\nuseRipple(elementRef);\n</script>\n\n<template>\n  <li\n    :id\n    ref=\"menu-item\"\n    :tabindex=\"focusedId === id ? 0 : -1\"\n    :role\n    :aria-checked=\"selectionMode !== 'none' ? isSelected : undefined\"\n    :aria-disabled=\"isDisabled\"\n    :data-value=\"value\"\n    :class=\"menuVariants.item({ isSelected })\"\n    @focus=\"focusedId = id\"\n    @blur=\"focusedId = null\"\n    @click=\"toggleSelect(value)\"\n    v-tw-merge\n  >\n    <AnimatePresence mode=\"sync\">\n      <MotionComponent\n        as-child\n        v-if=\"emptyLeftIcon || $slots.left || isSelected\"\n        :key=\"`${leftKey}-${emptyLeftIcon}-${isSelected}`\"\n        :initial=\"{ width: 0, height: 0, opacity: 0, marginRight: 0 }\"\n        :exit=\"{ width: 0, height: 0, opacity: 0, marginRight: 0 }\"\n        :animate=\"{\n          width: 'var(--spacing-6)',\n          height: 'var(--spacing-6)',\n          opacity: 1,\n          marginRight: 'var(--spacing-sm)',\n        }\"\n        :class=\"[menuVariants.icon({ position: 'left' }), 'menu--left-icon']\"\n      >\n        <IconCheck v-if=\"isSelected\" />\n        <slot name=\"left\" v-else>\n          <div aria-hidden />\n        </slot>\n      </MotionComponent>\n    </AnimatePresence>\n    <span :class=\"menuVariants.label()\" v-tw-merge>\n      <slot />\n    </span>\n    <AnimatePresence mode=\"sync\">\n      <MotionComponent\n        as-child\n        v-if=\"$slots.right\"\n        :key=\"rightKey\"\n        :initial=\"{ width: 0, height: 0, opacity: 0, marginLeft: 0 }\"\n        :exit=\"{ width: 0, height: 0, opacity: 0, marginLeft: 0 }\"\n        :animate=\"{\n          width: 'var(--spacing-6)',\n          height: 'var(--spacing-6)',\n          opacity: 1,\n          marginLeft: 'var(--spacing-sm)',\n        }\"\n        :transition=\"{\n          duration: materialDuration.asMotion('medium-1'),\n          ease: materialEasing.standard,\n        }\"\n        :class=\"[menuVariants.icon({ position: 'right' }), 'menu--right-icon']\"\n      >\n        <slot name=\"right\" />\n      </MotionComponent>\n    </AnimatePresence>\n  </li>\n</template>\n","hash":"0a7a89cc6ab5ddb5d4640ee86bb8e377fc9c8b09a083af33d427cb243f9802fd"},{"path":"components/selections/ui-menu/ui-menu-section.vue","content":"<script setup lang=\"ts\">\nimport { computed, onUnmounted, useId } from 'vue';\nimport { useMenuState } from './ui-menu.context';\nimport { menuVariants } from './ui-menu.variants';\nimport { Divider } from '@/components/containments';\n\nexport type MenuSectionProps = {\n  label?: string;\n};\n\nconst { label } = defineProps<MenuSectionProps>();\n\ndefineOptions({\n  inheritAttrs: false,\n});\n\nconst { collection, addToCollection, removeFromCollection } = useMenuState();\n\nconst id = useId();\n\nconst sectionId = `${id}-section`;\n\nconst showDivider = computed(() => collection.value[0] !== sectionId);\n\naddToCollection(sectionId);\n\nonUnmounted(() => {\n  removeFromCollection(sectionId);\n});\n</script>\n\n<template>\n  <Divider v-if=\"showDivider\" :class=\"menuVariants.divider()\" />\n  <li role=\"presentation\" v-bind=\"$attrs\">\n    <ul\n      :aria-label=\"label\"\n      :class=\"menuVariants.list({ withScroll: true })\"\n      v-tw-merge\n    >\n      <slot />\n    </ul>\n  </li>\n</template>\n","hash":"70c416dda248a140521fa2c804d6ca36eec1c5103a4532db9e9366272ee63150"},{"path":"components/selections/ui-menu/ui-menu.context.ts","content":"import { usePopoverState } from '@/components/containments/ui-popover/ui-popover.context';\nimport type { Context } from '@/types';\nimport { toRef, useEventListener } from '@vueuse/core';\nimport {\n  type ComputedRef,\n  type InjectionKey,\n  type Ref,\n  computed,\n  inject,\n  provide,\n  ref,\n} from 'vue';\n\ntype SelectionMode = 'single' | 'multiple' | 'none';\n\ntype MenuContext = Context<\n  {\n    selectionMode: Ref<SelectionMode>;\n    disabledValues: Ref<string[]>;\n    selectedValues: ComputedRef<string[]>;\n    collection: Ref<string[]>;\n    focusedId: Ref<string | null>;\n    triggerId: ComputedRef<string | undefined>;\n    addToCollection: (value: string) => void;\n    removeFromCollection: (value: string) => void;\n    clearCollection: () => void;\n    select: (value: string) => void;\n    unselect: (value: string) => void;\n    toggleSelect: (value: string) => void;\n  },\n  {\n    selectionMode: SelectionMode;\n    disabledValues: string[];\n  },\n  {\n    selectedValues: string[];\n  },\n  {\n    onChange: (values: string[]) => void;\n  }\n>;\n\nexport type MenuState = MenuContext['state'];\n\nexport type MenuStateOptions = MenuContext['options'];\n\nconst modalStateKey = Symbol() as InjectionKey<MenuState>;\n\nexport function provideMenuState(options: MenuContext['provideOptions']) {\n  const collection = ref<string[]>([]);\n  const itemsCollection = computed(() =>\n    collection.value.filter((v) => !v.endsWith('-section')),\n  );\n  const selectedValues = options.selectedValues;\n  const selectionMode = toRef(options.selectionMode);\n  const disabledValues = toRef(options.disabledValues);\n  const focusedId = ref<string | null>(null);\n\n  const { open: isMenuOpen, triggerElement } = usePopoverState();\n\n  const triggerId = computed(() => triggerElement.value?.id);\n\n  function addToCollection(value: string) {\n    if (collection.value.includes(value)) {\n      throw new Error(`Duplicate value \"${value}\" in Menu state collection`);\n    }\n    collection.value = [...collection.value, value];\n  }\n\n  function removeFromCollection(value: string) {\n    collection.value = collection.value.filter((v) => v !== value);\n  }\n\n  function clearCollection() {\n    collection.value = [];\n  }\n\n  function select(value: string) {\n    if (selectionMode.value === 'none') return;\n    if (selectionMode.value === 'single') {\n      options.onChange([value]);\n      return;\n    }\n    options.onChange([\n      ...selectedValues.value.filter((v) => v !== value),\n      value,\n    ]);\n  }\n\n  function unselect(value: string) {\n    if (selectionMode.value === 'single') return;\n    options.onChange(selectedValues.value.filter((v) => v !== value));\n  }\n\n  function toggleSelect(value: string) {\n    const isSelected = selectedValues.value.includes(value);\n    if (isSelected) {\n      unselect(value);\n    } else {\n      select(value);\n    }\n  }\n\n  function focusItem(ids: string[]) {\n    let item: HTMLElement | null = null;\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const el = document.querySelector(`#${id}`) as HTMLElement | null;\n      if (el && el.ariaDisabled !== 'true') {\n        item = el;\n        break;\n      }\n    }\n    item?.focus();\n  }\n\n  function focusNext() {\n    let ids = itemsCollection.value;\n\n    if (focusedId.value) {\n      const index = itemsCollection.value.findIndex(\n        (v) => v === focusedId.value,\n      );\n      if (index !== itemsCollection.value.length - 1) {\n        ids = itemsCollection.value.slice(index + 1);\n      }\n    }\n\n    focusItem(ids);\n  }\n\n  function focusPrevious() {\n    let ids = itemsCollection.value;\n\n    if (focusedId.value) {\n      const index = itemsCollection.value.findIndex(\n        (v) => v === focusedId.value,\n      );\n      if (index !== 0) {\n        ids = itemsCollection.value.slice(0, index);\n      }\n    }\n\n    focusItem([...ids].reverse());\n  }\n\n  useEventListener('keydown', (e) => {\n    if (!isMenuOpen.value) return;\n    if (\n      ![\n        'ArrowDown',\n        'ArrowUp',\n        'ArrowRight',\n        'ArrowLeft',\n        'Home',\n        'End',\n        ' ',\n      ].includes(e.key)\n    )\n      return;\n    e.preventDefault();\n\n    if (e.key === 'ArrowDown' || e.key === 'ArrowRight') focusNext();\n    if (e.key === 'ArrowUp' || e.key === 'ArrowLeft') focusPrevious();\n    if (e.key === 'Home') focusItem(itemsCollection.value);\n    if (e.key === 'End') focusItem([...itemsCollection.value].reverse());\n    if (e.key === ' ') {\n      if (!focusedId.value) return;\n      const item = document.querySelector(\n        `#${focusedId.value}`,\n      ) as HTMLElement | null;\n      item?.click();\n    }\n  });\n\n  // watchEffect(() => {\n  //   if (selectionMode.value === 'none') {\n  //     selectedValues.value = [];\n  //   } else if (selectionMode.value === 'single') {\n  //     selectedValues.value = selectedValues.value.slice(0, 1);\n  //   }\n  // });\n\n  const state: MenuState = {\n    selectionMode,\n    collection,\n    disabledValues,\n    selectedValues,\n    focusedId,\n    triggerId,\n    addToCollection,\n    removeFromCollection,\n    clearCollection,\n    select,\n    unselect,\n    toggleSelect,\n  };\n\n  provide(modalStateKey, state);\n\n  return state;\n}\n\nexport function useMenuState() {\n  const state = inject(modalStateKey);\n\n  if (!state) {\n    throw new Error('useMenuState must be used within a MenuContent component');\n  }\n\n  return state;\n}\n","hash":"eb6a34d6fc6c2714cf9370df06fb5cb94d737733680dbb628805e5a5c1192fdb"},{"path":"components/selections/ui-menu/ui-menu.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva([\n  'menu group/menu',\n  'relative',\n  'bg-surface-container',\n  'elevation-2',\n  'rounded-xs',\n  'py-xs',\n  'overflow-y-auto overflow-x-hidden',\n  'inline-grid min-w-28 max-w-72',\n]);\n\nconst listVariants = cva(['menu--list', 'relative', 'inline-grid w-full'], {\n  variants: {\n    withScroll: {\n      true: 'overflow-y-auto overflow-x-hidden',\n      false: 'overflow-hidden',\n    },\n  },\n  defaultVariants: {\n    withScroll: false,\n  },\n});\n\nconst itemVariants = cva(\n  [\n    'menu--item group/menu--item',\n    'relative',\n    'outline-none border-transparent',\n    'overflow-hidden',\n    'inline-flex items-center',\n    ['typography-label-large', 'is-disabled:text-on-surface/38'],\n    'h-12',\n    'px-sm',\n    'transition easing-standard duration-medium-1',\n    [\n      'is-disabled:state-transparent',\n      'is-disabled:pointer-events-none',\n      'is-hovered:state-hover',\n      'in-focus-visible:state-focus',\n      'is-pressed:state-press',\n    ],\n    'ripple-wrapper:inset-0',\n    'cursor-pointer select-none touch-pan-y touch-pan-x touch-pinch-zoom',\n  ],\n  {\n    variants: {\n      isSelected: {\n        true: [\n          ['bg-primary-container', 'is-disabled:bg-on-surface/8'],\n          'text-on-primary-container',\n          'state-on-primary-container',\n          'ripple:bg-on-primary-container',\n        ],\n        false: ['text-on-surface', 'state-on-surface', 'ripple:bg-primary'],\n      },\n    },\n    defaultVariants: {\n      isSelected: false,\n    },\n  },\n);\n\nconst dividerVariants = cva(['menu--divider', 'my-xs first:mt-0 last:mb-0']);\n\nconst iconVariants = cva(\n  [\n    'menu--icon',\n    [\n      'text-on-surface-variant',\n      'group-data-[is-selected=true]/menu--item:text-on-primary-container',\n      'group-is-disabled/menu--item:text-on-surface/38',\n    ],\n    'relative inline-block',\n    'size-6',\n  ],\n  {\n    variants: {\n      position: {\n        left: 'mr-sm',\n        right: 'ml-sm',\n      },\n    },\n  },\n);\n\nconst labelVariants = cva([\n  'menu--label',\n  'inline-flex flex-1 items-center',\n  'min-w-16',\n]);\n\nexport const menuVariants = Object.assign(variants, {\n  list: listVariants,\n  item: itemVariants,\n  divider: dividerVariants,\n  icon: iconVariants,\n  label: labelVariants,\n});\n\nexport type MenuVariants = Variants<typeof menuVariants>;\n\nexport type MenuListVariants = Variants<typeof menuVariants.list>;\n\nexport type MenuItemVariants = Variants<typeof menuVariants.item>;\n\nexport type MenuDividerVariants = Variants<typeof menuVariants.divider>;\n\nexport type MenuIconVariants = Variants<typeof menuVariants.icon>;\n\nexport type MenuLabelVariants = Variants<typeof menuVariants.label>;\n","hash":"c36e96ce0c7c00c8877646694a9b4d4c895b70d0edbdaa2ff8996d6a77f6ccfc"},{"path":"components/selections/ui-checkbox/index.ts","content":"export * from './ui-checkbox.variants';\nexport { default as Checkbox, type CheckboxProps } from './ui-checkbox.vue';\n\n","hash":"178f3bd6c89cad4bbdc4eaaa5a4ce4f3e08d9fa1ff80a3b13572e373e4e273c3"},{"path":"components/selections/ui-checkbox/ui-checkbox.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva(\n  [\n    'checkbox group/checkbox',\n    'relative',\n    'inline-flex items-center justify-center',\n    'transition easing-standard duration-medium-1',\n    'size-10 rounded-full',\n    'is-disabled:pointer-events-none',\n    [\n      'is-disabled:state-transparent',\n      'is-hovered:state-hover',\n      'in-focus-within:state-focus',\n      'is-pressed:state-press',\n    ],\n    ['ripple-wrapper:inset-0'],\n  ],\n  {\n    variants: {\n      color: {\n        primary: ['state-primary', 'ripple:bg-primary'],\n        secondary: ['state-secondary', 'ripple:bg-secondary'],\n        info: ['state-info', 'ripple:bg-info'],\n        success: ['state-success', 'ripple:bg-success'],\n        caution: ['state-caution', 'ripple:bg-caution'],\n        critical: ['state-critical', 'ripple:bg-critical'],\n      },\n    },\n    defaultVariants: {\n      color: 'primary',\n    },\n  },\n);\n\nconst markVariants = cva(\n  [\n    'checkbox--mark',\n    'relative',\n    'inline-flex items-center justify-center',\n    'transition easing-standard duration-medium-1',\n    'size-4.5 rounded-xs',\n    'overflow-hidden',\n    'border-2',\n  ],\n  {\n    variants: {\n      color: {\n        primary: [],\n        secondary: [],\n        info: [],\n        success: [],\n        caution: [],\n        critical: [],\n      },\n      state: {\n        unchecked: [\n          'border-outline',\n          'group-is-disabled/checkbox:border-on-surface/38',\n        ],\n        checked: [],\n        indeterminate: [],\n      },\n    },\n    defaultVariants: {\n      color: 'primary',\n      state: 'unchecked',\n    },\n    compoundVariants: [\n      {\n        state: ['checked', 'indeterminate'],\n        class: [\n          'border-transparent',\n          'group-is-disabled/checkbox:text-surface',\n          'group-is-disabled/checkbox:bg-on-surface/38',\n        ],\n      },\n      {\n        state: ['checked', 'indeterminate'],\n        color: 'primary',\n        class: ['bg-primary text-on-primary'],\n      },\n      {\n        state: ['checked', 'indeterminate'],\n        color: 'secondary',\n        class: ['bg-secondary text-on-secondary'],\n      },\n      {\n        state: ['checked', 'indeterminate'],\n        color: 'info',\n        class: ['bg-info text-on-info'],\n      },\n      {\n        state: ['checked', 'indeterminate'],\n        color: 'success',\n        class: ['bg-success text-on-success'],\n      },\n      {\n        state: ['checked', 'indeterminate'],\n        color: 'caution',\n        class: ['bg-caution text-on-caution'],\n      },\n      {\n        state: ['checked', 'indeterminate'],\n        color: 'critical',\n        class: ['bg-critical text-on-critical'],\n      },\n    ],\n  },\n);\n\nconst iconVariants = cva([\n  'checkbox--icon',\n  'absolute inline-block size-4',\n  'transition easing-standard duration-short-2',\n]);\n\nexport const checkboxVariants = Object.assign(variants, {\n  mark: markVariants,\n  icon: iconVariants,\n});\n\nexport type CheckboxVariants = Variants<typeof checkboxVariants>;\n\nexport type CheckboxMarkVariants = Variants<typeof checkboxVariants.mark>;\n\nexport type CheckboxIconVariants = Variants<typeof checkboxVariants.icon>;\n","hash":"5664d3b72e119a44204622733facbc8413393379bc0f171e10bd1fd54273d16c"},{"path":"components/selections/ui-checkbox/ui-checkbox.vue","content":"<script setup lang=\"ts\">\nimport type { UnknownRecord } from '@bruhabruh/type-safe';\nimport { computed, useTemplateRef } from 'vue';\nimport { computedVariants, useInteractions, useRipple } from '@/composables';\nimport { AnimatePresence } from 'motion-v';\nimport { materialDuration, materialEasing, transitionConfig } from '@/config';\nimport { checkboxVariants } from './ui-checkbox.variants';\nimport type {\n  CheckboxMarkVariants,\n  CheckboxVariants,\n} from './ui-checkbox.variants';\nimport { IconCheck, IconMinus } from '@tabler/icons-vue';\nimport {\n  MotionComponent,\n  type MotionComponentProps,\n} from '@/components/utility';\n\nexport type CheckboxProps = MotionComponentProps & {\n  value: string | number;\n  color?: CheckboxVariants['color'];\n  checked?: boolean;\n  indeterminate?: boolean;\n  disabled?: boolean;\n};\n\nconst {\n  value,\n  color,\n  disabled,\n  checked,\n  indeterminate,\n  as = 'div',\n  initial,\n  animate,\n  exit,\n  ...motionProps\n} = defineProps<CheckboxProps>();\n\ndefineOptions({\n  inheritAttrs: false,\n});\n\nconst elementRef = useTemplateRef<HTMLElement>('checkbox');\nconst inputRef = useTemplateRef<HTMLInputElement>('input');\n\nconst emit = defineEmits<{\n  change: [checked: boolean];\n}>();\n\nconst group = defineModel<(string | number)[] | undefined>('group', {\n  default: undefined,\n});\n\nconst state = computed<NonNullable<CheckboxMarkVariants['state']>>(() => {\n  if (group.value?.includes(value) || checked) return 'checked';\n  if (indeterminate) return 'indeterminate';\n  return 'unchecked';\n});\n\nfunction attrsWithoutClass(attrs: UnknownRecord) {\n  const newAttrs = { ...attrs };\n  if ('class' in newAttrs) delete newAttrs.class;\n  return newAttrs;\n}\n\nfunction update(isChecked: boolean) {\n  emit('change', isChecked);\n  if (!group.value) return;\n  if (isChecked) {\n    group.value = [...group.value.filter((v) => v !== value), value];\n  } else {\n    group.value = group.value.filter((v) => v !== value);\n  }\n}\n\nfunction onClick() {\n  update(!(group.value?.includes(value) || checked));\n  if (!elementRef.value) return;\n  inputRef.value?.focus();\n}\n\nfunction onChange(e: Event) {\n  const target = e.target as HTMLInputElement | null;\n  if (!target) return;\n  update(Boolean(target.checked));\n}\n\nuseInteractions(elementRef, {\n  disabled: false,\n});\nuseRipple(elementRef);\n\nconst {\n  initial: initialObject,\n  animate: animateObject,\n  exit: exitObject,\n} = computedVariants(() => ({\n  initial,\n  animate,\n  exit,\n}));\n</script>\n\n<template>\n  <MotionComponent\n    :as\n    ref=\"checkbox\"\n    v-bind=\"motionProps\"\n    :initial=\"{\n      transition: transitionConfig.preset.short.enter.asMotion(),\n      ...initialObject,\n    }\"\n    :animate=\"{\n      transition: transitionConfig.preset.short.beginEnd.asMotion(),\n      ...animateObject,\n    }\"\n    :exit=\"{\n      transition: transitionConfig.preset.short.exit.asMotion(),\n      ...exitObject,\n    }\"\n    :data-is-disabled=\"disabled ? 'true' : undefined\"\n    :class=\"[checkboxVariants({ color }), $attrs.class]\"\n    @click=\"onClick\"\n    v-tw-merge\n  >\n    <input\n      ref=\"input\"\n      type=\"checkbox\"\n      class=\"sr-only\"\n      :indeterminate\n      :disabled\n      :checked=\"group?.includes(value) || checked\"\n      :value\n      @change=\"onChange\"\n      v-bind=\"attrsWithoutClass($attrs)\"\n      v-tw-merge\n    />\n    <span\n      aria-hidden\n      :class=\"checkboxVariants.mark({ color, state })\"\n      v-tw-merge\n    >\n      <AnimatePresence mode=\"wait\">\n        <MotionComponent\n          as-child\n          v-if=\"state !== 'unchecked'\"\n          :key=\"state\"\n          :initial=\"{ scale: 0, opacity: 0 }\"\n          :exit=\"{ scale: 0, opacity: 0 }\"\n          :animate=\"{\n            scale: 1,\n            opacity: 1,\n          }\"\n          :transition=\"{\n            duration: materialDuration.asMotion('short-2'),\n            ease: materialEasing.standard,\n          }\"\n          :class=\"checkboxVariants.icon()\"\n        >\n          <IconCheck v-if=\"state === 'checked'\" />\n          <IconMinus v-else-if=\"state === 'indeterminate'\" />\n        </MotionComponent>\n      </AnimatePresence>\n    </span>\n  </MotionComponent>\n</template>\n","hash":"3a832550842412c68b93141a85dbfb2702806d9b60687df08445be7306c6cfc6"},{"path":"components/navigations/index.ts","content":"export * from './ui-breadcrumbs';\nexport * from './ui-pagination';\nexport * from './ui-navigation-bar';\n","hash":"f7cef125e5d631a0a2ec651ab28dc385f227fc05564abe54bb042bd6ad7f0794"},{"path":"components/navigations/ui-pagination/index.ts","content":"export * from './ui-pagination.variants';\nexport { default as Pagination, type PaginationProps } from './ui-pagination.vue';\n\n","hash":"bfa9732bd1ccd4173a938d4c20eafb23e7d305fa3edaa11c49e6174a80969c34"},{"path":"components/navigations/ui-pagination/ui-pagination.utility.ts","content":"export function calculatePages({\n  page,\n  pageAmount,\n  pagesToView,\n}: {\n  page: number;\n  pageAmount: number;\n  pagesToView: number;\n}) {\n  let leftCount: number, rightCount: number;\n\n  if (pagesToView % 2 === 0) {\n    leftCount = pagesToView / 2;\n    rightCount = pagesToView / 2 - 1;\n  } else {\n    leftCount = rightCount = Math.floor(pagesToView / 2);\n  }\n\n  let start = page - leftCount;\n  let end = page + rightCount;\n\n  if (start < 1) {\n    const diff = 1 - start;\n    end = Math.min(end + diff, pageAmount);\n    start = 1;\n  }\n\n  if (end > pageAmount) {\n    const diff = end - pageAmount;\n    start = Math.max(start - diff, 1);\n    end = pageAmount;\n  }\n\n  const pages: number[] = [];\n  for (let i = start; i <= end; i++) {\n    pages.push(i);\n  }\n\n  return pages;\n}\n","hash":"a57c8b7e96219c7e0d62717f3dd98a517df0b68d108a14aa89cb2a3c2363f7a8"},{"path":"components/navigations/ui-pagination/ui-pagination.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva([\n  'pagination group/pagination',\n  'inline-flex items-center justify-center',\n  'gap-xs',\n]);\n\nconst buttonVariants = cva(['pagination--button', 'typography-label-large']);\n\nconst buttonTextVariants = cva([\n  'pagination--button-text',\n  'inline-flex items-center justify-center',\n]);\n\nexport const paginationVariants = Object.assign(variants, {\n  button: buttonVariants,\n  buttonText: buttonTextVariants,\n});\n\nexport type PaginationVariants = Variants<typeof paginationVariants>;\n\nexport type PaginationButtonVariants = Variants<\n  typeof paginationVariants.button\n>;\n\nexport type PaginationButtonTextVariants = Variants<\n  typeof paginationVariants.buttonText\n>;\n","hash":"7da5e23273ca792d5bff789eaf70568ed7041f5f3dff290b7f2c06815bda94ac"},{"path":"components/navigations/ui-pagination/ui-pagination.vue","content":"<script setup lang=\"ts\">\nimport { paginationVariants } from './ui-pagination.variants';\nimport { computed, nextTick, useId, useTemplateRef, watchEffect } from 'vue';\nimport { IconButton } from '@/components/actions';\nimport { useEventListener, useFocusWithin } from '@vueuse/core';\nimport { IconChevronLeft, IconChevronRight } from '@tabler/icons-vue';\nimport { calculatePages } from './ui-pagination.utility';\nimport {\n  MotionComponent,\n  type MotionComponentProps,\n} from '@/components/utility';\nimport { computedVariants } from '@/composables';\nimport { transitionConfig } from '@/config';\n\nexport type PaginationProps = MotionComponentProps & {\n  pageAmount?: number;\n  pagesToView?: number;\n};\n\nconst {\n  pageAmount = 1,\n  pagesToView = 5,\n  as = 'div',\n  initial,\n  animate,\n  exit,\n  ...motionProps\n} = defineProps<PaginationProps>();\n\nconst elementRef = useTemplateRef<HTMLElement>('pagination');\n\nconst page = defineModel<number>('page', {\n  default: 1,\n});\n\nconst id = useId();\nconst pages = computed(() =>\n  calculatePages({ page: page.value, pageAmount, pagesToView }),\n);\nconst hasPrevious = computed(() => page.value > 1);\nconst hasNext = computed(() => page.value < pageAmount);\nconst { focused } = useFocusWithin(elementRef);\n\nwatchEffect(() => {\n  const isLowerThanMinPage = page.value < 1;\n  const isHigherThanMaxPage = page.value > pageAmount;\n\n  if (isLowerThanMinPage && isHigherThanMaxPage) return;\n  if (isLowerThanMinPage) {\n    page.value = 1;\n  } else if (isHigherThanMaxPage) {\n    page.value = pageAmount;\n  }\n});\n\nfunction selectPage(newPage: number) {\n  const isLowerThanMinPage = newPage < 1;\n  const isHigherThanMaxPage = newPage > pageAmount;\n\n  if (isLowerThanMinPage && isHigherThanMaxPage) return;\n  if (isLowerThanMinPage) {\n    page.value = 1;\n  } else if (isHigherThanMaxPage) {\n    page.value = pageAmount;\n  } else {\n    page.value = newPage;\n  }\n}\n\nfunction nextPage() {\n  if (!hasNext.value) return;\n  page.value = page.value + 1;\n}\n\nfunction previousPage() {\n  if (!hasPrevious.value) return;\n  page.value = page.value - 1;\n}\n\nuseEventListener('keydown', async (e) => {\n  if (!focused.value) return;\n  if (['ArrowLeft', 'ArrowUp'].includes(e.key)) {\n    previousPage();\n  } else if (['ArrowRight', 'ArrowDown'].includes(e.key)) {\n    nextPage();\n  } else {\n    return;\n  }\n  await nextTick();\n  const currentPageButton = document.querySelector(\n    `#${id}-p-${page.value}`,\n  ) as HTMLElement | null;\n  currentPageButton?.focus();\n});\n\nconst {\n  initial: initialObject,\n  animate: animateObject,\n  exit: exitObject,\n} = computedVariants(() => ({\n  initial,\n  animate,\n  exit,\n}));\n</script>\n\n<template>\n  <MotionComponent\n    :as\n    ref=\"pagination\"\n    role=\"radiogroup\"\n    v-bind=\"motionProps\"\n    :initial=\"{\n      transition: transitionConfig.preset.short.enter.asMotion(),\n      ...initialObject,\n    }\"\n    :animate=\"{\n      transition: transitionConfig.preset.short.beginEnd.asMotion(),\n      ...animateObject,\n    }\"\n    :exit=\"{\n      transition: transitionConfig.preset.short.exit.asMotion(),\n      ...exitObject,\n    }\"\n    :class=\"paginationVariants()\"\n  >\n    <slot name=\"previous\" :disabled=\"!hasPrevious\" @click=\"previousPage()\">\n      <IconButton\n        aria-label=\"Previous page\"\n        variant=\"tonal\"\n        :disabled=\"!hasPrevious\"\n        @click=\"previousPage()\"\n      >\n        <IconChevronLeft />\n      </IconButton>\n    </slot>\n    <slot\n      v-for=\"p in pages\"\n      :key=\"p\"\n      :id=\"`${id}-page-${p}`\"\n      :selected=\"page === p\"\n      :page=\"p\"\n      @click=\"selectPage(p)\"\n    >\n      <IconButton\n        :id=\"`${id}-p-${p}`\"\n        variant=\"tonal\"\n        toggleable\n        :selected=\"page === p\"\n        role=\"radio\"\n        :aria-checked=\"page === p\"\n        :tabindex=\"page === p ? 0 : -1\"\n        @click=\"selectPage(p)\"\n      >\n        <span :class=\"paginationVariants.buttonText()\" v-tw-merge>\n          {{ p }}\n        </span>\n      </IconButton>\n    </slot>\n    <slot name=\"next\" :disabled=\"!hasNext\" @click=\"nextPage()\">\n      <IconButton\n        aria-label=\"Next page\"\n        variant=\"tonal\"\n        :disabled=\"!hasNext\"\n        @click=\"nextPage()\"\n      >\n        <IconChevronRight />\n      </IconButton>\n    </slot>\n  </MotionComponent>\n</template>\n","hash":"e8ed8ce18285746c12597bd0a899401fd1094ab0c082f60edcfbbf548bfff455"},{"path":"components/navigations/ui-navigation-bar/index.ts","content":"export {\n  default as NavigationBar,\n  type NavigationBarProps,\n} from './ui-navigation-bar.vue';\nexport * from './ui-navigation-bar.variants';\nexport {\n  default as NavigationBarItem,\n  type NavigationBarItemProps,\n} from './ui-navigation-bar-item.vue';\n","hash":"92a130fd7afabe3f2ee1f2bbab03b04381e407a3c23cdddae768fbd62997e1ca"},{"path":"components/navigations/ui-navigation-bar/ui-navigation-bar-item.vue","content":"<script setup lang=\"ts\">\nimport type { PropsPolymorphic } from '@/types';\nimport { navigationBarVariants } from './ui-navigation-bar.variants';\nimport { useTemplateRef } from 'vue';\nimport { useInteractions } from '@/composables';\nimport { MotionComponent } from '@/components/utility';\nimport { Badge, type BadgeProps } from '@/components/communications';\nimport { transitionConfig } from '@/config';\nimport { AnimatePresence } from 'motion-v';\n\nexport type NavigationBarItemProps = PropsPolymorphic & {\n  active?: boolean;\n  badgeColor?: BadgeProps['color'];\n  value?: BadgeProps['value'];\n  maxValue?: BadgeProps['maxValue'];\n};\n\nconst {\n  active,\n  badgeColor,\n  value = -1,\n  maxValue,\n  as = 'button',\n} = defineProps<NavigationBarItemProps>();\n\nconst elementRef = useTemplateRef<HTMLElement>('navigation-bar-item');\n\nuseInteractions(elementRef);\n</script>\n\n<template>\n  <component\n    ref=\"navigation-bar-item\"\n    :is=\"as\"\n    :class=\"navigationBarVariants.itemContainer()\"\n    v-tw-merge\n  >\n    <span :class=\"navigationBarVariants.item({ isSelected: active })\">\n      <MotionComponent\n        as=\"span\"\n        aria-hidden\n        :animate=\"\n          active\n            ? { width: '100%', left: 0, opacity: 1 }\n            : { width: '0', left: '50%', opacity: 0.1 }\n        \"\n        :transition=\"transitionConfig.preset.short.beginEnd.asMotion()\"\n        :class=\"navigationBarVariants.itemBackground()\"\n      />\n      <span\n        :class=\"navigationBarVariants.iconContainer({ isSelected: active })\"\n        v-tw-merge\n      >\n        <MotionComponent\n          as=\"span\"\n          aria-hidden\n          :animate=\"\n            active\n              ? { width: '100%', left: 0, opacity: 1 }\n              : { width: '0', left: '50%', opacity: 0.1 }\n          \"\n          :transition=\"transitionConfig.preset.short.beginEnd.asMotion()\"\n          :class=\"navigationBarVariants.iconContainerBackground()\"\n        />\n        <Badge as=\"span\" placement=\"icon\" :color=\"badgeColor\" :value :max-value>\n          <AnimatePresence mode=\"wait\">\n            <MotionComponent\n              as-child\n              tabindex=\"-1\"\n              :key=\"\n                active && $slots['selected-icon'] ? 'selected' : 'unselected'\n              \"\n              :initial=\"{\n                width: 0,\n                height: 0,\n                transition: transitionConfig.preset.short.enter.asMotion(),\n              }\"\n              :animate=\"{\n                width: 'var(--spacing-5)',\n                height: 'var(--spacing-5)',\n                transition: transitionConfig.preset.short.beginEnd.asMotion(),\n              }\"\n              :exit=\"{\n                width: 0,\n                height: 0,\n                transition: transitionConfig.preset.short.exit.asMotion(),\n              }\"\n              :class=\"navigationBarVariants.icon()\"\n            >\n              <slot v-if=\"!active || !$slots['selected-icon']\" name=\"icon\" />\n              <slot v-else name=\"selected-icon\" />\n            </MotionComponent>\n          </AnimatePresence>\n        </Badge>\n      </span>\n      <span :class=\"navigationBarVariants.label()\" v-tw-merge>\n        <slot />\n      </span>\n    </span>\n  </component>\n</template>\n","hash":"a1821c930449c2dc9974335557b7635be75d4640b3775f537fbc08abb05d785e"},{"path":"components/navigations/ui-navigation-bar/ui-navigation-bar.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva([\n  'navigation-bar group/navigation-bar @container/navigation-bar',\n  'w-full h-16 elevation-2',\n  'inline-flex items-center justify-center',\n  'bg-surface-container text-on-surface',\n  'transition easing-standard duration-medium-1',\n]);\n\nconst contentVariants = cva([\n  'navigation-bar--content',\n  'w-full max-w-screen-sm',\n  'inline-flex items-center justify-center',\n]);\n\nconst itemContainerVariants = cva([\n  'navigation-bar--item-container group/navigation-bar--item',\n  'flex-1',\n  'cursor-pointer',\n]);\n\nconst itemVariants = cva(\n  [\n    'navigation-bar--item',\n    'inline-flex flex-col items-center justify-center @md/navigation-bar:flex-row',\n    'gap-1',\n    'cursor-pointer',\n    'z-1',\n    'relative',\n    '@md/navigation-bar:h-10',\n    '@md/navigation-bar:px-4',\n    '@md/navigation-bar:rounded-full',\n    'transition easing-standard duration-medium-1',\n    [\n      '@md/navigation-bar:state-current',\n      '@md/navigation-bar:group-is-hovered/navigation-bar--item:state-hover',\n      '@md/navigation-bar:group-in-focus/navigation-bar--item:state-focus',\n      '@md/navigation-bar:group-is-pressed/navigation-bar--item:state-press',\n    ],\n  ],\n  {\n    variants: {\n      isSelected: {\n        true: ['@md/navigation-bar:text-on-secondary-container'],\n        false: ['@md/navigation-bar:text-on-surface-variant'],\n      },\n    },\n    defaultVariants: {\n      isSelected: false,\n    },\n  },\n);\n\nconst iconContainerVariants = cva(\n  [\n    'navigation-bar--icon-container',\n    'h-8 w-14 @md/navigation-bar:size-6',\n    'inline-flex items-center justify-center',\n    'rounded-full',\n    'z-1',\n    'relative',\n    'transition easing-standard duration-medium-1',\n    [\n      'state-current',\n      'group-is-hovered/navigation-bar--item:state-hover',\n      'group-in-focus-visible/navigation-bar--item:state-focus',\n      'group-is-pressed/navigation-bar--item:state-press',\n      '@md/navigation-bar:state-transparent',\n    ],\n  ],\n  {\n    variants: {\n      isSelected: {\n        true: [\n          'text-on-secondary-container',\n          '@md/navigation-bar:text-current',\n        ],\n        false: ['text-on-surface-variant'],\n      },\n    },\n    defaultVariants: {\n      isSelected: false,\n    },\n  },\n);\n\nconst iconVariants = cva(['navigation-bar--icon', 'size-5']);\n\nconst labelVariants = cva(\n  [\n    'navigation-bar--label',\n    'typography-label-medium',\n    'transition easing-standard duration-medium-1',\n  ],\n  {\n    variants: {\n      isSelected: {\n        true: ['text-secondary @md/navigation-bar:text-on-secondary-container'],\n        false: ['text-on-surface-variant'],\n      },\n    },\n    defaultVariants: {\n      isSelected: false,\n    },\n  },\n);\n\nconst itemBackgroundVariants = cva([\n  'navigation-bar--item-background',\n  'absolute',\n  'inset-0',\n  'rounded-full',\n  '-z-1',\n  'transition easing-standard duration-medium-1',\n  '@md/navigation-bar:bg-secondary-container',\n]);\n\nconst iconContainerBackgroundVariants = cva([\n  'navigation-bar--icon-container-background',\n  'absolute',\n  'inset-0',\n  'rounded-full',\n  '-z-1',\n  'transition easing-standard duration-medium-1',\n  'bg-secondary-container @md/navigation-bar:bg-transparent',\n]);\n\nexport const navigationBarVariants = Object.assign(variants, {\n  content: contentVariants,\n  itemContainer: itemContainerVariants,\n  item: itemVariants,\n  iconContainer: iconContainerVariants,\n  icon: iconVariants,\n  label: labelVariants,\n  itemBackground: itemBackgroundVariants,\n  iconContainerBackground: iconContainerBackgroundVariants,\n});\n\nexport type NavigationBarVariants = Variants<typeof navigationBarVariants>;\n\nexport type NavigationBarContentVariants = Variants<\n  typeof navigationBarVariants.content\n>;\n\nexport type NavigationBarItemContainerVariants = Variants<\n  typeof navigationBarVariants.itemContainer\n>;\n\nexport type NavigationBarItemVariants = Variants<\n  typeof navigationBarVariants.item\n>;\n\nexport type NavigationBarIconContainerVariants = Variants<\n  typeof navigationBarVariants.iconContainer\n>;\n\nexport type NavigationBarIconVariants = Variants<\n  typeof navigationBarVariants.icon\n>;\n\nexport type NavigationBarLabelVariants = Variants<\n  typeof navigationBarVariants.label\n>;\n","hash":"9c06beb28bf3dc7b2e3ccbf2f9bff4218f77ab64a7171159545d89af722ee92e"},{"path":"components/navigations/ui-navigation-bar/ui-navigation-bar.vue","content":"<script setup lang=\"ts\">\nimport type { PropsPolymorphic } from '@/types';\nimport { navigationBarVariants } from './ui-navigation-bar.variants';\nimport { useTemplateRef } from 'vue';\nimport { useInteractions } from '@/composables';\n\nexport type NavigationBarProps = PropsPolymorphic & {};\n\nconst { as = 'div' } = defineProps<NavigationBarProps>();\n\nconst elementRef = useTemplateRef<HTMLElement>('navigation-bar');\n\nuseInteractions(elementRef);\n</script>\n\n<template>\n  <component\n    ref=\"navigation-bar\"\n    :is=\"as\"\n    :class=\"navigationBarVariants()\"\n    v-tw-merge\n  >\n    <div :class=\"navigationBarVariants.content()\" v-tw-merge>\n      <slot />\n    </div>\n  </component>\n</template>\n","hash":"0579eda259b2f2e7c3e214b883f2918fa25d4e7cf9ef77b19cfb06e8946113e0"},{"path":"components/navigations/ui-breadcrumbs/index.ts","content":"export {\n  default as BreadcrumbsItem,\n  type BreadcrumbsItemProps\n} from './ui-breadcrumbs-item.vue';\nexport * from './ui-breadcrumbs.variants';\nexport {\n  default as Breadcrumbs,\n  type BreadcrumbsProps\n} from './ui-breadcrumbs.vue';\n\n","hash":"4f56bf0776e994ce0a171ab9a2e70a8acdee735f047f433b5353d1c255b780db"},{"path":"components/navigations/ui-breadcrumbs/ui-breadcrumbs-item.vue","content":"<script setup lang=\"ts\">\nimport type { PropsPolymorphic } from '@/types';\nimport { breadcrumbsVariants } from './ui-breadcrumbs.variants';\nimport { IconChevronRight } from '@tabler/icons-vue';\nimport { useBreadcrumbsState } from './ui-breadcrumbs.context';\nimport { computed } from 'vue';\n\nexport type BreadcrumbsItemProps = PropsPolymorphic & {\n  value: string;\n};\n\nconst { value, as = 'span' } = defineProps<BreadcrumbsItemProps>();\n\ndefineOptions({\n  inheritAttrs: false,\n});\n\nconst { active, size, currentVariant } = useBreadcrumbsState();\n\nconst isActive = computed(() => active.value === value);\n</script>\n\n<template>\n  <li>\n    <component\n      :is=\"as\"\n      :aria-current=\"isActive ? currentVariant : undefined\"\n      :class=\"breadcrumbsVariants.item({ isActive, size })\"\n      v-bind=\"$attrs\"\n      v-tw-merge\n    >\n      <slot />\n    </component>\n  </li>\n  <li aria-hidden class=\"last:hidden\">\n    <IconChevronRight :class=\"breadcrumbsVariants.icon({ size })\" />\n  </li>\n</template>\n","hash":"59e66e961940e47e26e73e82b99e3eb373de6a015d143345059945fb6878a383"},{"path":"components/navigations/ui-breadcrumbs/ui-breadcrumbs.context.ts","content":"import type { Context } from '@/types';\nimport { toRef } from '@vueuse/core';\nimport { type InjectionKey, type Ref, inject, provide } from 'vue';\nimport type { BreadcrumbsVariants } from './ui-breadcrumbs.variants';\n\ntype BreadcrumbsContext = Context<\n  {\n    size: Readonly<Ref<BreadcrumbsVariants['size']>>;\n    active: Readonly<Ref<string | undefined>>;\n    currentVariant: Readonly<\n      Ref<'page' | 'step' | 'location' | 'date' | 'time' | boolean>\n    >;\n  },\n  {\n    size: BreadcrumbsVariants['size'];\n    active: string | undefined;\n    currentVariant: 'page' | 'step' | 'location' | 'date' | 'time' | boolean;\n  }\n>;\n\nexport type BreadcrumbsState = BreadcrumbsContext['state'];\n\nexport type BreadcrumbsStateOptions = BreadcrumbsContext['options'];\n\nconst breadcrumbsStateKey = Symbol() as InjectionKey<BreadcrumbsState>;\n\nexport function provideBreadcrumbsState(\n  options: BreadcrumbsContext['provideOptions'],\n) {\n  const size = toRef(options.size);\n  const active = toRef(options.active);\n  const currentVariant = toRef(options.currentVariant);\n\n  const state: BreadcrumbsState = {\n    size,\n    active,\n    currentVariant,\n  };\n\n  provide(breadcrumbsStateKey, state);\n\n  return state;\n}\n\nexport function useBreadcrumbsState() {\n  const state = inject(breadcrumbsStateKey);\n\n  if (!state) {\n    throw new Error(\n      'useBreadcrumbsState must be used within a Breadcrumbs component',\n    );\n  }\n\n  return state;\n}\n","hash":"cc0cc0fcc672fe5e67f42dee93bf71952ae324713f3c8ee88d8afa22de1faf1b"},{"path":"components/navigations/ui-breadcrumbs/ui-breadcrumbs.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva(['breadcrumbs group/breadcrumbs', 'flex items-baseline'], {\n  variants: {\n    size: {\n      lg: ['gap-xs'],\n      md: ['gap-2xs'],\n      sm: ['gap-2xs'],\n    },\n  },\n  defaultVariants: {\n    size: 'md',\n  },\n});\n\nconst itemVariants = cva(\n  [\n    'breadcrumbs--item',\n    'text-on-surface',\n    'transition easing-standard duration-medium-1',\n    'select-none',\n  ],\n  {\n    variants: {\n      isActive: {\n        true: ['text-on-surface'],\n        false: [\n          'text-on-surface-variant hover:text-primary focus-visible:text-primary cursor-pointer',\n        ],\n      },\n      size: {\n        lg: ['typography-title-large'],\n        md: ['typography-body-large font-medium'],\n        sm: ['typography-label-large font-semibold'],\n      },\n    },\n    defaultVariants: {\n      isActive: false,\n      size: 'md',\n    },\n  },\n);\n\nconst iconVariants = cva(['breadcrumbs--icon', 'text-on-surface-variant'], {\n  variants: {\n    size: {\n      lg: ['size-6', 'translate-y-[calc(var(--spacing-1)+var(--spacing-0q))]'],\n      md: ['size-5', 'translate-y-[calc(var(--spacing-1)+var(--spacing-0e))]'],\n      sm: ['size-4', 'translate-y-0.75'],\n    },\n  },\n  defaultVariants: {\n    size: 'md',\n  },\n});\n\nexport const breadcrumbsVariants = Object.assign(variants, {\n  item: itemVariants,\n  icon: iconVariants,\n});\n\nexport type BreadcrumbsVariants = Variants<typeof breadcrumbsVariants>;\n\nexport type BreadcrumbsItemVariants = Variants<typeof breadcrumbsVariants.item>;\n\nexport type BreadcrumbsIconVariants = Variants<typeof breadcrumbsVariants.icon>;\n","hash":"23ff0c6312d5cd2fce55686e68befc9323826f174f89af3941288cfadad205f4"},{"path":"components/navigations/ui-breadcrumbs/ui-breadcrumbs.vue","content":"<script setup lang=\"ts\">\nimport type { PropsPolymorphic } from '@/types';\nimport { breadcrumbsVariants } from './ui-breadcrumbs.variants';\nimport {\n  type BreadcrumbsStateOptions,\n  provideBreadcrumbsState,\n} from './ui-breadcrumbs.context';\n\nexport type BreadcrumbsProps = PropsPolymorphic & {\n  size?: BreadcrumbsStateOptions['size'];\n  active?: BreadcrumbsStateOptions['active'];\n  currentVariant?: BreadcrumbsStateOptions['currentVariant'];\n};\n\nconst {\n  size,\n  active,\n  currentVariant = 'page',\n  as = 'ul',\n} = defineProps<BreadcrumbsProps>();\n\nprovideBreadcrumbsState({\n  size: () => size,\n  active: () => active,\n  currentVariant: () => currentVariant,\n});\n</script>\n\n<template>\n  <component :is=\"as\" :class=\"breadcrumbsVariants({ size: size })\" v-tw-merge>\n    <slot />\n  </component>\n</template>\n","hash":"f4939ac7afd2c5f176709b18f7737b672610d71a08bc46ee468a3f8a8b8508bd"},{"path":"components/inputs/index.ts","content":"export * from './ui-field';\nexport * from './ui-mask-field';\nexport * from './ui-number-field';\nexport * from './ui-search-bar';\nexport * from './ui-text-field';\nexport * from './ui-textarea-field';\n\n","hash":"5b1effc6c29b29cb85df9b98868482d9200b7c694a6aed433be838a826488aab"},{"path":"components/inputs/ui-textarea-field/index.ts","content":"export {\n  default as TextAreaField,\n  type TextAreaFieldProps,\n} from './ui-textarea-field.vue';\n","hash":"6f7aeb192c326deb1d5518dba9f96a60b61614304c23fdab6645ee59d2686b99"},{"path":"components/inputs/ui-textarea-field/ui-textarea-field.vue","content":"<script setup lang=\"ts\">\nimport { AnimatePresence } from 'motion-v';\nimport { Field, type FieldProps } from '../ui-field';\nimport { transitionConfig } from '@/config';\nimport { computed, ref, useTemplateRef, watch } from 'vue';\nimport { useFocus } from '@vueuse/core';\nimport type { UnknownRecord } from '@bruhabruh/type-safe';\nimport { MotionComponent } from '@/components/utility';\n\nexport type TextAreaFieldProps = FieldProps & {\n  placeholder?: string;\n  disabled?: boolean;\n};\n\nconst {\n  placeholder,\n  disabled,\n  size,\n  alwaysShowLabel,\n  invalid,\n  leadingKey,\n  trailingKey,\n  as,\n} = defineProps<TextAreaFieldProps>();\n\ndefineOptions({\n  inheritAttrs: false,\n});\n\nconst elementRef = useTemplateRef<HTMLElement | null>('input');\n\nconst value = defineModel<string>('value', { default: '' });\n\nconst height = ref('auto');\n\nconst { focused } = useFocus(elementRef);\n\nconst isExpanded = computed(() => {\n  if (placeholder) return true;\n  if (focused.value) return true;\n  return value.value.length > 0;\n});\n\nwatch(value, () => {\n  const target = elementRef.value;\n  if (!target) return;\n  const currentHeight = target.style.height;\n  target.style.height = 'auto';\n  height.value = `${target.scrollHeight}px`;\n  target.style.height = currentHeight;\n});\n\nfunction attrsWithoutClass(attrs: UnknownRecord) {\n  const newAttrs = { ...attrs };\n  if ('class' in newAttrs) delete newAttrs.class;\n  return newAttrs;\n}\n</script>\n\n<template>\n  <Field\n    :as\n    :size\n    :always-show-label\n    :invalid\n    :leading-key\n    :trailing-key\n    :aria-disabled=\"disabled\"\n    :class=\"$attrs.class\"\n  >\n    <template #before=\"props\" v-if=\"$slots.before\">\n      <slot name=\"before\" v-bind=\"props\" />\n    </template>\n    <template #leading=\"props\" v-if=\"$slots.leading\">\n      <slot name=\"leading\" v-bind=\"props\" />\n    </template>\n    <template #trailing=\"props\" v-if=\"$slots.trailing\">\n      <slot name=\"trailing\" v-bind=\"props\" />\n    </template>\n    <template #label=\"props\" v-if=\"$slots.label\">\n      <label v-bind=\"props\" v-tw-merge>\n        <slot name=\"label\" />\n      </label>\n    </template>\n    <template #default=\"{ class: className, ...props }\">\n      <AnimatePresence mode=\"wait\">\n        <MotionComponent\n          as-child\n          :animate=\"\n            isExpanded ? { opacity: 1, height } : { opacity: 0, height: 0 }\n          \"\n          :transition=\"transitionConfig.preset.short.beginEnd.asMotion()\"\n        >\n          <textarea\n            ref=\"input\"\n            type=\"text\"\n            :placeholder\n            rows=\"1\"\n            v-model=\"value\"\n            v-bind=\"{ ...attrsWithoutClass($attrs), ...props }\"\n            :class=\"[className, 'resize-none overflow-y-scroll']\"\n            v-tw-merge\n          />\n        </MotionComponent>\n      </AnimatePresence>\n    </template>\n    <template #description=\"props\" v-if=\"$slots.description\">\n      <p v-bind=\"props\" v-tw-merge>\n        <slot name=\"description\" />\n      </p>\n    </template>\n    <template #error=\"props\" v-if=\"$slots.error\">\n      <p v-bind=\"props\" v-tw-merge>\n        <slot name=\"error\" />\n      </p>\n    </template>\n    <template #after=\"props\" v-if=\"$slots.after\">\n      <slot name=\"after\" v-bind=\"props\" />\n    </template>\n  </Field>\n</template>\n","hash":"13399056bc5ee1b8ef517f44f1129b7b3c33639a74c2a77c335d1fbf9c37147b"},{"path":"components/inputs/ui-text-field/index.ts","content":"export { default as TextField, type TextFieldProps } from './ui-text-field.vue';\n","hash":"0b8850afc5bf7147b1774133db5157ecf469ece67378f21feeffe7d1ad168d43"},{"path":"components/inputs/ui-text-field/ui-text-field.vue","content":"<script setup lang=\"ts\">\nimport { Field, type FieldProps } from '../ui-field';\nimport { computed, useTemplateRef } from 'vue';\nimport { useFocus } from '@vueuse/core';\nimport type { UnknownRecord } from '@bruhabruh/type-safe';\nimport { MotionComponent } from '@/components/utility';\nimport { AnimatePresence } from 'motion-v';\nimport { transitionConfig } from '@/config';\n\nexport type TextFieldProps = FieldProps & {\n  placeholder?: string;\n  disabled?: boolean;\n};\n\nconst {\n  placeholder,\n  disabled,\n  size,\n  alwaysShowLabel,\n  invalid,\n  leadingKey,\n  trailingKey,\n  as,\n} = defineProps<TextFieldProps>();\n\ndefineOptions({\n  inheritAttrs: false,\n});\n\nconst elementRef = useTemplateRef<HTMLInputElement | null>('input');\n\nconst value = defineModel<string>('value', { default: '' });\n\nconst { focused } = useFocus(elementRef);\n\nconst isExpanded = computed(() => {\n  if (placeholder) return true;\n  if (focused.value) return true;\n  return value.value.length > 0;\n});\n\nfunction attrsWithoutClass(attrs: UnknownRecord) {\n  const newAttrs = { ...attrs };\n  if ('class' in newAttrs) delete newAttrs.class;\n  return newAttrs;\n}\n</script>\n\n<template>\n  <Field\n    :as\n    :size\n    :always-show-label\n    :invalid\n    :leading-key\n    :trailing-key\n    :aria-disabled=\"disabled\"\n    :class=\"$attrs.class\"\n  >\n    <template #before=\"props\" v-if=\"$slots.before\">\n      <slot name=\"before\" v-bind=\"props\" />\n    </template>\n    <template #leading=\"props\" v-if=\"$slots.leading\">\n      <slot name=\"leading\" v-bind=\"props\" />\n    </template>\n    <template #trailing=\"props\" v-if=\"$slots.trailing\">\n      <slot name=\"trailing\" v-bind=\"props\" />\n    </template>\n    <template #label=\"props\" v-if=\"$slots.label\">\n      <label v-bind=\"props\" v-tw-merge>\n        <slot name=\"label\" />\n      </label>\n    </template>\n    <template #default=\"props\">\n      <AnimatePresence mode=\"wait\">\n        <MotionComponent\n          as-child\n          :variants=\"{\n            hidden: { opacity: 0, height: 0 },\n            expanded: { opacity: 1, height: 'auto' },\n          }\"\n          :animate=\"isExpanded ? 'expanded' : 'hidden'\"\n          :transition=\"transitionConfig.preset.short.beginEnd.asMotion()\"\n        >\n          <input\n            ref=\"input\"\n            type=\"text\"\n            :placeholder\n            v-model=\"value\"\n            v-bind=\"{ ...attrsWithoutClass($attrs), ...props }\"\n            v-tw-merge\n          />\n        </MotionComponent>\n      </AnimatePresence>\n    </template>\n    <template #description=\"props\" v-if=\"$slots.description\">\n      <p v-bind=\"props\" v-tw-merge>\n        <slot name=\"description\" />\n      </p>\n    </template>\n    <template #error=\"props\" v-if=\"$slots.error\">\n      <p v-bind=\"props\" v-tw-merge>\n        <slot name=\"error\" />\n      </p>\n    </template>\n    <template #after=\"props\" v-if=\"$slots.after\">\n      <slot name=\"after\" v-bind=\"props\" />\n    </template>\n  </Field>\n</template>\n","hash":"2f819008c566655e10ad2940e84cec4b6a41b8d306f3e3f17e1908d2282d1c41"},{"path":"components/inputs/ui-search-bar/index.ts","content":"export * from './ui-search-bar.variants';\nexport { default as SearchBar, type SearchBarProps } from './ui-search-bar.vue';\n\n","hash":"b73ec0f79a056cdb5c674d5352063e17c3a1cd1c3cbf4c65c1f396ed7c4574b0"},{"path":"components/inputs/ui-search-bar/ui-search-bar.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva([\n  'search-bar group/search-bar',\n  'bg-surface-container-high text-on-surface',\n  'h-14 rounded-full px-4',\n  'elevation-3',\n  [\n    'inline-flex items-center justify-between',\n    'relative',\n    'cursor-text',\n    'transition-box duration-medium-1 easing-standard',\n    ['ripple-wrapper:inset-0 ripple:bg-current'],\n    [\n      'state-primary',\n      'is-hovered:state-hover',\n      'in-focus-within:state-focus',\n      'is-pressed:state-press',\n    ],\n  ],\n  'border-2 border-transparent outline-none',\n]);\n\nconst inputVariants = cva([\n  'searchg-bar--input',\n  'flex-1',\n  'typography-body-large placeholder:text-on-surface-variant',\n  'transition easing-standard duration-medium-1',\n  'outline-0! overflow-hidden',\n  'appearance-none [-moz-appearance:textfield] min-w-[0px] w-auto',\n]);\n\nconst iconVariants = cva(['search-bar--icon', 'size-6'], {\n  variants: {\n    position: {\n      leading: [\n        'mr-4',\n        [\n          'inline-flex items-center justify-center',\n          'relative',\n          'cursor-pointer',\n          'overflow-hidden',\n          'transition-box duration-medium-1 easing-standard',\n          ['outline-offset-[3px]', 'focus-visible:outline-[3px]'],\n        ],\n        [\n          '[&>*]:absolute [&>*]:inset-0 [&>*]:w-full [&>*]:h-full',\n          '[&>*]:transition-box [&>*]:duration-medium-1 [&>*]:easing-standard'\n        ],\n      ],\n      trailing: 'ml-4 text-on-surface-variant',\n    },\n  },\n});\n\nconst avatarVariants = cva([\n  'search-bar--avatar',\n  'size-7h',\n  'rounded-full',\n  'ml-4',\n]);\n\nexport const searchBarVariants = Object.assign(variants, {\n  input: inputVariants,\n  icon: iconVariants,\n  avatar: avatarVariants,\n});\n\nexport type SearchBarVariants = Variants<typeof searchBarVariants>;\n\nexport type SearchBarInputVariants = Variants<typeof searchBarVariants.input>;\n\nexport type SearchBarIconVariants = Variants<typeof searchBarVariants.icon>;\n\nexport type SearchBarAvatarVariants = Variants<typeof searchBarVariants.avatar>;\n","hash":"f4aa12c1bc6fb2180f331a02696515d3e72b648a458d9b015cfcb75650c0cfb2"},{"path":"components/inputs/ui-search-bar/ui-search-bar.vue","content":"<script setup lang=\"ts\">\nimport type { UnknownRecord } from '@bruhabruh/type-safe';\nimport { searchBarVariants } from './ui-search-bar.variants';\nimport {\n  MotionComponent,\n  type MotionComponentProps,\n} from '@/components/utility';\nimport { AnimatePresence } from 'motion-v';\nimport { useTemplateRef } from 'vue';\nimport { computedVariants, useInteractions } from '@/composables';\nimport { transitionConfig } from '@/config';\n\nexport type SearchBarProps = Omit<MotionComponentProps, 'asChild'> & {\n  leadingKey?: string;\n  trailingKey?: string;\n  trailingSecondKey?: string;\n  trailingAvatarKey?: string;\n};\n\nconst {\n  as = 'div',\n  leadingKey,\n  trailingKey,\n  trailingSecondKey,\n  trailingAvatarKey,\n  initial,\n  animate,\n  exit,\n  ...motionProps\n} = defineProps<SearchBarProps>();\n\ndefineOptions({\n  inheritAttrs: false,\n});\n\nconst value = defineModel<string>('value', {\n  default: '',\n});\n\nconst elementRef = useTemplateRef<HTMLInputElement | null>('field');\nconst inputElementRef = useTemplateRef<HTMLInputElement | null>('input');\n\nuseInteractions(elementRef);\n\nfunction attrsWithoutClass(attrs: UnknownRecord) {\n  const newAttrs = { ...attrs };\n  if ('class' in newAttrs) delete newAttrs.class;\n  return newAttrs;\n}\n\nconst {\n  initial: initialObject,\n  animate: animateObject,\n  exit: exitObject,\n} = computedVariants(() => ({\n  initial,\n  animate,\n  exit,\n}));\n</script>\n\n<template>\n  <MotionComponent\n    ref=\"field\"\n    :as\n    v-bind=\"motionProps\"\n    :initial=\"{\n      transition: transitionConfig.preset.short.enter.asMotion(),\n      ...initialObject,\n    }\"\n    :animate=\"{\n      transition: transitionConfig.preset.short.beginEnd.asMotion(),\n      ...animateObject,\n    }\"\n    :exit=\"{\n      transition: transitionConfig.preset.short.exit.asMotion(),\n      ...exitObject,\n    }\"\n    :class=\"[searchBarVariants(), $attrs.class]\"\n    @click=\"inputElementRef?.focus()\"\n  >\n    <AnimatePresence mode=\"wait\">\n      <MotionComponent\n        as-child\n        v-if=\"$slots.leading\"\n        :key=\"leadingKey\"\n        :initial=\"{\n          width: 0,\n          height: 0,\n          marginRight: 0,\n          transition: transitionConfig.preset.short.enter.asMotion(),\n        }\"\n        :animate=\"{\n          width: 'var(--spacing-6)',\n          height: 'var(--spacing-6)',\n          marginRight: 'var(--spacing-4)',\n          transition: transitionConfig.preset.short.beginEnd.asMotion(),\n        }\"\n        :exit=\"{\n          width: 0,\n          height: 0,\n          marginRight: 0,\n          transition: transitionConfig.preset.short.exit.asMotion(),\n        }\"\n        :class=\"searchBarVariants.icon({ position: 'leading' })\"\n        @click.stop\n      >\n        <slot name=\"leading\" />\n      </MotionComponent>\n    </AnimatePresence>\n    <input\n      ref=\"input\"\n      type=\"search\"\n      v-model=\"value\"\n      v-bind=\"attrsWithoutClass($attrs)\"\n      :class=\"searchBarVariants.input()\"\n    />\n    <AnimatePresence mode=\"wait\">\n      <MotionComponent\n        as-child\n        v-if=\"$slots.trailing\"\n        :key=\"trailingKey\"\n        :initial=\"{\n          width: 0,\n          height: 0,\n          marginLeft: 0,\n          transition: transitionConfig.preset.short.enter.asMotion(),\n        }\"\n        :animate=\"{\n          width: 'var(--spacing-6)',\n          height: 'var(--spacing-6)',\n          marginLeft: 'var(--spacing-4)',\n          transition: transitionConfig.preset.short.beginEnd.asMotion(),\n        }\"\n        :exit=\"{\n          width: 0,\n          height: 0,\n          marginLeft: 0,\n          transition: transitionConfig.preset.short.exit.asMotion(),\n        }\"\n        :class=\"searchBarVariants.icon({ position: 'trailing' })\"\n      >\n        <slot name=\"trailing\" />\n      </MotionComponent>\n    </AnimatePresence>\n    <AnimatePresence mode=\"wait\">\n      <MotionComponent\n        as-child\n        v-if=\"$slots['trailing-second'] && !$slots['trailing-avatar']\"\n        :key=\"`icon-${trailingSecondKey}`\"\n        :initial=\"{\n          width: 0,\n          height: 0,\n          marginLeft: 0,\n          transition: transitionConfig.preset.short.enter.asMotion(),\n        }\"\n        :animate=\"{\n          width: 'var(--spacing-6)',\n          height: 'var(--spacing-6)',\n          marginLeft: 'var(--spacing-4)',\n          transition: transitionConfig.preset.short.beginEnd.asMotion(),\n        }\"\n        :exit=\"{\n          width: 0,\n          height: 0,\n          marginLeft: 0,\n          transition: transitionConfig.preset.short.exit.asMotion(),\n        }\"\n        :class=\"searchBarVariants.icon({ position: 'trailing' })\"\n      >\n        <slot name=\"trailing-second\" />\n      </MotionComponent>\n      <MotionComponent\n        as-child\n        v-if=\"$slots['trailing-avatar']\"\n        :key=\"`avatar-${trailingAvatarKey}`\"\n        :initial=\"{\n          width: 0,\n          height: 0,\n          marginLeft: 0,\n          transition: transitionConfig.preset.short.enter.asMotion(),\n        }\"\n        :animate=\"{\n          width: 'var(--spacing-7h)',\n          height: 'var(--spacing-7h)',\n          marginLeft: 'var(--spacing-4)',\n          transition: transitionConfig.preset.short.beginEnd.asMotion(),\n        }\"\n        :exit=\"{\n          width: 0,\n          height: 0,\n          marginLeft: 0,\n          transition: transitionConfig.preset.short.exit.asMotion(),\n        }\"\n        :class=\"searchBarVariants.avatar()\"\n      >\n        <slot name=\"trailing-avatar\" />\n      </MotionComponent>\n    </AnimatePresence>\n  </MotionComponent>\n</template>\n","hash":"24b043c7cd98c3bd9190c18d928d3081a7eec78a5bc99d5712a69e8c163e213d"},{"path":"components/inputs/ui-number-field/index.ts","content":"export * from './ui-number-field.variants';\nexport {\n  default as NumberField,\n  type NumberFieldProps\n} from './ui-number-field.vue';\n\n","hash":"87c1c8055a0dcdef87dfb12e1b9228f90c9397fec364f667d756fdbbf23fbd2e"},{"path":"components/inputs/ui-number-field/ui-number-field.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva(['number-field group/number-field']);\n\nconst spinButtonVariants = cva(\n  [\n    'number-field--spin-button',\n    'inline-flex items-center justify-center',\n    'transition easing-standard duration-medium-1',\n    'cursor-pointer',\n    'state-on-surface-variant',\n    'hover:state-hover',\n    'active:state-press',\n    'group-is-disabled/number-field:state-transparent',\n  ],\n  {\n    variants: {\n      size: {\n        sm: ['w-4.5 rounded-xs', '[&>*]:size-3'],\n        md: ['w-5 rounded-xs', '[&>*]:size-3.5'],\n        lg: ['w-6 rounded-xs', '[&>*]:size-4'],\n      },\n    },\n    defaultVariants: {\n      size: 'lg',\n    },\n  },\n);\n\nexport const numberFieldVariants = Object.assign(variants, {\n  spinButton: spinButtonVariants,\n});\n\nexport type NumberFieldVariants = Variants<typeof numberFieldVariants>;\n\nexport type NumberFieldSpinButtonVariants = Variants<\n  typeof numberFieldVariants.spinButton\n>;\n","hash":"9665fb4304c1a9168384cfacd798aefb4c366c6f6bb24222f6b4a53c8602a674"},{"path":"components/inputs/ui-number-field/ui-number-field.vue","content":"<script setup lang=\"ts\">\nimport { Field, type FieldProps } from '../ui-field';\nimport type { UnknownRecord } from '@bruhabruh/type-safe';\nimport { IconCaretDownFilled, IconCaretUpFilled } from '@tabler/icons-vue';\nimport { numberFieldVariants } from './ui-number-field.variants';\n\nexport type NumberFieldProps = FieldProps & {\n  min?: number;\n  max?: number;\n  step?: number;\n  stepMultiplier?: number;\n  placeholder?: string;\n  disabled?: boolean;\n};\n\nconst {\n  min,\n  max,\n  step = 1,\n  stepMultiplier = 10,\n  placeholder,\n  disabled,\n  size = 'lg',\n  alwaysShowLabel,\n  invalid,\n  leadingKey,\n  trailingKey,\n  as,\n} = defineProps<NumberFieldProps>();\n\ndefineOptions({\n  inheritAttrs: false,\n});\n\nconst value = defineModel<number>('value', { default: 0 });\n\nfunction onKeyDown(e: KeyboardEvent) {\n  const isControlKey = [\n    'Home',\n    'End',\n    'PageUp',\n    'PageDown',\n    'ArrowUp',\n    'ArrowDown',\n  ].includes(e.key);\n  if (!isControlKey) return;\n  e.preventDefault();\n\n  if (e.key === 'Home') {\n    if (min === undefined) return;\n    value.value = min;\n  } else if (e.key === 'End') {\n    if (max === undefined) return;\n    value.value = max;\n  } else if (e.key === 'PageUp') {\n    value.value = value.value + step * stepMultiplier;\n  } else if (e.key === 'PageDown') {\n    value.value = value.value - step * stepMultiplier;\n  } else if (e.key === 'ArrowUp') {\n    value.value = value.value + step;\n  } else if (e.key === 'ArrowDown') {\n    value.value = value.value - step;\n  }\n}\n\nfunction onBlur(e: FocusEvent) {\n  if (!e.target) return;\n  if (min !== undefined && value.value < min) {\n    value.value = min;\n  }\n  if (max !== undefined && value.value > max) {\n    value.value = max;\n  }\n  (e.target as HTMLInputElement).value = value.value.toString();\n}\n\nfunction attrsWithoutClass(attrs: UnknownRecord) {\n  const newAttrs = { ...attrs };\n  if ('class' in newAttrs) delete newAttrs.class;\n  return newAttrs;\n}\n</script>\n\n<template>\n  <Field\n    :as\n    :size\n    :always-show-label\n    :invalid\n    :leading-key\n    :trailing-key\n    :aria-disabled=\"disabled\"\n    :class=\"[numberFieldVariants(), $attrs.class]\"\n  >\n    <template #before=\"props\" v-if=\"$slots.before\">\n      <slot name=\"before\" v-bind=\"props\" />\n    </template>\n    <template #leading=\"props\" v-if=\"$slots.leading\">\n      <slot name=\"leading\" v-bind=\"props\" />\n    </template>\n    <template #trailing=\"props\">\n      <span\n        v-bind=\"props\"\n        class=\"inline-flex flex-col items-center justify-center\"\n        v-tw-merge\n      >\n        <button\n          tabindex=\"-1\"\n          aria-label=\"next\"\n          :class=\"numberFieldVariants.spinButton({ size })\"\n          :disabled\n          @click=\"value = value + step\"\n        >\n          <IconCaretUpFilled class=\"size-4\" />\n        </button>\n        <button\n          tabindex=\"-1\"\n          aria-label=\"previous\"\n          :class=\"numberFieldVariants.spinButton({ size })\"\n          :disabled\n          @click=\"value = value - step\"\n        >\n          <IconCaretDownFilled />\n        </button>\n      </span>\n    </template>\n    <template #label=\"props\" v-if=\"$slots.label\">\n      <label v-bind=\"props\" v-tw-merge>\n        <slot name=\"label\" />\n      </label>\n    </template>\n    <template #default=\"props\">\n      <input\n        type=\"text\"\n        inputmode=\"decimal\"\n        :step\n        :min\n        :max\n        :placeholder\n        v-model.number=\"value\"\n        v-bind=\"{ ...attrsWithoutClass($attrs), ...props }\"\n        v-tw-merge\n        @keydown=\"onKeyDown\"\n        @blur=\"onBlur\"\n      />\n    </template>\n    <template #description=\"props\" v-if=\"$slots.description\">\n      <p v-bind=\"props\" v-tw-merge>\n        <slot name=\"description\" />\n      </p>\n    </template>\n    <template #error=\"props\" v-if=\"$slots.error\">\n      <p v-bind=\"props\" v-tw-merge>\n        <slot name=\"error\" />\n      </p>\n    </template>\n    <template #after=\"props\" v-if=\"$slots.after\">\n      <slot name=\"after\" v-bind=\"props\" />\n    </template>\n  </Field>\n</template>\n","hash":"641bdabb310dfbacded83c8eec754d84cda49047b6f9060ab5a0572b0e49d57c"},{"path":"components/inputs/ui-mask-field/index.ts","content":"export { default as MaskField, type MaskFieldProps } from './ui-mask-field.vue';\n","hash":"4f36a3c2abea61f731f603f830d7c69e041d90820d3ec623d1078335d5c914c7"},{"path":"components/inputs/ui-mask-field/ui-mask-field.vue","content":"<script setup lang=\"ts\">\nimport { AnimatePresence } from 'motion-v';\nimport { Field, type FieldProps } from '../ui-field';\nimport { computed, nextTick, ref, useTemplateRef, watchEffect } from 'vue';\nimport { useFocus } from '@vueuse/core';\nimport type { UnknownRecord } from '@bruhabruh/type-safe';\nimport { MotionComponent } from '@/components/utility';\nimport { transitionConfig } from '@/config';\n\nexport type MaskFieldProps = FieldProps & {\n  mask: string;\n  maskAliases?: string[];\n  placeholder?: string;\n  disabled?: boolean;\n};\n\nconst {\n  mask,\n  maskAliases = [],\n  placeholder,\n  disabled,\n  size,\n  alwaysShowLabel,\n  invalid,\n  leadingKey,\n  trailingKey,\n  as,\n} = defineProps<MaskFieldProps>();\n\ndefineOptions({\n  inheritAttrs: false,\n});\n\nconst elementRef = useTemplateRef<HTMLInputElement | null>('input');\nconst element = computed<HTMLInputElement | null>(() => {\n  if (elementRef.value && '$el' in elementRef.value) {\n    return elementRef.value.$el as HTMLInputElement | null;\n  }\n  return elementRef.value;\n});\n\nconst value = defineModel<string>('value', { default: '' });\nconst formattedValue = ref('');\n\nconst { focused } = useFocus(elementRef);\n\nconst isExpanded = computed(() => {\n  if (placeholder) return true;\n  if (focused.value) return true;\n  return value.value.length > 0;\n});\n\nwatchEffect(() => {\n  if (formattedValue.value === '') {\n    return;\n  }\n  const val = formatToPlain(formattedValue.value);\n  const newValue = format(val);\n  value.value = formatToPlain(newValue);\n  formattedValue.value = newValue;\n  nextTick(() => {\n    setCursor(newValue);\n  });\n});\n\nfunction format(val: string) {\n  const numbers = val.replace(/[^0-9]/g, '').split('');\n  return mask\n    .split('')\n    .map((v, i) => {\n      if (v === '_') {\n        return numbers.shift() || '_';\n      }\n      const isSimilarInMask = [mask, ...maskAliases].some((p) => {\n        const maskChar = p[i];\n        if (!maskChar) return false;\n        if (!/\\d/.test(maskChar)) return false;\n        return maskChar === numbers[0];\n      });\n      if (/\\d/.test(v) && isSimilarInMask) {\n        numbers.shift();\n      }\n      return v;\n    })\n    .join('');\n}\n\nfunction formatToPlain(val: string) {\n  return val.replace(/[^+0-9]/g, '').replace(/(\\+.*)\\+/g, '$1');\n}\n\nfunction setCursor(val: string) {\n  if (!element.value) return;\n  const index = val.indexOf('_');\n  if (index === -1) return;\n  element.value.selectionStart = index;\n  element.value.selectionEnd = index;\n}\n\nfunction onKeyDown(e: KeyboardEvent) {\n  if (e.key !== 'Backspace') return;\n  if (\n    value.value.length ===\n      mask.slice(0, mask.indexOf('_')).replace(/[^+\\d_]/g, '').length ||\n    value.value.length === 0\n  ) {\n    value.value = '';\n    formattedValue.value = '';\n    return;\n  }\n  e.preventDefault();\n  const input = e.target as HTMLInputElement;\n  let val = formatToPlain(input.value);\n  if (\n    input.selectionStart !== null &&\n    input.selectionEnd !== null &&\n    input.selectionStart !== input.selectionEnd\n  ) {\n    val = formatToPlain(\n      input.value.slice(0, input.selectionStart) +\n        input.value.slice(input.selectionEnd),\n    );\n  } else {\n    val = val.slice(0, val.length - 1);\n  }\n  const newValue = format(val);\n  value.value = formatToPlain(newValue);\n  formattedValue.value = newValue;\n  input.value = newValue;\n  setCursor(newValue);\n}\n\nfunction attrsWithoutClass(attrs: UnknownRecord) {\n  const newAttrs = { ...attrs };\n  if ('class' in newAttrs) delete newAttrs.class;\n  return newAttrs;\n}\n</script>\n\n<template>\n  <Field\n    :as\n    :size\n    :always-show-label\n    :invalid\n    :leading-key\n    :trailing-key\n    :aria-disabled=\"disabled\"\n    :class=\"$attrs.class\"\n  >\n    <template #before=\"props\" v-if=\"$slots.before\">\n      <slot name=\"before\" v-bind=\"props\" />\n    </template>\n    <template #leading=\"props\" v-if=\"$slots.leading\">\n      <slot name=\"leading\" v-bind=\"props\" />\n    </template>\n    <template #trailing=\"props\" v-if=\"$slots.trailing\">\n      <slot name=\"trailing\" v-bind=\"props\" />\n    </template>\n    <template #label=\"props\" v-if=\"$slots.label\">\n      <label v-bind=\"props\" v-tw-merge>\n        <slot name=\"label\" />\n      </label>\n    </template>\n    <template #default=\"props\">\n      <AnimatePresence mode=\"wait\">\n        <MotionComponent\n          as-child\n          :variants=\"{\n            hidden: { opacity: 0, height: 0 },\n            expanded: { opacity: 1, height: 'auto' },\n          }\"\n          :animate=\"isExpanded ? 'expanded' : 'hidden'\"\n          :transition=\"transitionConfig.preset.short.beginEnd.asMotion()\"\n        >\n          <input\n            ref=\"input\"\n            type=\"text\"\n            inputmode=\"decimal\"\n            :placeholder\n            v-model=\"formattedValue\"\n            v-bind=\"{ ...attrsWithoutClass($attrs), ...props }\"\n            v-tw-merge\n            @keydown=\"onKeyDown\"\n          />\n        </MotionComponent>\n      </AnimatePresence>\n    </template>\n    <template #description=\"props\" v-if=\"$slots.description\">\n      <p v-bind=\"props\" v-tw-merge>\n        <slot name=\"description\" />\n      </p>\n    </template>\n    <template #error=\"props\" v-if=\"$slots.error\">\n      <p v-bind=\"props\" v-tw-merge>\n        <slot name=\"error\" />\n      </p>\n    </template>\n    <template #after=\"props\" v-if=\"$slots.after\">\n      <slot name=\"after\" v-bind=\"props\" />\n    </template>\n  </Field>\n</template>\n","hash":"a82a732a5d070960452967fdd477c114218e55106a705020ca87292fb318492a"},{"path":"components/inputs/ui-field/index.ts","content":"export * from './ui-field.variants';\nexport { default as Field, type FieldProps } from './ui-field.vue';\n","hash":"9add9aca8cf8853e0376ce68e0f23f61eb1e41fb9b57239ba762cf0518951c50"},{"path":"components/inputs/ui-field/ui-field.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva(['field group/field', 'inline-grid gap-2xs']);\n\nconst inputVariants = cva(\n  [\n    'field--input',\n    'relative',\n    'w-full',\n    'inline-flex items-center justify-between',\n    'transition easing-standard duration-medium-1',\n    'border-2 border-transparent outline-none',\n    'overflow-hidden',\n    'bg-surface-container-high group-is-disabled/field:bg-on-surface/8',\n    'whitespace-nowrap text-on-surface',\n    'state-primary',\n    'group-is-disabled/field:state-transparent',\n    'group-is-disabled/field:pointer-events-none',\n    'group-is-hovered/field:state-hover',\n    'group-in-focus-within/field:border-primary',\n    'group-[[data-invalid=\"true\"]]/field:state-critical',\n    'group-[[data-invalid=\"true\"]]/field:border-critical',\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'min-h-10 rounded-md px-xs',\n        md: 'min-h-12 rounded-lg px-sm',\n        lg: 'min-h-14 rounded-lg px-md',\n      },\n    },\n    defaultVariants: {\n      size: 'lg',\n    },\n  },\n);\n\nconst inputContentVariants = cva([\n  'field--input-content',\n  'relative',\n  'flex-1 inline-flex flex-col justify-center',\n  'transition easing-standard duration-medium-1',\n  'overflow-hidden',\n  'whitespace-nowrap typography-body-large',\n]);\n\nconst inputFieldVariants = cva([\n  'field--input-field',\n  'typography-body-large',\n  'text-on-surface group-is-disabled/field:text-on-surface/38',\n  'placeholder:text-outline group-is-disabled/field:placeholder:text-on-surface/38',\n  'transition easing-standard duration-medium-1',\n  'outline-0! overflow-hidden',\n  'appearance-none [-moz-appearance:textfield] min-w-[0px] w-auto',\n]);\n\nconst labelVariants = cva([\n  'field--label',\n  'transition easing-standard duration-medium-1',\n  'select-none',\n  'typography-label-medium truncate',\n  'text-on-surface-variant',\n  'group-[[data-invalid=\"true\"]]/field:text-critical',\n  'group-is-disabled/field:text-on-surface/38',\n  'group-[[data-invalid=\"true\"]]/field:group-is-disabled/field:text-on-surface/38',\n]);\n\nconst descriptionVariants = cva(\n  [\n    'field--description',\n    'typography-body-small text-on-surface-variant',\n    'transition easing-standard duration-medium-1',\n    'inline-flex items-center justify-between',\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'px-xs gap-xs',\n        md: 'px-sm gap-sm',\n        lg: 'px-md gap-md',\n      },\n    },\n    defaultVariants: {\n      size: 'lg',\n    },\n  },\n);\n\nconst errorVariants = cva(\n  [\n    'field--error',\n    'typography-body-small text-critical',\n    'transition easing-standard duration-medium-1',\n    'inline-flex items-center justify-between',\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'px-xs gap-xs',\n        md: 'px-sm gap-sm',\n        lg: 'px-md gap-md',\n      },\n    },\n    defaultVariants: {\n      size: 'lg',\n    },\n  },\n);\n\nconst iconVariants = cva(\n  [\n    'field--icon',\n    'text-on-surface-variant group-is-disabled/field:text-on-surface/38',\n  ],\n  {\n    variants: {\n      size: {\n        sm: 'size-4.5',\n        md: 'size-4',\n        lg: 'size-6',\n      },\n    },\n    defaultVariants: {\n      size: 'lg',\n    },\n  },\n);\n\nexport const fieldVariants = Object.assign(variants, {\n  input: inputVariants,\n  inputContent: inputContentVariants,\n  inputField: inputFieldVariants,\n  label: labelVariants,\n  description: descriptionVariants,\n  error: errorVariants,\n  icon: iconVariants,\n});\n\nexport type FieldVariants = Variants<typeof fieldVariants>;\n\nexport type FieldInputVariants = Variants<typeof fieldVariants.input>;\n\nexport type FieldInputContentVariants = Variants<\n  typeof fieldVariants.inputContent\n>;\n\nexport type FieldInputFieldVariants = Variants<typeof fieldVariants.inputField>;\n\nexport type FieldLabelVariants = Variants<typeof fieldVariants.label>;\n\nexport type FieldDescriptionVariants = Variants<\n  typeof fieldVariants.description\n>;\n\nexport type FieldErrorVariants = Variants<typeof fieldVariants.error>;\n\nexport type FieldIconVariants = Variants<typeof fieldVariants.icon>;\n","hash":"50a8404cbc2a0e2746a17bb67213c733f31d817fee95b081b038d686f057ad81"},{"path":"components/inputs/ui-field/ui-field.vue","content":"<script setup lang=\"ts\">\nimport { useInteractions } from '@/composables';\nimport type { PropsPolymorphic } from '@/types';\nimport { computed, useId, useTemplateRef } from 'vue';\nimport { type FieldInputVariants, fieldVariants } from './ui-field.variants';\nimport { AnimatePresence } from 'motion-v';\nimport { MotionComponent } from '@/components/utility';\nimport { transitionConfig } from '@/config';\n\nexport type FieldProps = PropsPolymorphic & {\n  size?: FieldInputVariants['size'];\n  alwaysShowLabel?: boolean;\n  invalid?: boolean;\n  leadingKey?: string;\n  trailingKey?: string;\n};\n\nconst {\n  size = 'lg',\n  alwaysShowLabel = false,\n  invalid = false,\n  leadingKey,\n  trailingKey,\n  as = 'div',\n} = defineProps<FieldProps>();\n\ndefineOptions({\n  inheritAttrs: false,\n});\n\nconst elementRef = useTemplateRef<HTMLElement | null>('field');\n\nconst labelId = useId();\nconst inputId = useId();\nconst descriptionId = useId();\nconst errorId = useId();\n\nfunction focusInput() {\n  const input = elementRef.value?.querySelector(\n    `#${inputId}`,\n  ) as HTMLElement | null;\n  input?.focus();\n}\n\nconst iconSize = computed(() => {\n  if (size === 'sm') return 'var(--spacing-4h)';\n  if (size === 'md') return 'var(--spacing-5)';\n  return 'var(--spacing-6)';\n});\n\nconst iconMargin = computed(() => {\n  if (size === 'sm') return 'var(--spacing-2xs)';\n  if (size === 'md') return 'var(--spacing-xs)';\n  return 'var(--spacing-sm)';\n});\n\nconst { isDisabled } = useInteractions(elementRef, {\n  focusVisible: false,\n  press: false,\n});\n</script>\n\n<template>\n  <slot name=\"before\" :inputId :labelId />\n  <component\n    :is=\"as\"\n    ref=\"field\"\n    :class=\"fieldVariants()\"\n    :data-invalid=\"Boolean($slots.error) || invalid ? true : undefined\"\n    v-bind=\"$attrs\"\n    v-tw-merge\n    @click=\"focusInput()\"\n  >\n    <div :class=\"fieldVariants.input({ size })\" v-tw-merge>\n      <AnimatePresence mode=\"wait\">\n        <MotionComponent\n          as-child\n          v-if=\"$slots.leading\"\n          :key=\"leadingKey\"\n          :initial=\"{\n            width: 0,\n            height: 0,\n            opacity: 0,\n            marginRight: 0,\n            transition: transitionConfig.preset.short.enter.asMotion(),\n          }\"\n          :animate=\"{\n            width: iconSize,\n            height: iconSize,\n            opacity: 1,\n            marginRight: iconMargin,\n            transition: transitionConfig.preset.short.beginEnd.asMotion(),\n          }\"\n          :exit=\"{\n            width: 0,\n            height: 0,\n            opacity: 0,\n            marginRight: 0,\n            transition: transitionConfig.preset.short.exit.asMotion(),\n          }\"\n          :class=\"[\n            fieldVariants.icon({ size }),\n            'field--leading-icon',\n            {\n              sm: 'mr-2xs',\n              md: 'mr-xs',\n              lg: 'mr-2xs',\n            }[size ?? 'lg'],\n          ]\"\n        >\n          <slot name=\"leading\" />\n        </MotionComponent>\n      </AnimatePresence>\n      <div :class=\"fieldVariants.inputContent()\">\n        <slot\n          v-if=\"size !== 'sm' || alwaysShowLabel\"\n          name=\"label\"\n          :id=\"labelId\"\n          :for=\"inputId\"\n          :class=\"fieldVariants.label()\"\n        />\n        <slot\n          :class=\"fieldVariants.inputField()\"\n          :disabled=\"isDisabled\"\n          :id=\"inputId\"\n          tabindex=\"0\"\n          :aria-labelledby=\"$slots.label ? labelId : undefined\"\n          :aria-describedby=\"$slots.description ? descriptionId : undefined\"\n          :aria-invalid=\"$slots.error ? 'true' : undefined\"\n          :aria-errormessage=\"$slots.error ? errorId : undefined\"\n        />\n      </div>\n      <AnimatePresence mode=\"wait\">\n        <MotionComponent\n          as-child\n          v-if=\"$slots.trailing\"\n          :key=\"trailingKey\"\n          :initial=\"{\n            width: 0,\n            height: 0,\n            opacity: 0,\n            marginLeft: 0,\n            transition: transitionConfig.preset.short.enter.asMotion(),\n          }\"\n          :animate=\"{\n            width: iconSize,\n            height: iconSize,\n            opacity: 1,\n            marginLeft: iconMargin,\n            transition: transitionConfig.preset.short.beginEnd.asMotion(),\n          }\"\n          :exit=\"{\n            width: 0,\n            height: 0,\n            opacity: 0,\n            marginLeft: 0,\n            transition: transitionConfig.preset.short.exit.asMotion(),\n          }\"\n          :class=\"[\n            fieldVariants.icon({ size }),\n            'field--trailing-icon',\n            {\n              sm: 'ml-2xs',\n              md: 'ml-xs',\n              lg: 'ml-2xs',\n            }[size ?? 'lg'],\n          ]\"\n        >\n          <slot name=\"trailing\" />\n        </MotionComponent>\n      </AnimatePresence>\n    </div>\n    <slot\n      name=\"description\"\n      :id=\"descriptionId\"\n      :class=\"fieldVariants.description({ size })\"\n    />\n    <slot\n      name=\"error\"\n      :id=\"errorId\"\n      role=\"alert\"\n      :class=\"fieldVariants.error({ size })\"\n    />\n  </component>\n  <slot name=\"after\" :inputId :labelId />\n</template>\n","hash":"0c36eff80265926a69e86a33b3b1d833cb351725d5626f810b57a52cd76a2315"},{"path":"components/containments/index.ts","content":"export * from './ui-card';\nexport * from './ui-carousel';\nexport * from './ui-container';\nexport * from './ui-dialog';\nexport * from './ui-divider';\nexport * from './ui-modal';\nexport * from './ui-popover';\n","hash":"b9be14096e98611222fc4eb86bb2a16a7a81a57fd932218ead649a108fff2373"},{"path":"components/containments/ui-popover/index.ts","content":"export { default as PopoverContent, type PopoverContentProps } from './ui-popover-content.vue';\nexport { default as PopoverTrigger } from './ui-popover-trigger.vue';\nexport * from './ui-popover.variants';\nexport { default as Popover } from './ui-popover.vue';\n\n","hash":"9cd8a27d1d1797155471d3a6e6d29a482fb3cad835b218448433a74e74287cde"},{"path":"components/containments/ui-popover/ui-popover-content.vue","content":"<script setup lang=\"ts\">\nimport type { PropsPolymorphic } from '@/types';\nimport {\n  autoUpdate,\n  flip,\n  offset as floatingOffset,\n  hide,\n  shift,\n  useFloating,\n} from '@floating-ui/vue';\nimport {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Teleport,\n  type TeleportProps,\n  useAttrs,\n  watchEffect,\n} from 'vue';\nimport { AnimatePresence, motion } from 'motion-v';\nimport { usePopoverState } from './ui-popover.context';\nimport { type PopoverVariants, popoverVariants } from './ui-popover.variants';\nimport { Slot } from '@/components/utility';\n\nexport type PopoverContentProps = PropsPolymorphic & {\n  placement?: NonNullable<PopoverVariants['placement']>;\n  offset?: number;\n  teleportTo?: TeleportProps['to'];\n  teleportDisabled?: TeleportProps['disabled'];\n  teleportDefer?: TeleportProps['defer'];\n};\n\nconst {\n  placement = 'top',\n  offset = 0,\n  as = motion.div,\n  teleportTo = 'body',\n  teleportDisabled,\n  teleportDefer,\n} = defineProps<PopoverContentProps>();\n\ndefineOptions({\n  inheritAttrs: false,\n});\n\nconst { id, trigger, popover, open } = usePopoverState();\n\nconst { floatingStyles, placement: floatingPlacement } = useFloating(\n  trigger,\n  popover,\n  {\n    placement: () => placement,\n    middleware: [floatingOffset(offset), flip(), hide(), shift()],\n    whileElementsMounted: autoUpdate,\n    transform: false,\n  },\n);\n\nconst { id: idAttribute } = useAttrs();\n\nwatchEffect(() => {\n  if (!idAttribute) return;\n  id.value = `${idAttribute}`;\n});\n\nfunction close() {\n  open.value = false;\n}\n</script>\n\n<template>\n  <Teleport\n    :to=\"teleportTo\"\n    :disabled=\"teleportDisabled\"\n    :defer=\"teleportDefer\"\n  >\n    <AnimatePresence mode=\"wait\">\n      <Slot\n        :is=\"as\"\n        ref=\"popover\"\n        v-if=\"open\"\n        :id\n        :style=\"floatingStyles\"\n        :class=\"popoverVariants({ placement: floatingPlacement })\"\n        v-bind=\"$attrs\"\n        v-tw-merge\n      >\n        <slot :close />\n      </Slot>\n    </AnimatePresence>\n  </Teleport>\n</template>\n","hash":"8d7a2b7af24b37a8c1c0137c6ad87895f0fbb2d78471e54c1f0666bc66cfcc96"},{"path":"components/containments/ui-popover/ui-popover-trigger.vue","content":"<script setup lang=\"ts\">\nimport { useId } from 'vue';\nimport { usePopoverState } from './ui-popover.context';\nimport { Slot } from '@/components/utility';\n\nconst { trigger, open, id } = usePopoverState();\n\nconst triggerId = useId();\n</script>\n\n<template>\n  <Slot\n    :id=\"triggerId\"\n    ref=\"trigger\"\n    :aria-expanded=\"open\"\n    :aria-controls=\"open ? id : undefined\"\n  >\n    <slot />\n  </Slot>\n</template>\n","hash":"599dfe81c21c14895559f5d17e0e6b7efbb73c278b186d708f91ae843079950e"},{"path":"components/containments/ui-popover/ui-popover.context.ts","content":"import type { Context } from '@/types';\nimport { toRef, useEventListener } from '@vueuse/core';\nimport {\n  type ComputedRef,\n  type InjectionKey,\n  type Ref,\n  computed,\n  inject,\n  provide,\n  ref,\n  useId,\n} from 'vue';\n\ntype PopoverContext = Context<\n  {\n    id: Ref<string>;\n    open: Ref<boolean>;\n    trigger: Ref<HTMLElement | null>;\n    triggerElement: ComputedRef<HTMLElement | null>;\n    popover: Ref<HTMLElement | null>;\n  },\n  {\n    open: boolean;\n  }\n>;\n\nexport type PopoverState = PopoverContext['state'];\n\nexport type PopoverStateOptions = PopoverContext['options'];\n\nconst popoverStateKey = Symbol() as InjectionKey<PopoverState>;\n\nexport function providePopoverState(options: PopoverContext['provideOptions']) {\n  const contextId = useId();\n  const id = ref(contextId);\n  const open = toRef(options.open);\n  const trigger = ref<HTMLElement | null>(null);\n  const popover = ref<HTMLElement | null>(null);\n  const triggerElement = computed<HTMLElement | null>(() => {\n    if (trigger.value && '$el' in trigger.value) {\n      return trigger.value.$el as HTMLElement | null;\n    }\n    return trigger.value;\n  });\n  const popoverElement = computed<HTMLElement | null>(() => {\n    if (popover.value && '$el' in popover.value) {\n      return popover.value.$el as HTMLElement | null;\n    }\n    return popover.value;\n  });\n\n  useEventListener(trigger, 'click', () => {\n    open.value = !open.value;\n  });\n\n  useEventListener('click', (e) => {\n    if (!open.value) return;\n    const target = e.target as HTMLElement;\n    const shouldIgnore =\n      triggerElement.value?.contains(target) ||\n      popoverElement.value?.contains(target);\n    if (shouldIgnore) return;\n    open.value = false;\n  });\n\n  useEventListener('keydown', (e) => {\n    if (!open.value) return;\n    if (e.key !== 'Escape') return;\n    open.value = false;\n    triggerElement.value?.focus();\n  });\n\n  const state: PopoverState = {\n    id,\n    open,\n    trigger,\n    triggerElement,\n    popover,\n  };\n\n  provide(popoverStateKey, state);\n\n  return state;\n}\n\nexport function usePopoverState() {\n  const state = inject(popoverStateKey);\n\n  if (!state) {\n    throw new Error('usePopoverState must be used within a Popover component');\n  }\n\n  return state;\n}\n","hash":"e1ddb33a152729963dd1085e81237119e4fb874e49ab233434303f1a12011c3b"},{"path":"components/containments/ui-popover/ui-popover.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva(\n  ['popover group/popover', 'overflow-hidden', 'relative', 'z-20'],\n  {\n    variants: {\n      placement: {\n        top: ['origin-bottom'],\n        'top-start': ['origin-bottom-left'],\n        'top-end': ['origin-bottom-right'],\n        right: ['origin-left'],\n        'right-start': ['origin-top-left'],\n        'right-end': ['origin-bottom-left'],\n        left: ['origin-right'],\n        'left-start': ['origin-top-right'],\n        'left-end': ['origin-bottom-right'],\n        bottom: ['origin-top'],\n        'bottom-start': ['origin-top-left'],\n        'bottom-end': ['origin-top-right'],\n      },\n    },\n    defaultVariants: {\n      placement: 'top',\n    },\n  },\n);\n\nexport const popoverVariants = Object.assign(variants, {});\n\nexport type PopoverVariants = Variants<typeof popoverVariants>;\n","hash":"1fa4aaf9eff0c73f77bf9566ca66b67751cffaf5efdb83df7314a769d6047be4"},{"path":"components/containments/ui-popover/ui-popover.vue","content":"<script setup lang=\"ts\">\nimport { providePopoverState } from './ui-popover.context';\n\nconst open = defineModel<boolean>('open', { default: false });\n\nprovidePopoverState({\n  open,\n});\n</script>\n\n<template>\n  <slot />\n</template>\n","hash":"cd1e3c4aef1965c54a5a791906a281f07942f9eca269efc26df56a22d0cf4ced"},{"path":"components/containments/ui-modal/index.ts","content":"export { default as ModalContent } from './ui-modal-content.vue';\nexport { default as ModalTrigger } from './ui-modal-trigger.vue';\nexport { default as ModalUnderlay, type ModalUnderlayProps } from './ui-modal-underlay.vue';\nexport { default as Modal, type ModalProps } from './ui-modal.vue';\n\n","hash":"5fd50476e37e8625e0e00200bcbcac41ed128f56492fd5658a160162e1bacaa9"},{"path":"components/containments/ui-modal/ui-modal-content.vue","content":"<script setup lang=\"ts\">\nimport { useAttrs, watchEffect } from 'vue';\nimport { useModalState } from './ui-modal.context';\nimport { modalVariants } from './ui-modal.variants';\nimport { Slot } from '@/components/utility';\n\nconst { id, open } = useModalState();\n\nconst { id: idAttribute } = useAttrs();\n\nwatchEffect(() => {\n  if (!idAttribute) return;\n  id.value = `${idAttribute}`;\n});\n\nfunction close() {\n  open.value = false;\n}\n</script>\n\n<template>\n  <Slot :id :class=\"modalVariants()\" @click.stop v-tw-merge>\n    <slot :close />\n  </Slot>\n</template>\n","hash":"491bab9de8e383d2c9fc5e8e704c46337a61dfaae7b32e1725308efd62cbe708"},{"path":"components/containments/ui-modal/ui-modal-trigger.vue","content":"<script setup lang=\"ts\">\nimport { Slot } from '@/components/utility';\nimport { useModalState } from './ui-modal.context';\n\nconst { trigger, open, id } = useModalState();\n</script>\n\n<template>\n  <Slot\n    ref=\"trigger\"\n    :aria-expanded=\"open\"\n    :aria-controls=\"open ? id : undefined\"\n  >\n    <slot />\n  </Slot>\n</template>\n","hash":"5ae012a9bddf6f178a10ab19fd2a4b1e2408c4863104ecf45415ccc5f4929870"},{"path":"components/containments/ui-modal/ui-modal-underlay.vue","content":"<script setup lang=\"ts\">\nimport type { PropsPolymorphic } from '@/types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { Teleport, type TeleportProps } from 'vue';\nimport { AnimatePresence } from 'motion-v';\nimport { useModalState } from './ui-modal.context';\nimport { modalVariants } from './ui-modal.variants';\n\nexport type ModalUnderlayProps = PropsPolymorphic & {\n  teleportTo?: TeleportProps['to'];\n  teleportDisabled?: TeleportProps['disabled'];\n  teleportDefer?: TeleportProps['defer'];\n};\n\nconst {\n  as = 'div',\n  teleportTo = 'body',\n  teleportDisabled,\n  teleportDefer,\n} = defineProps<ModalUnderlayProps>();\n\ndefineOptions({\n  inheritAttrs: false,\n});\n\nconst { open, modal } = useModalState();\n</script>\n\n<template>\n  <Teleport\n    :to=\"teleportTo\"\n    :disabled=\"teleportDisabled\"\n    :defer=\"teleportDefer\"\n  >\n    <AnimatePresence mode=\"wait\">\n      <component\n        :is=\"as\"\n        v-if=\"open\"\n        ref=\"modal\"\n        :class=\"modalVariants.underlay()\"\n        @click=\"open = false\"\n        v-bind=\"$attrs\"\n        v-tw-merge\n      >\n        <slot />\n      </component>\n    </AnimatePresence>\n  </Teleport>\n</template>\n","hash":"7d81d0244897fde89f3cc5c9eeaf2bbd7663a1a05fe04e2e389fbbd66950ff14"},{"path":"components/containments/ui-modal/ui-modal.context.ts","content":"import type { Context } from '@/types';\nimport { toRef, useEventListener } from '@vueuse/core';\nimport { useFocusTrap } from '@vueuse/integrations/useFocusTrap';\nimport {\n  type InjectionKey,\n  type Ref,\n  inject,\n  nextTick,\n  provide,\n  ref,\n  useId,\n  watchEffect,\n} from 'vue';\n\ntype ModalContext = Context<\n  {\n    id: Ref<string>;\n    open: Ref<boolean>;\n    trigger: Ref<HTMLElement | null>;\n    modal: Ref<HTMLElement | null>;\n  },\n  {\n    open: boolean;\n    focusTrap: boolean;\n  }\n>;\n\nexport type ModalState = ModalContext['state'];\n\nexport type ModalStateOptions = ModalContext['options'];\n\nconst modalStateKey = Symbol() as InjectionKey<ModalState>;\n\nexport function provideModalState(options: ModalContext['provideOptions']) {\n  const contextId = useId();\n  const id = ref(contextId);\n  const open = toRef(options.open);\n  const trigger = ref<HTMLElement | null>(null);\n  const modal = ref<HTMLElement | null>(null);\n  const focusTrap = toRef(options.focusTrap);\n\n  const { activate, deactivate } = useFocusTrap(modal, { immediate: true });\n\n  watchEffect(async () => {\n    if (!focusTrap.value) return;\n    if (open.value) {\n      await nextTick();\n      activate();\n    } else {\n      deactivate();\n    }\n  });\n\n  useEventListener('keydown', (e) => {\n    if (!open.value) return;\n    if (e.key !== 'Escape') return;\n    open.value = false;\n  });\n\n  useEventListener(trigger, 'click', () => {\n    open.value = true;\n  });\n\n  const state: ModalState = {\n    id,\n    open,\n    trigger,\n    modal,\n  };\n\n  provide(modalStateKey, state);\n\n  return state;\n}\n\nexport function useModalState() {\n  const state = inject(modalStateKey);\n\n  if (!state) {\n    throw new Error('useModalState must be used within a Modal component');\n  }\n\n  return state;\n}\n","hash":"568b6373ff0ed32fe54778bb9d982368da3904857fa8eb7481cab83d887e652d"},{"path":"components/containments/ui-modal/ui-modal.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva(['modal group/modal', 'p-md']);\n\nconst underlayVariants = cva([\n  'modal--underlay',\n  'fixed inset-0',\n  'inline-flex items-center justify-center',\n  'overflow-hidden z-50',\n  'overscroll-contain',\n  'transition easing-standard duration-medium-1',\n  'starting:opacity-0 opacity-100',\n]);\n\nexport const modalVariants = Object.assign(variants, {\n  underlay: underlayVariants,\n});\n\nexport type ModalVariants = Variants<typeof modalVariants>;\n\nexport type ModalUnderlayVariants = Variants<typeof modalVariants.underlay>;\n","hash":"eaadf3a0803f3b461dd69f8a3eb38df7d75a4c9d39c35d5967f7cfed5ae9ca96"},{"path":"components/containments/ui-modal/ui-modal.vue","content":"<script setup lang=\"ts\">\nimport { provideModalState } from './ui-modal.context';\n\nexport type ModalProps = {\n  focusTrap?: boolean;\n};\n\nconst { focusTrap = false } = defineProps<ModalProps>();\n\nconst open = defineModel<boolean>('open', { default: false });\n\nprovideModalState({\n  open,\n  focusTrap: () => focusTrap,\n});\n</script>\n\n<template>\n  <slot />\n</template>\n","hash":"0618b0896ad6e4a32747299fa16c630a56a118b3b31f7cff100a2c12cb738d3a"},{"path":"components/containments/ui-divider/index.ts","content":"export * from './ui-divider.variants';\nexport { default as Divider, type DividerProps } from './ui-divier.vue';\n\n","hash":"8c5ecb3e1936047029e5aa66917d23a451b67ff0db51283ae59281a553709cc1"},{"path":"components/containments/ui-divider/ui-divider.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva(\n  [\n    'divider group/divider',\n    'relative',\n    'inline-flex items-center justify-center',\n    [\n      'aria-[orientation=horizontal]:h-0.25 aria-[orientation=horizontal]:w-full',\n      'aria-[orientation=vertical]:h-full aria-[orientation=vertical]:w-0.25',\n    ],\n    ['after:bg-outline-variant', 'after:size-full'],\n  ],\n  {\n    variants: {\n      inset: {\n        true: [\n          'aria-[orientation=horizontal]:px-md',\n          'aria-[orientation=vertical]:py-md',\n        ],\n        false: {},\n      },\n    },\n    defaultVariants: {\n      inset: false,\n    },\n  },\n);\n\nexport const dividerVariants = Object.assign(variants, {});\n\nexport type DividerVariants = Variants<typeof dividerVariants>;\n","hash":"f727bcb41c626df85b8effbd559fb32de168e1c74bc6492f699be00e68c7db5e"},{"path":"components/containments/ui-divider/ui-divier.vue","content":"<script setup lang=\"ts\">\nimport type { PropsPolymorphic } from '@/types';\nimport { dividerVariants } from './ui-divider.variants';\n\nexport type DividerProps = PropsPolymorphic & {\n  orientation?: 'horizontal' | 'vertical';\n  inset?: boolean;\n};\n\nconst {\n  orientation = 'horizontal',\n  inset,\n  as = 'div',\n} = defineProps<DividerProps>();\n</script>\n\n<template>\n  <component\n    :is=\"as\"\n    role=\"separator\"\n    :aria-orientation=\"orientation\"\n    :class=\"dividerVariants({ inset })\"\n    v-tw-merge\n  />\n</template>\n","hash":"736ab3ef12aa6d5a1e398af1382836e0dc7731f6049b7cec8265123038e13421"},{"path":"components/containments/ui-dialog/index.ts","content":"export {\n  Modal as Dialog,\n  ModalTrigger as DialogTrigger,\n  type ModalProps as DialogProps,\n} from '../ui-modal';\nexport {\n  default as DialogActions,\n  type DialogActionsProps,\n} from './ui-dialog-actions.vue';\nexport {\n  default as DialogContent,\n  type DialogContentProps,\n} from './ui-dialog-content.vue';\nexport {\n  default as DialogDivider,\n  type DialogDividerProps,\n} from './ui-dialog-divider.vue';\nexport {\n  default as DialogIcon,\n  type DialogIconProps,\n} from './ui-dialog-icon.vue';\nexport {\n  default as DialogSubhead,\n  type DialogSubheadProps,\n} from './ui-dialog-subhead.vue';\nexport {\n  default as DialogText,\n  type DialogTextProps,\n} from './ui-dialog-text.vue';\nexport * from './ui-dialog.variants';\n","hash":"7a7a793ac995b11ce12faab9a0b6c8014820daa0e9ffb99e8a4a3f8669bdaac5"},{"path":"components/containments/ui-dialog/ui-dialog-actions.vue","content":"<script setup lang=\"ts\">\nimport type { PropsPolymorphic } from '@/types';\nimport { dialogVariants } from './ui-dialog.variants';\n\nexport type DialogActionsProps = PropsPolymorphic;\n\nconst { as = 'div' } = defineProps<DialogActionsProps>();\n</script>\n\n<template>\n  <component :is=\"as\" :class=\"dialogVariants.actions()\" v-tw-merge>\n    <slot />\n  </component>\n</template>\n","hash":"789e5ba8ba60135001de7dfff02c08c4a2485081d2d1da99ae2e4d8a551e56d4"},{"path":"components/containments/ui-dialog/ui-dialog-content.vue","content":"<script setup lang=\"ts\">\nimport type { PropsPolymorphic } from '@/types';\nimport { transitionConfig } from '@/config';\nimport { dialogVariants } from './ui-dialog.variants';\nimport {\n  ModalContent,\n  ModalUnderlay,\n  type ModalUnderlayProps,\n} from '../ui-modal';\nimport { MotionComponent } from '@/components/utility';\n\nexport type DialogContentProps = PropsPolymorphic &\n  Omit<ModalUnderlayProps, 'as'> & {\n    underlayAs?: PropsPolymorphic['as'];\n  };\n\nconst {\n  as = 'div',\n  underlayAs,\n  ...underlayProps\n} = defineProps<DialogContentProps>();\n\ndefineOptions({\n  inheritAttrs: false,\n});\n</script>\n\n<template>\n  <ModalUnderlay :as=\"underlayAs\" v-bind=\"underlayProps\">\n    <ModalContent>\n      <template #default=\"{ close }\">\n        <MotionComponent\n          :as\n          :initial=\"{\n            opacity: 0,\n            y: '25vh',\n            transition: transitionConfig.preset.long.enter.asMotion(),\n          }\"\n          :animate=\"{\n            opacity: 1,\n            y: 0,\n            transition: transitionConfig.preset.long.beginEnd.asMotion(),\n          }\"\n          :exit=\"{\n            opacity: 0,\n            y: '25vh',\n            transition: transitionConfig.preset.long.exit.asMotion(),\n          }\"\n          role=\"dialog\"\n          :class=\"dialogVariants()\"\n          v-bind=\"$attrs\"\n        >\n          <slot name=\"icon\" :close />\n          <slot name=\"subhead\" :close />\n          <slot name=\"text\" :close />\n          <slot :close />\n          <slot name=\"actions\" :close />\n        </MotionComponent>\n      </template>\n    </ModalContent>\n  </ModalUnderlay>\n</template>\n","hash":"104c9d68dfae24563d9af9eb202f837ebbba112f6782d07d9ce5d92cb3bf0f65"},{"path":"components/containments/ui-dialog/ui-dialog-divider.vue","content":"<script setup lang=\"ts\">\nimport { Divider, type DividerProps } from '../ui-divider';\nimport {\n  type DialogDividerVariants,\n  dialogVariants,\n} from './ui-dialog.variants';\n\nexport type DialogDividerProps = DividerProps & {\n  spacing?: DialogDividerVariants['spacing'];\n};\n\nconst { spacing, as = 'p', ...rest } = defineProps<DialogDividerProps>();\n</script>\n\n<template>\n  <Divider\n    :is=\"as\"\n    :class=\"dialogVariants.divider({ spacing })\"\n    v-tw-merge\n    v-bind=\"rest\"\n  />\n</template>\n","hash":"183620c6b71566187fd8ad4d83db62f51a42ac3e659b05f278a176e484ea6fff"},{"path":"components/containments/ui-dialog/ui-dialog-icon.vue","content":"<script setup lang=\"ts\">\nimport { AnimatePresence } from 'motion-v';\nimport { transitionConfig } from '@/config';\nimport { dialogVariants } from './ui-dialog.variants';\nimport { MotionComponent } from '@/components/utility';\n\nexport type DialogIconProps = {\n  iconKey?: string;\n};\n\nconst { iconKey } = defineProps<DialogIconProps>();\n\ndefineOptions({\n  inheritAttrs: false,\n});\n</script>\n\n<template>\n  <AnimatePresence>\n    <MotionComponent\n      as-child\n      :key=\"iconKey\"\n      :initial=\"{\n        width: 0,\n        height: 0,\n        opacity: 0,\n        transition: transitionConfig.preset.short.enter.asMotion(),\n      }\"\n      :animate=\"{\n        width: 'var(--spacing-6)',\n        height: 'var(--spacing-6)',\n        opacity: 1,\n        transition: transitionConfig.preset.short.beginEnd.asMotion(),\n      }\"\n      :exit=\"{\n        width: 0,\n        height: 0,\n        opacity: 0,\n        transition: transitionConfig.preset.short.exit.asMotion(),\n      }\"\n      v-bind=\"$attrs\"\n      :class=\"dialogVariants.icon()\"\n    >\n      <slot />\n    </MotionComponent>\n  </AnimatePresence>\n</template>\n","hash":"115bc3be6b464422b4a12cb67478788e9d2559d5611fc8bd8a476e1451021a7e"},{"path":"components/containments/ui-dialog/ui-dialog-subhead.vue","content":"<script setup lang=\"ts\">\nimport type { PropsPolymorphic } from '@/types';\nimport { dialogVariants } from './ui-dialog.variants';\n\nexport type DialogSubheadProps = PropsPolymorphic;\n\nconst { as = 'p' } = defineProps<DialogSubheadProps>();\n</script>\n\n<template>\n  <component :is=\"as\" :class=\"dialogVariants.subhead()\" v-tw-merge>\n    <slot />\n  </component>\n</template>\n","hash":"8d4a3078bb9bda2492155d16e02ea7cde382e38905eecb0d7a091018379d95f1"},{"path":"components/containments/ui-dialog/ui-dialog-text.vue","content":"<script setup lang=\"ts\">\nimport type { PropsPolymorphic } from '@/types';\nimport { dialogVariants } from './ui-dialog.variants';\n\nexport type DialogTextProps = PropsPolymorphic;\n\nconst { as = 'p' } = defineProps<DialogTextProps>();\n</script>\n\n<template>\n  <component :is=\"as\" :class=\"dialogVariants.text()\" v-tw-merge>\n    <slot />\n  </component>\n</template>\n","hash":"a003aae0649d5ff2020e41a4ad8c5be25c49d0805df6c7ea6bafd54907959ae2"},{"path":"components/containments/ui-dialog/ui-dialog.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva([\n  'dialog group/dialog',\n  'min-w-72 max-w-72 sm:max-w-[calc(var(--spacing-96)+var(--spacing-44))]',\n  'inline-flex flex-col',\n  'p-lg',\n  'rounded-xl',\n  'bg-surface-container-high text-on-surface',\n  'elevation-3',\n]);\n\nconst iconVariants = cva([\n  'dialog--icon',\n  'text-secondary',\n  'size-6',\n  'relative inline-block',\n  'overflow-hidden',\n  '[&>*]:absolute [&>*]:inset-0 [&>*]:size-full',\n  'mx-auto mb-md last:mb-0',\n]);\n\nconst subheadVariants = cva([\n  'dialog--subhead',\n  'text-center typography-headline-small text-on-surface',\n  'mb-md last:mb-0',\n]);\n\nconst textVariants = cva([\n  'dialog--text',\n  'typography-body-medium text-on-surface-variant',\n]);\n\nconst dividerVariants = cva(['dialog--divider first:mt-0 last:mb-0'], {\n  variants: {\n    spacing: {\n      top: 'mt-md',\n      bottom: 'mb-md',\n      both: 'my-md',\n      none: '',\n    },\n  },\n  defaultVariants: {\n    spacing: 'none',\n  },\n});\n\nconst actionsVariants = cva([\n  'dialog--actions',\n  'inline-flex items-center justify-end gap-sm',\n  'mt-lg first:mt-0',\n]);\n\nexport const dialogVariants = Object.assign(variants, {\n  icon: iconVariants,\n  subhead: subheadVariants,\n  text: textVariants,\n  divider: dividerVariants,\n  actions: actionsVariants,\n});\n\nexport type DialogVariants = Variants<typeof dialogVariants>;\n\nexport type DialogIconVariants = Variants<typeof dialogVariants.icon>;\n\nexport type DialogSubheadVariants = Variants<typeof dialogVariants.subhead>;\n\nexport type DialogTextVariants = Variants<typeof dialogVariants.text>;\n\nexport type DialogDividerVariants = Variants<typeof dialogVariants.divider>;\n\nexport type DialogActionsVariants = Variants<typeof dialogVariants.actions>;\n","hash":"b0108fba8222a8e7d33a929a9c2f526e2e6c8f7eebc3c44070c03c6ead4b3cf1"},{"path":"components/containments/ui-container/index.ts","content":"export {\n  default as ContainerContent,\n  type ContainerContentProps,\n} from './ui-container-content.vue';\nexport * from './ui-container.variants';\nexport { default as Container, type ContainerProps } from './ui-container.vue';\n","hash":"1f78751f9138e9e63187322f5cc864490c491220c51ece3f07d3a3d3aa737de1"},{"path":"components/containments/ui-container/ui-container-content.vue","content":"<script setup lang=\"ts\">\nimport type { PropsPolymorphic } from '@/types';\nimport {\n  type ContainerContentVariants,\n  containerVariants,\n} from './ui-container.variants';\n\nexport type ContainerContentProps = PropsPolymorphic & {\n  variant?: ContainerContentVariants['variant'];\n  padding?: ContainerContentVariants['padding'];\n  fluid?: ContainerContentVariants['fluid'];\n};\n\nconst {\n  variant,\n  padding,\n  fluid,\n  as = 'section',\n} = defineProps<ContainerContentProps>();\n</script>\n\n<template>\n  <component\n    :is=\"as\"\n    :class=\"containerVariants.content({ variant, padding, fluid })\"\n    v-tw-merge\n  >\n    <slot />\n  </component>\n</template>\n","hash":"14533b89d303424a97f37d7abf1e68c5e0f098b7d78d040abe2ab8631c127317"},{"path":"components/containments/ui-container/ui-container.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva(['group/container', 'flex items-stretch justify-center'], {\n  variants: {\n    color: {\n      surface: ['bg-surface', 'text-on-surface'],\n      'surface-container': ['bg-surface-container', 'text-on-surface'],\n      'inverse-surface': ['bg-inverse-surface', 'text-inverse-on-surface'],\n      primary: ['bg-primary', 'text-on-primary'],\n      'primary-container': [\n        'bg-primary-container',\n        'text-on-primary-container',\n      ],\n      secondary: ['bg-secondary', 'text-on-secondary'],\n      'secondary-container': [\n        'bg-secondary-container',\n        'text-on-secondary-container',\n      ],\n      info: ['bg-info', 'text-on-info'],\n      'info-container': ['bg-info-container', 'text-on-info-container'],\n      success: ['bg-success', 'text-on-success'],\n      'success-container': [\n        'bg-success-container',\n        'text-on-success-container',\n      ],\n      caution: ['bg-caution', 'text-on-caution'],\n      'caution-container': [\n        'bg-caution-container',\n        'text-on-caution-container',\n      ],\n      critical: ['bg-critical', 'text-on-critical'],\n      'critical-container': [\n        'bg-critical-container',\n        'text-on-critical-container',\n      ],\n      none: [],\n    },\n  },\n  defaultVariants: {\n    color: 'none',\n  },\n});\n\nconst contentVariants = cva(['container--content', 'flex-1', 'px-md'], {\n  variants: {\n    variant: {\n      grid: 'grid grid-cols-12 gap-md',\n      flex: 'flex gap-md',\n      none: [],\n    },\n    fluid: {\n      true: [],\n      false: 'container',\n    },\n    padding: {\n      top: 'pt-3xl',\n      bottom: 'pb-3xl',\n      both: 'py-3xl',\n      none: [],\n    },\n  },\n  defaultVariants: {\n    variant: 'none',\n    fluid: false,\n    padding: 'none',\n  },\n});\n\nexport const containerVariants = Object.assign(variants, {\n  content: contentVariants,\n});\n\nexport type ContainerVariants = Variants<typeof containerVariants>;\n\nexport type ContainerContentVariants = Variants<\n  typeof containerVariants.content\n>;\n","hash":"2b15df442b60cfb04e411dde15f4148f620e98766e844b527210b1fdf44637f7"},{"path":"components/containments/ui-container/ui-container.vue","content":"<script setup lang=\"ts\">\nimport { computedVariants } from '@/composables';\nimport {\n  type ContainerVariants,\n  containerVariants,\n} from './ui-container.variants';\nimport {\n  MotionComponent,\n  type MotionComponentProps,\n} from '@/components/utility';\nimport { transitionConfig } from '@/config';\n\nexport type ContainerProps = MotionComponentProps & {\n  color?: ContainerVariants['color'];\n};\n\nconst {\n  color,\n  as = 'div',\n  initial,\n  animate,\n  exit,\n  ...motionProps\n} = defineProps<ContainerProps>();\n\nconst {\n  initial: initialObject,\n  animate: animateObject,\n  exit: exitObject,\n} = computedVariants(() => ({\n  initial,\n  animate,\n  exit,\n}));\n</script>\n\n<template>\n  <MotionComponent\n    :as\n    v-bind=\"motionProps\"\n    :initial=\"{\n      transition: transitionConfig.preset.short.enter.asMotion(),\n      ...initialObject,\n    }\"\n    :animate=\"{\n      transition: transitionConfig.preset.short.beginEnd.asMotion(),\n      ...animateObject,\n    }\"\n    :exit=\"{\n      transition: transitionConfig.preset.short.exit.asMotion(),\n      ...exitObject,\n    }\"\n    :class=\"containerVariants({ color })\"\n  >\n    <slot />\n  </MotionComponent>\n</template>\n","hash":"208b06cb8fa8af95fb7e23527e06cb29c6266c86a4a6ab649194c84d02f35645"},{"path":"components/containments/ui-carousel/index.ts","content":"export { default as CarouselDots, type CarouselDotsProps } from './ui-carousel-dots.vue';\nexport { default as CarouselNextButton, type CarouselNextButtonProps } from './ui-carousel-next-button.vue';\nexport { default as CarouselPrevButton, type CarouselPrevButtonProps } from './ui-carousel-prev-button.vue';\nexport { default as CarouselSlideContent, type CarouselSlideContentProps } from './ui-carousel-slide-content.vue';\nexport { default as CarouselSlide, type CarouselSlideProps } from './ui-carousel-slide.vue';\nexport { default as CarouselView, type CarouselViewProps } from './ui-carousel-view.vue';\nexport * from './ui-carousel.variants';\nexport { default as Carousel, type CarouselProps } from './ui-carousel.vue';\n\n","hash":"25ddc2938e7c4e18a37e9ce1cb469392a47dcf56d82212e5a1a639a91ebb0074"},{"path":"components/containments/ui-carousel/ui-carousel-dots.vue","content":"<script setup lang=\"ts\">\nimport type { PropsPolymorphic } from '@/types';\nimport { carouselVariants } from './ui-carousel.variants';\nimport { useCarouselState } from './ui-carousel.context';\nimport { ref, watchEffect } from 'vue';\nimport { IconCircleFilled } from '@tabler/icons-vue';\n\nexport type CarouselDotsProps = PropsPolymorphic & {\n  label?: string;\n};\n\nconst { label = 'Slide', as = 'div' } = defineProps<CarouselDotsProps>();\n\nconst { id, api } = useCarouselState();\n\nconst selectedIndex = ref(0);\nconst scrollSnaps = ref<number[]>([]);\n\nfunction onInit() {\n  if (!api.value) return;\n  scrollSnaps.value = api.value.scrollSnapList();\n}\nfunction onSelect() {\n  if (!api.value) return;\n  selectedIndex.value = api.value.selectedScrollSnap();\n}\n\nfunction select(index: number) {\n  if (!api.value) return;\n  api.value.scrollTo(index);\n}\n\nwatchEffect(() => {\n  onInit();\n  onSelect();\n  api.value?.on('reInit', onInit).on('reInit', onSelect).on('select', onSelect);\n});\n</script>\n\n<template>\n  <component\n    :is=\"as\"\n    :class=\"carouselVariants.dotsContainer()\"\n    role=\"tablist\"\n    aria-label=\"Slides\"\n    v-tw-merge\n  >\n    <button\n      v-for=\"(_, index) in scrollSnaps\"\n      :key=\"index\"\n      @click=\"select(index)\"\n      type=\"button\"\n      :aria-label=\"`${label} ${index + 1}`\"\n      role=\"tab\"\n      :aria-selected=\"selectedIndex === index\"\n      :tabindex=\"selectedIndex === index ? undefined : -1\"\n      :aria-controls=\"`${id}-slide-${index}`\"\n      :class=\"\n        carouselVariants.dot({\n          isSelected: selectedIndex === index,\n        })\n      \"\n      v-tw-merge\n    >\n      <slot>\n        <IconCircleFilled />\n      </slot>\n    </button>\n  </component>\n</template>\n","hash":"6656488b17c6a8af854cfafc3ce6d88d3582596cf2526269917b9abb5d0b1c59"},{"path":"components/containments/ui-carousel/ui-carousel-next-button.vue","content":"<script setup lang=\"ts\">\nimport { carouselVariants } from './ui-carousel.variants';\nimport { useCarouselState } from './ui-carousel.context';\nimport { ref, watchEffect } from 'vue';\nimport { IconChevronRight } from '@tabler/icons-vue';\nimport { IconButton, type IconButtonProps } from '@/components/actions';\n\nexport type CarouselNextButtonProps = IconButtonProps;\n\nconst {\n  color = 'secondary',\n  variant = 'standard',\n  ...props\n} = defineProps<CarouselNextButtonProps>();\n\nconst { api } = useCarouselState();\n\nconst disabled = ref(false);\n\nfunction onSelect() {\n  if (!api.value) return;\n  disabled.value = !api.value.canScrollNext();\n}\n\nfunction onClick() {\n  if (!api.value) return;\n  api.value.scrollNext();\n}\n\nwatchEffect(() => {\n  onSelect();\n  api.value?.on('reInit', onSelect).on('select', onSelect);\n});\n</script>\n\n<template>\n  <IconButton\n    :color\n    :variant\n    :disabled\n    aria-label=\"Next slide\"\n    v-bind=\"props\"\n    :class=\"carouselVariants.arrowButton()\"\n    :animate=\"{ height: 'auto' }\"\n    @click=\"onClick()\"\n  >\n    <slot>\n      <IconChevronRight />\n    </slot>\n  </IconButton>\n</template>\n","hash":"0951253d2043d5d7786ad97ffa3bbcb12c781ec4db9ed88530d99c187e3cdf39"},{"path":"components/containments/ui-carousel/ui-carousel-prev-button.vue","content":"<script setup lang=\"ts\">\nimport { carouselVariants } from './ui-carousel.variants';\nimport { useCarouselState } from './ui-carousel.context';\nimport { ref, watchEffect } from 'vue';\nimport { IconChevronLeft } from '@tabler/icons-vue';\nimport { IconButton, type IconButtonProps } from '@/components/actions';\n\nexport type CarouselPrevButtonProps = IconButtonProps;\n\nconst {\n  color = 'secondary',\n  variant = 'standard',\n  ...props\n} = defineProps<CarouselPrevButtonProps>();\n\nconst { api } = useCarouselState();\n\nconst disabled = ref(false);\n\nfunction onSelect() {\n  if (!api.value) return;\n  disabled.value = !api.value.canScrollPrev();\n}\n\nfunction onClick() {\n  if (!api.value) return;\n  api.value.scrollPrev();\n}\n\nwatchEffect(() => {\n  onSelect();\n  api.value?.on('reInit', onSelect).on('select', onSelect);\n});\n</script>\n\n<template>\n  <IconButton\n    :color\n    :variant\n    :disabled\n    aria-label=\"Previous slide\"\n    v-bind=\"props\"\n    :class=\"carouselVariants.arrowButton()\"\n    :animate=\"{ height: 'auto' }\"\n    @click=\"onClick()\"\n  >\n    <slot>\n      <IconChevronLeft />\n    </slot>\n  </IconButton>\n</template>\n","hash":"90c00d22b7124a6b7ee52495acd32a2043ba87adf698508e83993dc76e73d95c"},{"path":"components/containments/ui-carousel/ui-carousel-slide-content.vue","content":"<script setup lang=\"ts\">\nimport type { PropsPolymorphic } from '@/types';\nimport { carouselVariants } from './ui-carousel.variants';\n\nexport type CarouselSlideContentProps = PropsPolymorphic;\n\nconst { as = 'div' } = defineProps<CarouselSlideContentProps>();\n</script>\n\n<template>\n  <component :is=\"as\" :class=\"carouselVariants.slideContent()\" v-tw-merge>\n    <slot />\n  </component>\n</template>\n","hash":"694de1a5f4b3d1aea9c26a181cd90d70cb155591cd39891857c8d126f78fce95"},{"path":"components/containments/ui-carousel/ui-carousel-slide.vue","content":"<script setup lang=\"ts\">\nimport type { PropsPolymorphic } from '@/types';\nimport { carouselVariants } from './ui-carousel.variants';\nimport { useCarouselState } from './ui-carousel.context';\n\nexport type CarouselSlideProps = PropsPolymorphic & {\n  index: number;\n};\n\nconst { index, as = 'div' } = defineProps<CarouselSlideProps>();\n\nconst { id } = useCarouselState();\n</script>\n\n<template>\n  <component\n    :is=\"as\"\n    :class=\"carouselVariants.slide()\"\n    :id=\"`${id}-slide-${index}`\"\n    role=\"group\"\n    aria-roledescription=\"slide\"\n    v-tw-merge\n  >\n    <slot />\n  </component>\n</template>\n","hash":"3f86eef3edf4d119894cde2db854ddec94ca920a59945895e798b8bfac322d08"},{"path":"components/containments/ui-carousel/ui-carousel-view.vue","content":"<script setup lang=\"ts\">\nimport type { PropsPolymorphic } from '@/types';\nimport { useCarouselState } from './ui-carousel.context';\nimport { carouselVariants } from './ui-carousel.variants';\n\nexport type CarouselViewProps = PropsPolymorphic;\n\nconst { as = 'div' } = defineProps<CarouselViewProps>();\n\ndefineOptions({\n  inheritAttrs: false,\n});\n\nconst { carousel } = useCarouselState();\n</script>\n\n<template>\n  <slot name=\"left\" />\n  <component\n    :is=\"as\"\n    ref=\"carousel\"\n    v-bind=\"$attrs\"\n    :class=\"carouselVariants.view()\"\n    v-tw-merge\n  >\n    <div :class=\"carouselVariants.viewContainer()\" v-tw-merge>\n      <slot />\n    </div>\n  </component>\n  <slot name=\"right\" />\n</template>\n","hash":"409e71ad89988f5df1ca268c19a682df46aed9ee062ded1d5a56b8789d673201"},{"path":"components/containments/ui-carousel/ui-carousel.context.ts","content":"import type {\n  EmblaCarouselApi,\n  EmblaOptions,\n  EmblaPlugin,\n} from '@/composables';\nimport {\n  useCarousel,\n} from '@/composables';\nimport type { Context } from '@/types';\nimport { toRef } from '@vueuse/core';\nimport type { InjectionKey, Ref } from 'vue';\nimport { inject, provide, useId, watchEffect } from 'vue';\n\ntype CarouselContext = Context<\n  {\n    id: string;\n    api: Ref<EmblaCarouselApi | undefined>;\n    carousel: Ref<HTMLElement | undefined>;\n  },\n  {\n    api: EmblaCarouselApi | undefined;\n    options: EmblaOptions;\n    plugins: EmblaPlugin[];\n  }\n>;\n\nexport type CarouselState = CarouselContext['state'];\n\nexport type CarouselStateOptions = CarouselContext['options'];\n\nconst carouselStateKey = Symbol() as InjectionKey<CarouselState>;\n\nexport function provideCarouselState(\n  options: CarouselContext['provideOptions'],\n) {\n  const id = useId()\n  const api = toRef(options.api);\n\n  const { ref: carousel, api: carouselApi } = useCarousel({\n    options: options.options,\n    plugins: options.plugins,\n  });\n\n  watchEffect(() => {\n    api.value = carouselApi.value;\n  });\n\n  const state: CarouselState = {\n    id,\n    api,\n    carousel,\n  };\n\n  provide(carouselStateKey, state);\n\n  return state;\n}\n\nexport function useCarouselState() {\n  const state = inject(carouselStateKey);\n\n  if (!state) {\n    throw new Error(\n      'useCarouselState must be used within a Carousel component',\n    );\n  }\n\n  return state;\n}\n","hash":"315393af1286cacad035a28ea088399e377adcde085e6267c9e2a859251d7826"},{"path":"components/containments/ui-carousel/ui-carousel.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva(['carousel group/carousel', 'grid gap-2xs']);\n\nconst containerVariants = cva([\n  'carousel--container',\n  'grid grid-cols-[max-content_1fr_max-content]',\n  'gap-2xs',\n]);\n\nconst viewVariants = cva([\n  'carousel--view',\n  'overflow-hidden',\n  'p-3xs',\n  'col-start-2',\n]);\n\nconst viewContainerVariants = cva([\n  'carousel--view-container',\n  'flex -ml-md',\n  'touch-pan-y touch-pinch-zoom',\n]);\n\nconst slideVariants = cva([\n  'carousel--slide',\n  'min-w-0',\n  'shrink-0 grow-0',\n  'translate-x-0 translate-y-0',\n  'pl-md',\n]);\n\nconst slideContentVariants = cva(['carousel--content', 'select-none']);\n\nconst arrowButtonVariants = cva([\n  'carousel--arrow-button',\n  'h-auto self-stretch',\n]);\n\nconst dotsContainerVariants = cva([\n  'carousel--dots-container',\n  'flex items-center justify-center',\n  'gap-3xs',\n]);\n\nconst dotVariants = cva(\n  [\n    'carousel--dot',\n    'flex items-center justify-center',\n    'size-6',\n    'transition easing-standard duration-medium-1',\n    '[&>*]:size-4 cursor-pointer',\n    'outline-none bg-transparent border-none',\n  ],\n  {\n    variants: {\n      isSelected: {\n        true: 'text-outline',\n        false: 'text-outline-variant',\n      },\n    },\n    defaultVariants: {\n      isSelected: false,\n    },\n  },\n);\n\nexport const carouselVariants = Object.assign(variants, {\n  container: containerVariants,\n  view: viewVariants,\n  viewContainer: viewContainerVariants,\n  slide: slideVariants,\n  slideContent: slideContentVariants,\n  arrowButton: arrowButtonVariants,\n  dotsContainer: dotsContainerVariants,\n  dot: dotVariants,\n});\n\nexport type CarouselVariants = Variants<typeof carouselVariants>;\n\nexport type CarouselContainerVariants = Variants<\n  typeof carouselVariants.container\n>;\n\nexport type CarouselViewVariants = Variants<typeof carouselVariants.view>;\n\nexport type CarouselViewContainerVariants = Variants<\n  typeof carouselVariants.viewContainer\n>;\n\nexport type CarouselSlideVariants = Variants<typeof carouselVariants.slide>;\n\nexport type CarouselSlideContentVariants = Variants<\n  typeof carouselVariants.slideContent\n>;\n\nexport type CarouselArrowButtonVariants = Variants<\n  typeof carouselVariants.arrowButton\n>;\n\nexport type CarouselDotsContainerVariants = Variants<\n  typeof carouselVariants.dotsContainer\n>;\n\nexport type CarouselDotVariants = Variants<typeof carouselVariants.dot>;\n","hash":"52b8a7d8c418b6af04757e722c3143f25108ad2569f2901b5886eeef45fef409"},{"path":"components/containments/ui-carousel/ui-carousel.vue","content":"<script setup lang=\"ts\">\nimport type { PropsPolymorphic } from '@/types';\nimport type {\n  EmblaCarouselApi,\n  EmblaOptions,\n  EmblaPlugin,\n} from '@/composables';\nimport { provideCarouselState } from './ui-carousel.context';\nimport { carouselVariants } from './ui-carousel.variants';\n\nexport type CarouselProps = PropsPolymorphic & {\n  options?: EmblaOptions;\n  plugins?: EmblaPlugin[];\n};\n\nconst { as = 'div', options = {}, plugins = [] } = defineProps<CarouselProps>();\n\nconst api = defineModel<EmblaCarouselApi | undefined>('api', {\n  default: undefined,\n});\n\nprovideCarouselState({\n  api,\n  options: () => options,\n  plugins: () => plugins,\n});\n</script>\n\n<template>\n  <component\n    :is=\"as\"\n    :class=\"carouselVariants()\"\n    aria-roledescription=\"carousel\"\n    v-tw-merge\n  >\n    <slot name=\"before\" />\n    <div :class=\"carouselVariants.container()\" v-tw-merge>\n      <slot />\n    </div>\n    <slot name=\"after\" />\n  </component>\n</template>\n","hash":"c70fc6ea31536137890bef8d54976284c91b3ee0559c98380870ad58379b5582"},{"path":"components/containments/ui-card/index.ts","content":"export * from './ui-card.variants';\nexport { default as Card, type CardProps } from './ui-card.vue';\n\n","hash":"33b9d08910b3bb000d65752b18050de66e7de8e5cb5797c07b517ef6291236c6"},{"path":"components/containments/ui-card/ui-card.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva(\n  [\n    'card group/card',\n    'transition duration-medium-1 easing-standard',\n    'relative',\n    'rounded-md',\n    'overflow-hidden',\n    'outline-none border-transparent',\n    ['ripple-wrapper:inset-0'],\n  ],\n  {\n    variants: {\n      variant: {\n        elevated: [\n          'bg-surface-container-low is-disabled:bg-surface/38',\n          'text-on-surface',\n          'elevation-1',\n          'is-disabled:elevation-1',\n          'is-disabled:bg-surface/38',\n        ],\n        filled: [\n          'bg-surface-container-highest is-disabled:bg-surface-variant/38',\n          'text-on-surface',\n          'is-disabled:elevation-0',\n          'is-disabled:bg-surface-variant/38',\n        ],\n        outlined: [\n          'bg-surface',\n          'text-on-surface',\n          'border border-outline-variant is-disabled:border-outline/12',\n          'is-disabled:elevation-0',\n          'is-disabled:border-outline/12',\n        ],\n        none: [],\n      },\n      color: {\n        standard: [],\n        primary: [],\n        secondary: [],\n        info: [],\n        success: [],\n        caution: [],\n        critical: [],\n      },\n      interactable: {\n        true: [\n          'cursor-pointer',\n          'is-hovered:state-hover',\n          'in-focus-visible:state-focus',\n          'is-pressed:state-press',\n          'is-disabled:state-transparent',\n          'is-disabled:pointer-events-none',\n        ],\n        false: [],\n      },\n    },\n    defaultVariants: {\n      color: 'standard',\n      variant: 'none',\n      interactable: false,\n    },\n    compoundVariants: [\n      {\n        variant: 'elevated',\n        interactable: true,\n        class: [\n          'is-hovered:elevation-2',\n          'in-focus-visible:elevation-1',\n          'is-pressed:elevation-1',\n        ],\n      },\n      {\n        variant: ['filled', 'none'],\n        interactable: true,\n        class: [\n          'is-hovered:elevation-1',\n          'in-focus-visible:elevation-0',\n          'is-pressed:elevation-0',\n        ],\n      },\n      {\n        variant: 'outlined',\n        interactable: true,\n        class: [\n          'in-focus-visible:border-on-surface',\n          'is-pressed:border-outline-variant',\n          'is-hovered:elevation-1',\n          'in-focus-visible:elevation-0',\n          'is-pressed:elevation-0',\n        ],\n      },\n      {\n        interactable: true,\n        color: 'standard',\n        className: ['state-on-surface', 'ripple:bg-on-surface'],\n      },\n      {\n        interactable: true,\n        color: 'primary',\n        className: ['state-primary', 'ripple:bg-primary'],\n      },\n      {\n        interactable: true,\n        color: 'secondary',\n        className: ['state-secondary', 'ripple:bg-secondary'],\n      },\n      {\n        interactable: true,\n        color: 'info',\n        className: ['state-info', 'ripple:bg-info'],\n      },\n      {\n        interactable: true,\n        color: 'success',\n        className: ['state-success', 'ripple:bg-success'],\n      },\n      {\n        interactable: true,\n        color: 'caution',\n        className: ['state-caution', 'ripple:bg-caution'],\n      },\n      {\n        interactable: true,\n        color: 'critical',\n        className: ['state-critical', 'ripple:bg-critical'],\n      },\n    ],\n  },\n);\n\nexport const cardVariants = Object.assign(variants, {});\n\nexport type CardVariants = Variants<typeof cardVariants>;\n","hash":"345485e5ab009c42694ed2e0599925479d1ea990671af0851abe725f5f7b981c"},{"path":"components/containments/ui-card/ui-card.vue","content":"<script setup lang=\"ts\">\nimport { type CardVariants, cardVariants } from './ui-card.variants';\nimport { computedVariants, useButton, useRipple } from '@/composables';\nimport { computed, useTemplateRef } from 'vue';\nimport {\n  MotionComponent,\n  type MotionComponentProps,\n} from '@/components/utility';\nimport { transitionConfig } from '@/config';\n\nexport type CardProps = MotionComponentProps & {\n  color?: CardVariants['color'];\n  variant?: CardVariants['variant'];\n  interactable?: boolean;\n  disabled?: boolean;\n};\n\nconst {\n  color,\n  variant,\n  interactable,\n  disabled,\n  as = 'div',\n  initial,\n  animate,\n  exit,\n  ...motionProps\n} = defineProps<CardProps>();\n\nconst elementRef = useTemplateRef<HTMLElement>('card');\n\nconst removeRole = computed(() => !interactable);\n\nuseButton(elementRef, {\n  elementType: as === 'button' ? 'button' : '',\n  removeRole,\n});\nuseRipple(elementRef);\n\nconst computedDisabled = computed(() => {\n  if (!interactable) return undefined;\n  if (!disabled) return undefined;\n  return disabled;\n});\n\nconst extraProps = computed(() => ({\n  ...motionProps,\n  tabindex: interactable ? 0 : undefined,\n  'aria-disabled': as === 'button' ? undefined : computedDisabled.value,\n  disabled: as === 'button' ? computedDisabled.value : undefined,\n}));\n\nconst {\n  initial: initialObject,\n  animate: animateObject,\n  exit: exitObject,\n} = computedVariants(() => ({\n  initial,\n  animate,\n  exit,\n}));\n</script>\n\n<template>\n  <MotionComponent\n    :as\n    ref=\"card\"\n    v-bind=\"extraProps\"\n    :initial=\"{\n      transition: transitionConfig.preset.short.enter.asMotion(),\n      ...initialObject,\n    }\"\n    :animate=\"{\n      transition: transitionConfig.preset.short.beginEnd.asMotion(),\n      ...animateObject,\n    }\"\n    :exit=\"{\n      transition: transitionConfig.preset.short.exit.asMotion(),\n      ...exitObject,\n    }\"\n    :class=\"cardVariants({ color, variant, interactable })\"\n  >\n    <slot />\n  </MotionComponent>\n</template>\n","hash":"c8539dde8485201530d5a14d022d4baf22d0dd84dfe771eebaf52a06fba328bc"},{"path":"components/communications/index.ts","content":"export * from './ui-badge';\nexport * from './ui-tooltip';\n","hash":"521438c94923090b4889b37faab2e4e12e52dd5b5764d2bb878540a73eeb3b5f"},{"path":"components/communications/ui-tooltip/index.ts","content":"export {\n    default as TooltipContent,\n    type TooltipContentProps\n} from './ui-tooltip-content.vue';\nexport { default as TooltipTrigger } from './ui-tooltip-trigger.vue';\nexport * from './ui-tooltip.variants';\nexport { default as Tooltip, type TooltipProps } from './ui-tooltip.vue';\n\n","hash":"8b55a1b54b40d0ce4fbb1ad3baaefb8b136e71032e05c706c68a831c9d97dc81"},{"path":"components/communications/ui-tooltip/ui-tooltip-content.vue","content":"<script setup lang=\"ts\">\nimport { useTooltipState } from './ui-tooltip.context';\nimport { type TooltipVariants, tooltipVariants } from './ui-tooltip.variants';\nimport {\n  autoUpdate,\n  flip,\n  hide,\n  offset,\n  shift,\n  useFloating,\n} from '@floating-ui/vue';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { Teleport, type TeleportProps, computed } from 'vue';\nimport { AnimatePresence, motion } from 'motion-v';\nimport {\n  floatingPlacementToVariantPlacement,\n  variantPlacementToFloatingPlacement,\n} from './ui-tooltip.utility';\nimport {\n  MotionComponent,\n  type MotionComponentProps,\n} from '@/components/utility';\nimport { computedVariants } from '@/composables';\nimport { transitionConfig } from '@/config';\n\nexport type TooltipContentProps = Omit<MotionComponentProps, 'asChild'> & {\n  variant?: TooltipVariants['variant'];\n  placement?: TooltipVariants['placement'];\n  teleportTo?: TeleportProps['to'];\n  teleportDisabled?: TeleportProps['disabled'];\n  teleportDefer?: TeleportProps['defer'];\n};\n\nconst {\n  variant,\n  placement,\n  as = motion.div,\n  teleportTo = 'body',\n  teleportDisabled,\n  teleportDefer,\n  initial,\n  animate,\n  exit,\n  ...motionProps\n} = defineProps<TooltipContentProps>();\n\ndefineOptions({\n  inheritAttrs: false,\n});\n\nconst { id, trigger, tooltip, open } = useTooltipState();\n\nconst { floatingStyles, placement: floatingPlacement } = useFloating(\n  trigger,\n  tooltip,\n  {\n    placement: () => variantPlacementToFloatingPlacement(placement),\n    middleware: [\n      offset(({ rects }) => {\n        const padding = 4;\n        if (placement === 'top-left' || placement === 'bottom-left')\n          return {\n            mainAxis: padding,\n            crossAxis: -rects.floating.width - padding,\n          };\n        if (placement === 'top-right' || placement === 'bottom-right')\n          return {\n            mainAxis: padding,\n            crossAxis: rects.floating.width + padding,\n          };\n        return padding;\n      }),\n      flip(),\n      hide(),\n      shift(),\n    ],\n    whileElementsMounted: autoUpdate,\n    transform: false,\n  },\n);\n\nconst finalPlacement = computed(() =>\n  floatingPlacementToVariantPlacement(floatingPlacement.value),\n);\n\nconst {\n  initial: initialObject,\n  animate: animateObject,\n  exit: exitObject,\n} = computedVariants(() => ({\n  initial,\n  animate,\n  exit,\n}));\n</script>\n\n<template>\n  <Teleport\n    :to=\"teleportTo\"\n    :disabled=\"teleportDisabled\"\n    :defer=\"teleportDefer\"\n  >\n    <AnimatePresence mode=\"wait\">\n      <MotionComponent\n        v-if=\"open\"\n        :as\n        ref=\"tooltip\"\n        :id\n        role=\"tooltip\"\n        v-bind=\"{ ...motionProps, ...$attrs }\"\n        :initial=\"{\n          opacity: 0,\n          scale: 0,\n          transition: transitionConfig.preset.short.enter.asMotion(),\n          ...initialObject,\n        }\"\n        :animate=\"{\n          opacity: 1,\n          scale: 1,\n          transition: transitionConfig.preset.short.beginEnd.asMotion(),\n          ...animateObject,\n        }\"\n        :exit=\"{\n          opacity: 0,\n          scale: 0,\n          transition: transitionConfig.preset.short.exit.asMotion(),\n          ...exitObject,\n        }\"\n        :style=\"floatingStyles\"\n        :class=\"tooltipVariants({ variant, placement: finalPlacement })\"\n      >\n        <p\n          v-if=\"variant === 'rich' && $slots.subhead\"\n          :class=\"tooltipVariants.subhead()\"\n          v-tw-merge\n        >\n          <slot name=\"subhead\" />\n        </p>\n        <p :class=\"tooltipVariants.text({ variant })\" v-tw-merge>\n          <slot />\n        </p>\n        <p\n          v-if=\"variant === 'rich' && $slots.actions\"\n          :class=\"tooltipVariants.actions()\"\n          v-tw-merge\n        >\n          <slot name=\"actions\" />\n        </p>\n      </MotionComponent>\n    </AnimatePresence>\n  </Teleport>\n</template>\n","hash":"db4cff6b51b7e6a59c06afe7ee82eeb8c855a8c5a9e7bb76d81de482592dd800"},{"path":"components/communications/ui-tooltip/ui-tooltip-trigger.vue","content":"<script setup lang=\"ts\">\nimport { Slot } from '@/components/utility';\nimport { useTooltipState } from './ui-tooltip.context';\n\nconst { trigger, open, id } = useTooltipState();\n</script>\n\n<template>\n  <Slot ref=\"trigger\" :aria-describedby=\"open ? id : undefined\">\n    <slot />\n  </Slot>\n</template>\n","hash":"13ea7ad2c0519ac98b8cfa31dca8d2741cc7e91d4437d14f3d0e5c825c321677"},{"path":"components/communications/ui-tooltip/ui-tooltip.context.ts","content":"import type { Context } from '@/types';\nimport {\n  toRef,\n  useDebounceFn,\n  useElementHover,\n  useEventListener,\n  useFocus,\n  useThrottleFn\n} from '@vueuse/core';\nimport {\n  type InjectionKey,\n  type Ref,\n  inject,\n  provide,\n  ref,\n  useId,\n  watchEffect,\n} from 'vue';\n\ntype TooltipContext = Context<\n  {\n    id: string;\n    open: Ref<boolean>;\n    trigger: Ref<HTMLElement | null>;\n    tooltip: Ref<HTMLElement | null>;\n  },\n  {\n    open: boolean;\n    trigger: 'both' | 'focus' | 'hover';\n    hideDelay: number;\n    showDelay: number;\n  }\n>;\n\nexport type TooltipState = TooltipContext['state'];\n\nexport type TooltipStateOptions = TooltipContext['options'];\n\nconst tooltipStateKey = Symbol() as InjectionKey<TooltipState>;\n\nexport function provideTooltipState({\n  hideDelay,\n  showDelay,\n  ...options\n}: TooltipContext['provideOptions']) {\n  const id = useId();\n  const open = toRef(options.open);\n  const trigger = ref<HTMLElement | null>(null);\n  const tooltip = ref<HTMLElement | null>(null);\n\n  const triggerType = toRef(options.trigger);\n\n  const ignoreHide = ref(false);\n  const ignoreShow = ref(false);\n\n  const hide = useDebounceFn(() => {\n    if (ignoreHide.value) return;\n    open.value = false;\n  }, hideDelay);\n\n  const show = useDebounceFn(() => {\n    if (ignoreShow.value) return;\n    open.value = true;\n  }, showDelay);\n\n  const isTriggerHovered = useElementHover(trigger);\n  const { focused: isTriggerFocused } = useFocus(trigger, {\n    focusVisible: true,\n  });\n  const isTooltipHovered = useElementHover(tooltip);\n\n  const closeOnEscape = useThrottleFn(() => {\n    open.value = false;\n  }, 100);\n\n  watchEffect(() => {\n    const isHovered = triggerType.value !== 'focus' && isTriggerHovered.value;\n    const isFocused = triggerType.value !== 'hover' && isTriggerFocused.value;\n    if (isHovered || isFocused) {\n      ignoreShow.value = false;\n      show();\n      return;\n    }\n    if (open.value) {\n      hide();\n      return;\n    }\n    ignoreShow.value = true;\n  });\n\n  watchEffect(() => {\n    if (!isTooltipHovered.value) {\n      ignoreHide.value = false;\n      hide();\n      return;\n    }\n    open.value = true;\n    ignoreHide.value = true;\n  });\n\n  useEventListener('keydown', (e) => {\n    if (!open.value) return\n    if (e.key !== 'Escape') return;\n      closeOnEscape();\n  })\n\n  const state: TooltipState = {\n    id,\n    open,\n    trigger,\n    tooltip,\n  };\n\n  provide(tooltipStateKey, state);\n\n  return state;\n}\n\nexport function useTooltipState() {\n  const state = inject(tooltipStateKey);\n\n  if (!state) {\n    throw new Error('useTooltipState must be used within a Tooltip component');\n  }\n\n  return state;\n}\n","hash":"20d55a37e922d7b8e36d0d49de169b53cac637dc939be7345d14c07ea2ecdf44"},{"path":"components/communications/ui-tooltip/ui-tooltip.utility.ts","content":"import type { Placement } from '@floating-ui/vue';\nimport type { TooltipVariants } from './ui-tooltip.variants';\n\nconst variantToFloating = {\n  top: 'top',\n  left: 'left',\n  right: 'right',\n  bottom: 'bottom',\n  'top-left': 'top-start',\n  'top-right': 'top-end',\n  'bottom-left': 'bottom-start',\n  'bottom-right': 'bottom-end',\n} satisfies Record<NonNullable<TooltipVariants['placement']>, Placement>;\n\nexport function variantPlacementToFloatingPlacement(\n  placement: TooltipVariants['placement'],\n): Placement {\n  if (!placement) return 'top';\n  return variantToFloating[placement] ?? 'top';\n}\n\nexport function floatingPlacementToVariantPlacement(\n  placement: Placement,\n): NonNullable<TooltipVariants['placement']> {\n  const foundedVariant = Object.entries(variantToFloating).find(\n    (v) => v[1] === placement,\n  ) as [NonNullable<TooltipVariants['placement']>, Placement] | undefined;\n  return foundedVariant?.[0] ?? 'top';\n}\n","hash":"6effd0cee01e4ee2b2df97af5c6745f5e022ded5763f8f8de2eeb5425891e4cd"},{"path":"components/communications/ui-tooltip/ui-tooltip.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva(\n  ['tooltip group/tooltip', 'overflow-hidden', 'relative', 'z-20'],\n  {\n    variants: {\n      placement: {\n        'top-left': ['origin-bottom-right'],\n        top: ['origin-bottom'],\n        'top-right': ['origin-bottom-left'],\n        right: ['origin-left'],\n        'bottom-right': ['origin-top-left'],\n        bottom: ['origin-top'],\n        'bottom-left': ['origin-top-right'],\n        left: ['origin-right'],\n      },\n      variant: {\n        plain: [\n          'max-w-48',\n          'bg-inverse-surface',\n          'inline-flex items-center',\n          'px-xs py-2xs',\n          'rounded-xs',\n          'select-none',\n        ],\n        rich: [\n          'max-w-80',\n          'bg-surface-container',\n          'inline-flex flex-col',\n          'px-md pb-xs pt-sm',\n          'elevation-2',\n          'rounded-md',\n        ],\n      },\n    },\n    defaultVariants: {\n      variant: 'plain',\n      placement: 'top',\n    },\n  },\n);\n\nconst subheadVariants = cva([\n  'tooltip--subhead',\n  'text-balance typography-title-small text-on-surface-variant',\n  'mb-2xs',\n]);\n\nconst textVariants = cva(['tooltip--text text-pretty'], {\n  variants: {\n    variant: {\n      plain: 'typography-body-small text-inverse-on-surface',\n      rich: 'typography-body-medium text-on-surface-variant',\n    },\n  },\n  defaultVariants: {\n    variant: 'plain',\n  },\n});\n\nconst actionsVariants = cva([\n  'tooltip--actions',\n  'items-centeer inline-flex gap-xs',\n  'mt-sm',\n]);\n\nexport const tooltipVariants = Object.assign(variants, {\n  text: textVariants,\n  subhead: subheadVariants,\n  actions: actionsVariants,\n});\n\nexport type TooltipVariants = Variants<typeof tooltipVariants>;\n\nexport type TooltipTextVariants = Variants<typeof textVariants>;\n\nexport type TooltipSubheadVariants = Variants<typeof subheadVariants>;\n\nexport type TooltipActionsVariants = Variants<typeof actionsVariants>;\n","hash":"8eb79059674ad0cc2ed9556f64b8ceccecbf8bb47f6e278c8d84e998c9f820dc"},{"path":"components/communications/ui-tooltip/ui-tooltip.vue","content":"<script setup lang=\"ts\">\nimport { materialDuration } from '@/config';\nimport type { TooltipStateOptions } from './ui-tooltip.context';\nimport { provideTooltipState } from './ui-tooltip.context';\n\nexport type TooltipProps = {\n  trigger?: TooltipStateOptions['trigger'];\n  hideDelay?: TooltipStateOptions['hideDelay'];\n  showDelay?: TooltipStateOptions['showDelay'];\n};\n\nconst {\n  trigger = 'both',\n  hideDelay = materialDuration['short-2'],\n  showDelay = materialDuration['long-2'],\n} = defineProps<TooltipProps>();\n\nconst open = defineModel<boolean>('open', { default: false });\n\nprovideTooltipState({\n  open,\n  trigger: () => trigger,\n  hideDelay: () => hideDelay,\n  showDelay: () => showDelay,\n});\n</script>\n\n<template>\n  <slot />\n</template>\n","hash":"cfff05b602c99ec228671325b3c3b1fb93968cb7a5152943f4256ff41934bc57"},{"path":"components/communications/ui-badge/index.ts","content":"export * from './ui-badge.variants';\nexport { default as Badge, type BadgeProps } from './ui-badge.vue';\n\n","hash":"a16c0523cad1802df892c655b35a017636cdb3c8009387425730e9a67409c915"},{"path":"components/communications/ui-badge/ui-badge.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva(\n  [\n    'badge group/badge',\n    'rounded-full',\n    'z-10',\n    'inline-flex items-center justify-center',\n    'overflow-hidden',\n    'typography-label-small',\n    'pointer-events-none select-none',\n    'transition-box duration-short-2 easing-standard',\n  ],\n  {\n    variants: {\n      size: {\n        small: ['size-1.5'],\n        large: [\n          'h-4',\n          'data-[one-digit=true]:w-4',\n          'data-[one-digit=false]:px-2xs',\n        ],\n      },\n      color: {\n        primary: ['bg-primary', 'text-on-primary'],\n        secondary: ['bg-secondary', 'text-on-secondary'],\n        info: ['bg-info', 'text-on-info'],\n        success: ['bg-success', 'text-on-success'],\n        caution: ['bg-caution', 'text-on-caution'],\n        critical: ['bg-critical', 'text-on-critical'],\n      },\n      placement: {\n        default: [],\n        icon: ['absolute', '-translate-y-full translate-x-full'],\n      },\n    },\n    defaultVariants: {\n      size: 'small',\n      color: 'primary',\n    },\n    compoundVariants: [\n      {\n        size: 'small',\n        placement: 'icon',\n        class: 'top-1.5 right-1.5',\n      },\n      {\n        size: 'large',\n        placement: 'icon',\n        class: 'top-3.5 right-3',\n      },\n    ],\n  },\n);\n\nconst wrapperVariants = cva(['relative', '[&>:not(.badge)]:size-full']);\n\nexport const badgeVariants = Object.assign(variants, {\n  wrapper: wrapperVariants,\n});\n\nexport type BadgeVariants = Variants<typeof badgeVariants>;\n\nexport type BadgeWrapperVariants = Variants<typeof badgeVariants.wrapper>;\n","hash":"213c50e822bcc1a52d9370a259a4ad616ec624b04d815630c2a0a2444f1dadf4"},{"path":"components/communications/ui-badge/ui-badge.vue","content":"<script setup lang=\"ts\">\nimport { computed } from 'vue';\nimport { type BadgeVariants, badgeVariants } from './ui-badge.variants';\nimport { AnimatePresence } from 'motion-v';\nimport { materialDuration, materialEasing, transitionConfig } from '@/config';\nimport {\n  MotionComponent,\n  type MotionComponentProps,\n} from '@/components/utility';\nimport { computedVariants } from '@/composables';\n\nexport type BadgeProps = MotionComponentProps & {\n  color?: BadgeVariants['color'];\n  placement?: BadgeVariants['placement'];\n  value?: number;\n  maxValue?: number;\n};\n\nconst {\n  color,\n  placement,\n  value = 0,\n  maxValue = 999,\n  as = 'div',\n  initial,\n  animate,\n  exit,\n  ...motionProps\n} = defineProps<BadgeProps>();\n\nconst displayValue = computed(() => {\n  if (value < 1) return '';\n  if (value > maxValue) return `${maxValue}+`;\n  return `${value}`;\n});\n\nconst {\n  initial: initialObject,\n  animate: animateObject,\n  exit: exitObject,\n} = computedVariants(() => ({\n  initial,\n  animate,\n  exit,\n}));\n</script>\n\n<template>\n  <MotionComponent\n    :as\n    v-bind=\"motionProps\"\n    :initial=\"{\n      transition: transitionConfig.preset.short.enter.asMotion(),\n      ...initialObject,\n    }\"\n    :animate=\"{\n      transition: transitionConfig.preset.short.beginEnd.asMotion(),\n      ...animateObject,\n    }\"\n    :exit=\"{\n      transition: transitionConfig.preset.short.exit.asMotion(),\n      ...exitObject,\n    }\"\n    :class=\"badgeVariants.wrapper()\"\n  >\n    <slot />\n    <AnimatePresence mode=\"wait\">\n      <MotionComponent\n        v-if=\"value >= 0\"\n        as=\"span\"\n        :data-one-digit=\"value < 10\"\n        :initial=\"{\n          opacity: 0,\n          scale: 0,\n          transition: transitionConfig.preset.short.enter.asMotion(),\n        }\"\n        :animate=\"{\n          opacity: 1,\n          scale: 1,\n          transition: transitionConfig.preset.short.beginEnd.asMotion(),\n        }\"\n        :exit=\"{\n          opacity: 0,\n          scale: 0,\n          transition: transitionConfig.preset.short.exit.asMotion(),\n        }\"\n        :class=\"\n          badgeVariants({\n            size: value < 1 ? 'small' : 'large',\n            color,\n            placement,\n          })\n        \"\n      >\n        <AnimatePresence mode=\"popLayout\">\n          <MotionComponent\n            v-for=\"(char, i) in displayValue.split('')\"\n            as=\"span\"\n            :key=\"char + i\"\n            :initial=\"{\n              y: -20,\n              opacity: 0,\n              transition: transitionConfig.preset.short.enter.asMotion(),\n            }\"\n            :animate=\"{\n              y: 0,\n              opacity: 1,\n              transition: transitionConfig.preset.short.beginEnd.asMotion(),\n            }\"\n            :exit=\"{\n              y: 20,\n              opacity: 0,\n              transition: transitionConfig.preset.short.exit.asMotion(),\n            }\"\n            :transition=\"{\n              duration: materialDuration.asMotion('short-2'),\n              ease: materialEasing.standard,\n            }\"\n          >\n            {{ char }}\n          </MotionComponent>\n        </AnimatePresence>\n      </MotionComponent>\n    </AnimatePresence>\n  </MotionComponent>\n</template>\n","hash":"4cb53029f30c75bdb303eb435faa8cfec1c71bedb1f04a3f856be8c1fc56adf2"},{"path":"components/actions/index.ts","content":"export * from './ui-button';\nexport * from './ui-extended-fab';\nexport * from './ui-fab';\nexport * from './ui-icon-button';\nexport * from './ui-segmented-button';\n\n","hash":"c356c93fad63fd8695199a7ea26ff2ddec0002afa9aa33de02d115712b670230"},{"path":"components/actions/ui-segmented-button/index.ts","content":"export {\n  default as SegmentedButtonGroup,\n  type SegmentedButtonGroupProps,\n} from './ui-segmented-button-group.vue';\nexport * from './ui-segmented-button.variants';\nexport {\n  default as SegmentedButton,\n  type SegmentedButtonProps,\n} from './ui-segmented-button.vue';\n","hash":"989e1ccb6c8eb14ca22ed19564b8e8268d475979b36ba13150d54ede3ec554a8"},{"path":"components/actions/ui-segmented-button/ui-segmented-button-group.vue","content":"<script setup lang=\"ts\">\nimport { provideSegmentedButtonState } from './ui-segmented-button.context';\nimport type {\n  SegmentedButtonGroupStateOptions,\n  SegmentedButtonSelectedValue,\n} from './ui-segmented-button.context';\nimport {\n  type SegmentedButtonGroupVariants,\n  segmentedButtonVariants,\n} from './ui-segmented-button.variants';\nimport { computed } from 'vue';\nimport {\n  MotionComponent,\n  type MotionComponentProps,\n} from '@/components/utility';\nimport { computedVariants } from '@/composables';\nimport { transitionConfig } from '@/config';\n\nexport type SegmentedButtonGroupProps = MotionComponentProps & {\n  density?: SegmentedButtonGroupVariants['density'];\n  color?: SegmentedButtonGroupStateOptions['color'];\n  selectionMode?: SegmentedButtonGroupStateOptions['mode'];\n  disabled?: SegmentedButtonGroupStateOptions['disabled'];\n};\n\nconst {\n  density,\n  color,\n  selectionMode = 'single',\n  disabled = false,\n  as = 'div',\n  initial,\n  animate,\n  exit,\n  ...motionProps\n} = defineProps<SegmentedButtonGroupProps>();\n\nconst selected = defineModel<SegmentedButtonSelectedValue[]>('selected', {\n  default: [],\n});\n\nconst state = provideSegmentedButtonState({\n  mode: () => selectionMode,\n  selected,\n  disabled: () => disabled,\n  color: () => color,\n});\n\nconst extraProps = computed(() => ({\n  ...motionProps,\n  role: state.mode.value === 'single' ? 'radiogroup' : 'toolbar',\n  'aria-disabled': state.disabled.value || disabled ? 'true' : undefined,\n}));\n\nconst {\n  initial: initialObject,\n  animate: animateObject,\n  exit: exitObject,\n} = computedVariants(() => ({\n  initial,\n  animate,\n  exit,\n}));\n</script>\n\n<template>\n  <MotionComponent\n    :as\n    aria-orientation=\"horizontal\"\n    v-bind=\"extraProps\"\n    :initial=\"{\n      transition: transitionConfig.preset.short.enter.asMotion(),\n      ...initialObject,\n    }\"\n    :animate=\"{\n      transition: transitionConfig.preset.short.beginEnd.asMotion(),\n      ...animateObject,\n    }\"\n    :exit=\"{\n      transition: transitionConfig.preset.short.exit.asMotion(),\n      ...exitObject,\n    }\"\n    :class=\"segmentedButtonVariants.group({ density })\"\n  >\n    <slot />\n  </MotionComponent>\n</template>\n","hash":"cc146c49eb48397269741aae5af234c92bc3b2f83318ca3342bc1eb52bd5feca"},{"path":"components/actions/ui-segmented-button/ui-segmented-button.context.ts","content":"import type { Context } from '@/types';\nimport { toRef } from '@vueuse/core';\nimport { type InjectionKey, type Ref, inject, provide } from 'vue';\nimport type { SegmentedButtonVariants } from './ui-segmented-button.variants';\n\ntype SegmentedButtonContext = Context<\n  {\n    mode: Readonly<Ref<'single' | 'multiple'>>;\n    selected: Ref<SegmentedButtonSelectedValue[]>;\n    disabled: Readonly<Ref<boolean>>;\n    color: Ref<SegmentedButtonVariants['color']>;\n    select: (value: SegmentedButtonSelectedValue) => void;\n  },\n  {\n    mode: 'single' | 'multiple';\n    selected: SegmentedButtonSelectedValue[];\n    disabled: boolean;\n    color: SegmentedButtonVariants['color'];\n  }\n>;\n\nexport type SegmentedButtonSelectedValue = string | number;\n\nexport type SegmentedButtonGroupState = SegmentedButtonContext['state'];\n\nexport type SegmentedButtonGroupStateOptions =\n  SegmentedButtonContext['options'];\n\nconst segmentedButtonStateKey =\n  Symbol() as InjectionKey<SegmentedButtonGroupState>;\n\nexport function provideSegmentedButtonState(\n  options: SegmentedButtonContext['provideOptions'],\n) {\n  const mode = toRef(options.mode);\n  const selected = toRef(options.selected);\n  const disabled = toRef(options.disabled);\n  const color = toRef(options.color);\n\n  if (mode.value === 'single') {\n    selected.value = selected.value.slice(0, 1);\n  }\n\n  function select(value: SegmentedButtonSelectedValue) {\n    if (selected.value.includes(value)) {\n      selected.value = selected.value.filter((v) => v !== value);\n      return;\n    }\n    if (mode.value === 'single') {\n      selected.value = [value];\n    } else {\n      selected.value = [...selected.value, value];\n    }\n  }\n\n  const state: SegmentedButtonGroupState = {\n    mode,\n    selected,\n    disabled,\n    color,\n    select,\n  };\n\n  provide(segmentedButtonStateKey, state);\n\n  return state;\n}\n\nexport function useSegmentedButtonState() {\n  const state = inject(segmentedButtonStateKey);\n\n  if (!state) {\n    throw new Error(\n      'useSegmentedButtonState must be used within a SegmentedButtonGroup component',\n    );\n  }\n\n  return state;\n}\n","hash":"e6ef86fbd1306b5443b608284a8334ed8d77669baf5013fe19664db2772e4c54"},{"path":"components/actions/ui-segmented-button/ui-segmented-button.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst groupVariants = cva(\n  [\n    'segmented-button-group group/segmented-button-group',\n    'inline-grid auto-cols-fr grid-flow-col',\n    [\n      '[&>*:first-child]:ml-0 [&>*]:-ml-0.25',\n      '[&>*:first-child]:rounded-l-full [&>*:last-child]:rounded-r-full',\n    ],\n    'transition-box duration-medium-1 easing-standard',\n  ],\n  {\n    variants: {\n      density: {\n        0: 'h-10',\n        [-1]: 'h-9',\n        [-2]: 'h-8',\n        [-3]: 'h-7',\n      },\n    },\n    defaultVariants: {\n      density: 0,\n    },\n  },\n);\n\nconst variants = cva(\n  [\n    'segmented-button segmented-button-group--button group/segmented-button',\n    [\n      'inline-flex items-center justify-center',\n      'relative',\n      'overflow-hidden',\n      'cursor-pointer',\n      'transition-box duration-medium-1 easing-standard',\n      ['ripple-wrapper:inset-0 ripple:bg-current'],\n      [\n        'state-current',\n        'is-hovered:state-hover',\n        'in-focus:state-focus',\n        'is-pressed:state-press',\n      ],\n      ['outline-offset-[3px]', 'in-focus-visible:outline-[3px]'],\n    ],\n    'is-disabled:bg-transparent',\n    ['border outline-none border-outline', 'is-disabled:border-on-surface/38'],\n    ['typography-label-large', 'is-disabled:text-on-surface/38'],\n    'px-sm',\n  ],\n  {\n    variants: {\n      color: {\n        primary: {},\n        secondary: {},\n        info: {},\n        success: {},\n        caution: {},\n        critical: {},\n      },\n      isSelected: {\n        true: {},\n        false: ['text-on-surface', 'state-on-surface'],\n      },\n    },\n    defaultVariants: {\n      isSelected: false,\n      color: 'primary',\n    },\n    compoundVariants: [\n      {\n        color: 'primary',\n        isSelected: true,\n        class: ['bg-primary-container', 'text-on-primary-container'],\n      },\n      {\n        color: 'secondary',\n        isSelected: true,\n        class: ['bg-secondary-container', 'text-on-secondary-container'],\n      },\n      {\n        color: 'info',\n        isSelected: true,\n        class: ['bg-info-container', 'text-on-info-container'],\n      },\n      {\n        color: 'success',\n        isSelected: true,\n        class: ['bg-success-container', 'text-on-success-container'],\n      },\n      {\n        color: 'caution',\n        isSelected: true,\n        class: ['bg-caution-container', 'text-on-caution-container'],\n      },\n      {\n        color: 'critical',\n        isSelected: true,\n        class: ['bg-critical-container', 'text-on-critical-container'],\n      },\n    ],\n  },\n);\n\nconst labelVariants = cva([\n  'segmented-button--label group/segmented-button--label',\n  '[&>svg]:size-4.5 px-2xs',\n]);\n\nconst iconVariants = cva([\n  'segmented-button--icon group/segmented-button--icon',\n  'size-4.5 mr-2xs',\n]);\n\nexport const segmentedButtonVariants = Object.assign(variants, {\n  group: groupVariants,\n  label: labelVariants,\n  icon: iconVariants,\n});\n\nexport type SegmentedButtonVariants = Variants<typeof segmentedButtonVariants>;\n\nexport type SegmentedButtonLabelVariants = Variants<\n  typeof segmentedButtonVariants.label\n>;\n\nexport type SegmentedButtonIconVariants = Variants<\n  typeof segmentedButtonVariants.icon\n>;\n\nexport type SegmentedButtonGroupVariants = Variants<\n  typeof segmentedButtonVariants.group\n>;\n","hash":"02e5d5f77f421c4aee81b3dddd8d7ff199291dd9d1b5f3ce3b3589634e853e7c"},{"path":"components/actions/ui-segmented-button/ui-segmented-button.vue","content":"<script setup lang=\"ts\">\nimport { computedVariants, useRipple, useToggleButton } from '@/composables';\nimport { computed, useTemplateRef } from 'vue';\nimport { useSegmentedButtonState } from './ui-segmented-button.context';\nimport {\n  type SegmentedButtonVariants,\n  segmentedButtonVariants,\n} from './ui-segmented-button.variants';\nimport { AnimatePresence } from 'motion-v';\nimport { IconCheck } from '@tabler/icons-vue';\nimport {\n  MotionComponent,\n  type MotionComponentProps,\n} from '@/components/utility';\nimport { transitionConfig } from '@/config';\n\nexport type SegmentedButtonProps = Omit<MotionComponentProps, 'asChild'> & {\n  value: string | number;\n  color?: SegmentedButtonVariants['color'];\n  iconKey?: string;\n};\n\nconst {\n  value,\n  color: buttonColor,\n  iconKey,\n  as = 'button',\n  initial,\n  animate,\n  exit,\n  ...motionProps\n} = defineProps<SegmentedButtonProps>();\n\nconst element = useTemplateRef<HTMLElement>('segmented-button');\n\nconst {\n  mode,\n  selected,\n  disabled,\n  color: groupColor,\n  select,\n} = useSegmentedButtonState();\n\nconst isSelected = computed(() => selected.value.includes(value));\nconst color = computed(() => buttonColor ?? groupColor.value);\n\nuseToggleButton(element, {\n  isToggleable: true,\n  isSelected,\n  onClick: () => {\n    select(value);\n  },\n  elementType: as === 'button' ? 'button' : '',\n});\nuseRipple(element);\n\nconst checked = computed(() => {\n  if (mode.value !== 'single') return undefined;\n  return isSelected.value;\n});\n\nconst extraProps = computed(() => ({\n  ...motionProps,\n  role: mode.value === 'single' ? 'radio' : undefined,\n  disabled: disabled.value ? true : undefined,\n}));\n\nconst {\n  initial: initialObject,\n  animate: animateObject,\n  exit: exitObject,\n} = computedVariants(() => ({\n  initial,\n  animate,\n  exit,\n}));\n</script>\n\n<template>\n  <MotionComponent\n    ref=\"segmented-button\"\n    :as\n    :aria-checked=\"checked\"\n    v-bind=\"extraProps\"\n    :initial=\"{\n      transition: transitionConfig.preset.short.enter.asMotion(),\n      ...initialObject,\n    }\"\n    :animate=\"{\n      transition: transitionConfig.preset.short.beginEnd.asMotion(),\n      ...animateObject,\n    }\"\n    :exit=\"{\n      transition: transitionConfig.preset.short.exit.asMotion(),\n      ...exitObject,\n    }\"\n    :class=\"\n      segmentedButtonVariants({\n        color,\n        isSelected: isSelected,\n      })\n    \"\n  >\n    <AnimatePresence mode=\"wait\">\n      <MotionComponent\n        as-child\n        v-if=\"isSelected\"\n        :key=\"iconKey\"\n        :initial=\"{\n          width: 0,\n          height: 0,\n          marginRight: 0,\n          opacity: 0,\n          transition: transitionConfig.preset.short.enter.asMotion(),\n        }\"\n        :animate=\"{\n          width: 'var(--spacing-4h)',\n          height: 'var(--spacing-4h)',\n          marginRight: 'var(--spacing-2xs)',\n          opacity: 1,\n          transition: transitionConfig.preset.short.beginEnd.asMotion(),\n        }\"\n        :exit=\"{\n          width: 0,\n          height: 0,\n          marginRight: 0,\n          opacity: 0,\n          transition: transitionConfig.preset.short.exit.asMotion(),\n        }\"\n        :class=\"segmentedButtonVariants.icon()\"\n      >\n        <slot name=\"icon\">\n          <IconCheck />\n        </slot>\n      </MotionComponent>\n    </AnimatePresence>\n    <MotionComponent\n      as=\"span\"\n      :animate=\"{\n        marginLeft: isSelected ? 0 : 'var(--spacing-3q)',\n        marginRight: isSelected ? 0 : 'var(--spacing-3q)',\n        opacity: 1,\n        transition: transitionConfig.preset.short.beginEnd.asMotion(),\n      }\"\n      :class=\"segmentedButtonVariants.label()\"\n      v-tw-merge\n    >\n      <slot />\n    </MotionComponent>\n  </MotionComponent>\n</template>\n","hash":"82a38b92c662bb11a333c020f7c1f83e34e847e830ac8abfea3eb024917872c4"},{"path":"components/actions/ui-icon-button/index.ts","content":"export * from './ui-icon-button.variants';\nexport {\n    default as IconButton,\n    type IconButtonProps\n} from './ui-icon-button.vue';\n\n","hash":"0963854ba7042817933abb962c05622e02144c216b6c1df33feae705e710546c"},{"path":"components/actions/ui-icon-button/ui-icon-button.options.ts","content":"import type { IconButtonVariants } from './ui-icon-button.variants';\n\nexport const iconButtonWidth = {\n  xs: {\n    default: 'var(--spacing-8)',\n    narrow: 'var(--spacing-7)',\n    wide: 'var(--spacing-10)',\n  },\n  sm: {\n    default: 'var(--spacing-10)',\n    narrow: 'var(--spacing-8)',\n    wide: 'var(--spacing-13)',\n  },\n  md: {\n    default: 'var(--spacing-14)',\n    narrow: 'var(--spacing-12)',\n    wide: 'var(--spacing-18)',\n  },\n  lg: {\n    default: 'var(--spacing-24)',\n    narrow: 'var(--spacing-16)',\n    wide: 'var(--spacing-32)',\n  },\n  xl: {\n    default: 'var(--spacing-34)',\n    narrow: 'var(--spacing-26)',\n    wide: 'var(--spacing-46)',\n  },\n} satisfies Record<\n  NonNullable<IconButtonVariants['size']>,\n  Record<NonNullable<IconButtonVariants['width']>, string>\n>;\n\nexport const iconButtonBorderRadius = {\n  rounded: {\n    xs: 'var(--spacing-4)',\n    sm: 'var(--spacing-5)',\n    md: 'var(--spacing-7)',\n    lg: 'var(--spacing-12)',\n    xl: 'var(--spacing-17)',\n  },\n  square: {\n    xs: 'var(--radius-md)',\n    sm: 'var(--radius-md)',\n    md: 'var(--radius-lg)',\n    lg: 'var(--radius-xl)',\n    xl: 'var(--radius-xl)',\n  },\n} satisfies Record<\n  NonNullable<IconButtonVariants['shape']>,\n  Record<NonNullable<IconButtonVariants['size']>, string>\n>;\n\nexport const iconButtonBorderRadiusAlt = {\n  rounded: iconButtonBorderRadius.square,\n  square: iconButtonBorderRadius.rounded,\n} satisfies Record<\n  NonNullable<IconButtonVariants['shape']>,\n  Record<NonNullable<IconButtonVariants['size']>, string>\n>;\n\nexport const iconButtonIconSize = {\n  xs: 'var(--spacing-5)',\n  sm: 'var(--spacing-5)',\n  md: 'var(--spacing-6)',\n  lg: 'var(--spacing-8)',\n  xl: 'var(--spacing-10)',\n} satisfies Record<NonNullable<IconButtonVariants['size']>, string>;\n","hash":"4bcef3d3af62474a1f2033056148938b3b5f89e9721063eeb4ff9e012e2e26c5"},{"path":"components/actions/ui-icon-button/ui-icon-button.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva(\n  [\n    'icon-button group/icon-button',\n    [\n      'inline-flex items-center justify-center',\n      'relative',\n      'cursor-pointer',\n      'transition-box duration-medium-1 easing-standard',\n      ['ripple-wrapper:inset-0 ripple:bg-current'],\n      [\n        'state-current',\n        'is-disabled:state-transparent',\n        'is-disabled:pointer-events-none',\n        'is-hovered:state-hover',\n        'in-focus:state-focus',\n        'is-pressed:state-press',\n      ],\n      ['outline-offset-[3px]', 'in-focus-visible:outline-[3px]'],\n    ],\n  ],\n  {\n    variants: {\n      size: {\n        xs: ['h-8 border', 'typography-label-large'],\n        sm: ['h-10 border', 'typography-label-large'],\n        md: ['h-14 border', 'typography-title-medium'],\n        lg: ['h-24 border-2', 'typography-headline-small'],\n        xl: ['h-34 border-[3px]', 'typography-headline-large'],\n      },\n      shape: {\n        rounded: ['rounded-full'],\n        square: [],\n      },\n      variant: {\n        filled: [\n          'aria-not-pressed:bg-surface-container',\n          'aria-not-pressed:text-on-surface-variant',\n          'is-disabled:bg-on-surface/10',\n          'is-disabled:text-on-surface/38',\n        ],\n        tonal: [\n          'is-disabled:bg-on-surface/10',\n          'is-disabled:text-on-surface/38',\n        ],\n        outlined: [\n          'border-outline-variant aria-pressed:border-transparent',\n          'bg-transparent aria-pressed:bg-inverse-surface',\n          'text-on-surface-variant  aria-pressed:text-inverse-on-surface',\n          'is-disabled:border-outline-variant',\n          'is-disabled:aria-pressed:bg-on-surface/10',\n          'is-disabled:text-on-surface/38',\n        ],\n        standard: ['text-on-surface-variant', 'is-disabled:text-on-surface/38'],\n      },\n      color: {\n        primary: [],\n        secondary: [],\n        info: [],\n        success: [],\n        caution: [],\n        critical: [],\n      },\n      width: {\n        default: [],\n        narrow: [],\n        wide: [],\n      },\n    },\n    defaultVariants: {\n      size: 'sm',\n      shape: 'rounded',\n      variant: 'filled',\n      color: 'primary',\n      width: 'default',\n    },\n    compoundVariants: [\n      {\n        variant: ['filled', 'tonal', 'standard'],\n        class: 'border-0',\n      },\n\n      {\n        size: ['xs', 'sm'],\n        shape: 'square',\n        class: 'rounded-md',\n      },\n      {\n        size: 'md',\n        shape: 'square',\n        class: 'rounded-lg',\n      },\n      {\n        size: ['lg', 'xl'],\n        shape: 'square',\n        class: 'rounded-xl',\n      },\n\n      {\n        size: 'xs',\n        width: 'default',\n        class: 'w-8',\n      },\n      {\n        size: 'sm',\n        width: 'default',\n        class: 'w-10',\n      },\n      {\n        size: 'md',\n        width: 'default',\n        class: 'w-14',\n      },\n      {\n        size: 'lg',\n        width: 'default',\n        class: 'w-24',\n      },\n      {\n        size: 'xl',\n        width: 'default',\n        class: 'w-34',\n      },\n\n      {\n        size: 'xs',\n        width: 'narrow',\n        class: 'w-7',\n      },\n      {\n        size: 'sm',\n        width: 'narrow',\n        class: 'w-8',\n      },\n      {\n        size: 'md',\n        width: 'narrow',\n        class: 'w-12',\n      },\n      {\n        size: 'lg',\n        width: 'narrow',\n        class: 'w-16',\n      },\n      {\n        size: 'xl',\n        width: 'narrow',\n        class: 'w-26',\n      },\n\n      {\n        size: 'xs',\n        width: 'wide',\n        class: 'w-10',\n      },\n      {\n        size: 'sm',\n        width: 'wide',\n        class: 'w-13',\n      },\n      {\n        size: 'md',\n        width: 'wide',\n        class: 'w-18',\n      },\n      {\n        size: 'lg',\n        width: 'wide',\n        class: 'w-32',\n      },\n      {\n        size: 'xl',\n        width: 'wide',\n        class: 'w-46',\n      },\n\n      {\n        variant: 'filled',\n        color: 'primary',\n        class: [\n          'bg-primary aria-pressed:bg-primary',\n          'text-on-primary aria-pressed:text-on-primary',\n        ],\n      },\n      {\n        variant: 'filled',\n        color: 'secondary',\n        class: [\n          'bg-secondary aria-pressed:bg-secondary',\n          'text-on-secondary aria-pressed:text-on-secondary',\n        ],\n      },\n      {\n        variant: 'filled',\n        color: 'info',\n        class: [\n          'bg-info aria-pressed:bg-info',\n          'text-on-info aria-pressed:text-on-info',\n        ],\n      },\n      {\n        variant: 'filled',\n        color: 'success',\n        class: [\n          'bg-success aria-pressed:bg-success',\n          'text-on-success aria-pressed:text-on-success',\n        ],\n      },\n      {\n        variant: 'filled',\n        color: 'caution',\n        class: [\n          'bg-caution aria-pressed:bg-caution',\n          'text-on-caution aria-pressed:text-on-caution',\n        ],\n      },\n      {\n        variant: 'filled',\n        color: 'critical',\n        class: [\n          'bg-critical aria-pressed:bg-critical',\n          'text-on-critical aria-pressed:text-on-critical',\n        ],\n      },\n\n      {\n        variant: 'tonal',\n        color: 'primary',\n        class: [\n          'bg-primary-container aria-pressed:bg-primary',\n          'text-on-primary-container aria-pressed:text-on-primary',\n        ],\n      },\n      {\n        variant: 'tonal',\n        color: 'secondary',\n        class: [\n          'bg-secondary-container aria-pressed:bg-secondary',\n          'text-on-secondary-container aria-pressed:text-on-secondary',\n        ],\n      },\n      {\n        variant: 'tonal',\n        color: 'info',\n        class: [\n          'bg-info-container aria-pressed:bg-info',\n          'text-on-info-container aria-pressed:text-on-info',\n        ],\n      },\n      {\n        variant: 'tonal',\n        color: 'success',\n        class: [\n          'bg-success-container aria-pressed:bg-success',\n          'text-on-success-container aria-pressed:text-on-success',\n        ],\n      },\n      {\n        variant: 'tonal',\n        color: 'caution',\n        class: [\n          'bg-caution-container aria-pressed:bg-caution',\n          'text-on-caution-container aria-pressed:text-on-caution',\n        ],\n      },\n      {\n        variant: 'tonal',\n        color: 'critical',\n        class: [\n          'bg-critical-container aria-pressed:bg-critical',\n          'text-on-critical-container aria-pressed:text-on-critical',\n        ],\n      },\n\n      {\n        variant: 'standard',\n        color: 'primary',\n        class: ['aria-pressed:text-primary'],\n      },\n      {\n        variant: 'standard',\n        color: 'secondary',\n        class: ['aria-pressed:text-secondary'],\n      },\n      {\n        variant: 'standard',\n        color: 'info',\n        class: ['aria-pressed:text-info'],\n      },\n      {\n        variant: 'standard',\n        color: 'success',\n        class: ['aria-pressed:text-success'],\n      },\n      {\n        variant: 'standard',\n        color: 'caution',\n        class: ['aria-pressed:text-caution'],\n      },\n      {\n        variant: 'standard',\n        color: 'critical',\n        class: ['aria-pressed:text-critical'],\n      },\n    ],\n  },\n);\n\nconst iconVariants = cva(['icon-button--icon'], {\n  variants: {\n    size: {\n      xs: ['size-5'],\n      sm: ['size-6'],\n      md: ['size-6'],\n      lg: ['size-8'],\n      xl: ['size-10'],\n    },\n    shape: {\n      rounded: [],\n      square: [],\n    },\n    variant: {\n      filled: [],\n      tonal: [],\n      outlined: [],\n      standard: [],\n    },\n    color: {\n      primary: [],\n      secondary: [],\n      info: [],\n      success: [],\n      caution: [],\n      critical: [],\n    },\n    width: {\n      default: [],\n      narrow: [],\n      wide: [],\n    },\n  },\n  defaultVariants: {\n    size: 'sm',\n    shape: 'rounded',\n    variant: 'filled',\n    color: 'primary',\n    width: 'default',\n  },\n});\n\nexport const iconButtonVariants = Object.assign(variants, {\n  icon: iconVariants,\n});\n\nexport type IconButtonVariants = Variants<typeof iconButtonVariants>;\n\nexport type IconButtonIconVariants = Variants<typeof iconButtonVariants.icon>;\n","hash":"80d1736297c0e3cca597a772b354725f3909e6d76d9fbb8974b7466948957bdd"},{"path":"components/actions/ui-icon-button/ui-icon-button.vue","content":"<script setup lang=\"ts\">\nimport { computedVariants, useRipple, useToggleButton } from '@/composables';\nimport { computed, useTemplateRef } from 'vue';\nimport { AnimatePresence } from 'motion-v';\nimport {\n  type IconButtonVariants,\n  iconButtonVariants,\n} from './ui-icon-button.variants';\nimport {\n  MotionComponent,\n  type MotionComponentProps,\n} from '@/components/utility';\nimport {\n  iconButtonBorderRadius,\n  iconButtonBorderRadiusAlt,\n  iconButtonIconSize,\n  iconButtonWidth,\n} from './ui-icon-button.options';\nimport { transitionConfig } from '@/config';\n\nexport type IconButtonProps = Omit<MotionComponentProps, 'asChild'> & {\n  size?: IconButtonVariants['size'];\n  shape?: IconButtonVariants['shape'];\n  variant?: IconButtonVariants['variant'];\n  color?: IconButtonVariants['color'];\n  width?: IconButtonVariants['width'];\n  toggleable?: boolean;\n  selected?: boolean;\n  iconKey?: string;\n};\n\nconst {\n  size = 'sm',\n  shape = 'rounded',\n  variant = 'filled',\n  color = 'primary',\n  width = 'default',\n  toggleable,\n  selected,\n  as = 'button',\n  iconKey,\n  initial,\n  animate,\n  exit,\n  ...motionProps\n} = defineProps<IconButtonProps>();\n\nconst emit = defineEmits<{\n  select: [];\n}>();\n\nconst elementRef = useTemplateRef<HTMLElement>('icon-button');\n\nconst { isPressed } = useToggleButton(elementRef, {\n  isToggleable: () => toggleable,\n  isSelected: () => selected,\n  onClick: () => {\n    if (!toggleable) return;\n    emit('select');\n  },\n  elementType: as === 'button' ? 'button' : '',\n});\nuseRipple(elementRef);\n\nconst variants = computed(() => ({\n  size,\n  shape,\n  variant,\n  color,\n  width,\n}));\n\nconst borderRadius = computed(() => {\n  if (toggleable) {\n    return selected\n      ? iconButtonBorderRadiusAlt[shape][size]\n      : iconButtonBorderRadius[shape][size];\n  }\n  if (shape === 'rounded' && isPressed.value) {\n    return iconButtonBorderRadiusAlt[shape][size];\n  }\n  return iconButtonBorderRadius[shape][size];\n});\n\nconst buttonWidth = computed(() => {\n  return iconButtonWidth[size][width];\n});\n\nconst {\n  initial: initialObject,\n  animate: animateObject,\n  exit: exitObject,\n} = computedVariants(() => ({\n  initial,\n  animate,\n  exit,\n}));\n</script>\n\n<template>\n  <MotionComponent\n    ref=\"icon-button\"\n    :as\n    tabindex=\"0\"\n    v-bind=\"motionProps\"\n    :initial=\"{\n      width: buttonWidth,\n      borderRadius,\n      transition: transitionConfig.preset.short.enter.asMotion(),\n      ...initialObject,\n    }\"\n    :animate=\"{\n      width: buttonWidth,\n      height: iconButtonWidth[size]['default'],\n      borderRadius,\n      transition: transitionConfig.preset.short.beginEnd.asMotion(),\n      ...animateObject,\n    }\"\n    :exit=\"{\n      transition: transitionConfig.preset.short.exit.asMotion(),\n      ...exitObject,\n    }\"\n    :class=\"iconButtonVariants(variants)\"\n  >\n    <AnimatePresence mode=\"wait\">\n      <MotionComponent\n        as-child\n        :key=\"iconKey\"\n        :initial=\"{\n          width: 0,\n          height: 0,\n          transition: transitionConfig.preset.short.enter.asMotion(),\n        }\"\n        :animate=\"{\n          width: iconButtonIconSize[size],\n          height: iconButtonIconSize[size],\n          transition: transitionConfig.preset.short.beginEnd.asMotion(),\n        }\"\n        :exit=\"{\n          width: 0,\n          height: 0,\n          transition: transitionConfig.preset.short.exit.asMotion(),\n        }\"\n        :class=\"iconButtonVariants.icon(variants)\"\n      >\n        <slot />\n      </MotionComponent>\n    </AnimatePresence>\n  </MotionComponent>\n</template>\n","hash":"c71d610d38a2602f61fc32098a30d6af2780da0c2db139ec889b80b2cb1e33c6"},{"path":"components/actions/ui-fab/index.ts","content":"export * from './ui-fab.variants';\nexport { default as Fab, type FabProps } from './ui-fab.vue';\n\n","hash":"a10c693b3cd67edc85d58e4a4a1854fb51166daee70418c69af1747bece7478a"},{"path":"components/actions/ui-fab/ui-fab.options.ts","content":"import type { FabVariants } from './ui-fab.variants';\n\nexport const fabIconSize = {\n  sm: 'var(--spacing-6)',\n  md: 'var(--spacing-7)',\n  lg: 'var(--spacing-9)',\n} satisfies Record<NonNullable<FabVariants['size']>, string>;\n","hash":"73318386ee11400a87a3aa60c3e914cb9b0a5923dea30ede979653f8b763c627"},{"path":"components/actions/ui-fab/ui-fab.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva(\n  [\n    'fab group/fab',\n    'elevation-3',\n    'is-hovered:elevation-4',\n    'in-focus:elevation-3',\n    'is-pressed:elevation-3',\n    [\n      'inline-flex items-center justify-center',\n      'relative',\n      'cursor-pointer',\n      'transition-box duration-medium-1 easing-standard',\n      ['ripple-wrapper:inset-0 ripple:bg-current'],\n      [\n        'state-current',\n        'is-hovered:state-hover',\n        'in-focus:state-focus',\n        'is-pressed:state-press',\n      ],\n      ['outline-offset-[3px]', 'in-focus-visible:outline-[3px]'],\n    ],\n  ],\n  {\n    variants: {\n      size: {\n        sm: ['size-14 rounded-lg', 'typography-title-medium'],\n        md: ['size-20 rounded-lg-inc', 'typography-title-large'],\n        lg: ['size-24 rounded-xl', 'typography-headline-small'],\n      },\n      variant: {\n        filled: [],\n        tonal: [],\n      },\n      color: {\n        primary: [],\n        secondary: [],\n        info: [],\n        success: [],\n        caution: [],\n        critical: [],\n      },\n    },\n    defaultVariants: {\n      size: 'sm',\n      variant: 'filled',\n      color: 'primary',\n    },\n    compoundVariants: [\n      {\n        variant: 'filled',\n        color: 'primary',\n        class: ['bg-primary', 'text-on-primary'],\n      },\n      {\n        variant: 'filled',\n        color: 'secondary',\n        class: ['bg-secondary', 'text-on-secondary'],\n      },\n      {\n        variant: 'filled',\n        color: 'info',\n        class: ['bg-info', 'text-on-info'],\n      },\n      {\n        variant: 'filled',\n        color: 'success',\n        class: ['bg-success', 'text-on-success'],\n      },\n      {\n        variant: 'filled',\n        color: 'caution',\n        class: ['bg-caution', 'text-on-caution'],\n      },\n      {\n        variant: 'filled',\n        color: 'critical',\n        class: ['bg-critical', 'text-on-critical'],\n      },\n\n      {\n        variant: 'tonal',\n        color: 'primary',\n        class: ['bg-primary-container', 'text-on-primary-container'],\n      },\n      {\n        variant: 'tonal',\n        color: 'secondary',\n        class: ['bg-secondary-container', 'text-on-secondary-container'],\n      },\n      {\n        variant: 'tonal',\n        color: 'info',\n        class: ['bg-info-container', 'text-on-info-container'],\n      },\n      {\n        variant: 'tonal',\n        color: 'success',\n        class: ['bg-success-container', 'text-on-success-container'],\n      },\n      {\n        variant: 'tonal',\n        color: 'caution',\n        class: ['bg-caution-container', 'text-on-caution-container'],\n      },\n      {\n        variant: 'tonal',\n        color: 'critical',\n        class: ['bg-critical-container', 'text-on-critical-container'],\n      },\n    ],\n  },\n);\n\nconst iconVariants = cva(['fab--icon'], {\n  variants: {\n    size: {\n      sm: ['size-6'],\n      md: ['size-7'],\n      lg: ['size-9'],\n    },\n    variant: {\n      filled: [],\n      tonal: [],\n    },\n    color: {\n      primary: [],\n      secondary: [],\n      info: [],\n      success: [],\n      caution: [],\n      critical: [],\n    },\n  },\n  defaultVariants: {\n    size: 'sm',\n    variant: 'filled',\n    color: 'primary',\n  },\n  compoundVariants: [],\n});\n\nexport const fabVariants = Object.assign(variants, {\n  icon: iconVariants,\n});\n\nexport type FabVariants = Variants<typeof fabVariants>;\n\nexport type FabIconVariants = Variants<typeof fabVariants.icon>;\n","hash":"da797bab36fc9f638b6b89a029214eb1df9c583998bfb80116c387afcaa703fc"},{"path":"components/actions/ui-fab/ui-fab.vue","content":"<script setup lang=\"ts\">\nimport { computedVariants, useButton, useRipple } from '@/composables';\nimport { AnimatePresence } from 'motion-v';\nimport { computed, useTemplateRef } from 'vue';\nimport { type FabVariants, fabVariants } from './ui-fab.variants';\nimport { fabIconSize } from './ui-fab.options';\nimport {\n  MotionComponent,\n  type MotionComponentProps,\n} from '@/components/utility';\nimport { transitionConfig } from '@/config';\n\nexport type FabProps = Omit<MotionComponentProps, 'asChild'> & {\n  size?: FabVariants['size'];\n  variant?: FabVariants['variant'];\n  color?: FabVariants['color'];\n  iconKey?: string;\n};\n\nconst {\n  size = 'sm',\n  variant = 'filled',\n  color = 'primary',\n  as = 'button',\n  iconKey,\n  initial,\n  animate,\n  exit,\n  ...motionProps\n} = defineProps<FabProps>();\n\nconst elementRef = useTemplateRef<HTMLElement>('fab');\n\nuseButton(elementRef, {\n  elementType: as === 'button' ? 'button' : '',\n  interaction: { disabled: false },\n});\nuseRipple(elementRef);\n\nconst variants = computed(() => ({\n  size,\n  variant,\n  color,\n}));\n\nconst {\n  initial: initialObject,\n  animate: animateObject,\n  exit: exitObject,\n} = computedVariants(() => ({\n  initial,\n  animate,\n  exit,\n}));\n</script>\n\n<template>\n  <MotionComponent\n    ref=\"fab\"\n    :as\n    tabindex=\"0\"\n    v-bind=\"motionProps\"\n    :initial=\"{\n      transition: transitionConfig.preset.short.enter.asMotion(),\n      ...initialObject,\n    }\"\n    :animate=\"{\n      transition: transitionConfig.preset.short.beginEnd.asMotion(),\n      ...animateObject,\n    }\"\n    :exit=\"{\n      transition: transitionConfig.preset.short.exit.asMotion(),\n      ...exitObject,\n    }\"\n    :class=\"fabVariants(variants)\"\n  >\n    <AnimatePresence mode=\"wait\">\n      <MotionComponent\n        as-child\n        :key=\"iconKey\"\n        :initial=\"{\n          width: 0,\n          height: 0,\n          transition: transitionConfig.preset.short.enter.asMotion(),\n        }\"\n        :animate=\"{\n          width: fabIconSize[size],\n          height: fabIconSize[size],\n          transition: transitionConfig.preset.short.beginEnd.asMotion(),\n        }\"\n        :exit=\"{\n          width: 0,\n          height: 0,\n          transition: transitionConfig.preset.short.exit.asMotion(),\n        }\"\n        :class=\"fabVariants.icon(variants)\"\n      >\n        <slot />\n      </MotionComponent>\n    </AnimatePresence>\n  </MotionComponent>\n</template>\n","hash":"4101dc1acf0dc0d845eb3c1fd8619637cfc328abd45cbba54d82ea039cff8c28"},{"path":"components/actions/ui-extended-fab/index.ts","content":"export * from './ui-extended-fab.variants';\nexport {\n    default as ExtendedFab,\n    type ExtendedFabProps\n} from './ui-extended-fab.vue';\n\n","hash":"52e0b43e7f55521032eb0495f0840447f15625a62b3f85f76a7cffcc456ecbda"},{"path":"components/actions/ui-extended-fab/ui-extended-fab.options.ts","content":"import type { ExtendedFabVariants } from './ui-extended-fab.variants';\n\nexport const extendedFabIconSize = {\n  sm: 'var(--spacing-6)',\n  md: 'var(--spacing-7)',\n  lg: 'var(--spacing-9)',\n} satisfies Record<NonNullable<ExtendedFabVariants['size']>, string>;\n\nexport const extendedFabIconMargin = {\n  sm: 'var(--spacing-2)',\n  md: 'var(--spacing-3)',\n  lg: 'var(--spacing-4)',\n} satisfies Record<NonNullable<ExtendedFabVariants['size']>, string>;\n","hash":"1d657d492787dab112278623cfc62b63af3b7b119fa371c60dae7575f04dd341"},{"path":"components/actions/ui-extended-fab/ui-extended-fab.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva(\n  [\n    'extended-fab group/extended-fab',\n    'min-w-20',\n    'overflow-hidden',\n    'elevation-3',\n    'is-hovered:elevation-4',\n    'in-focus:elevation-3',\n    'is-pressed:elevation-3',\n    [\n      'inline-flex items-center justify-center',\n      'relative',\n      'cursor-pointer',\n      'transition-box duration-medium-1 easing-standard',\n      ['ripple-wrapper:inset-0 ripple:bg-current'],\n      [\n        'state-current',\n        'is-hovered:state-hover',\n        'in-focus:state-focus',\n        'is-pressed:state-press',\n      ],\n      ['outline-offset-[3px]', 'in-focus-visible:outline-[3px]'],\n    ],\n  ],\n  {\n    variants: {\n      size: {\n        sm: ['h-14 px-4 rounded-lg', 'typography-title-medium'],\n        md: ['h-20 px-6.5 rounded-lg-inc', 'typography-title-large'],\n        lg: ['h-24 px-7 rounded-xl', 'typography-headline-small'],\n      },\n      variant: {\n        filled: [],\n        tonal: [],\n      },\n      color: {\n        primary: [],\n        secondary: [],\n        info: [],\n        success: [],\n        caution: [],\n        critical: [],\n      },\n    },\n    defaultVariants: {\n      size: 'sm',\n      variant: 'filled',\n      color: 'primary',\n    },\n    compoundVariants: [\n      {\n        variant: 'filled',\n        color: 'primary',\n        class: ['bg-primary', 'text-on-primary'],\n      },\n      {\n        variant: 'filled',\n        color: 'secondary',\n        class: ['bg-secondary', 'text-on-secondary'],\n      },\n      {\n        variant: 'filled',\n        color: 'info',\n        class: ['bg-info', 'text-on-info'],\n      },\n      {\n        variant: 'filled',\n        color: 'success',\n        class: ['bg-success', 'text-on-success'],\n      },\n      {\n        variant: 'filled',\n        color: 'caution',\n        class: ['bg-caution', 'text-on-caution'],\n      },\n      {\n        variant: 'filled',\n        color: 'critical',\n        class: ['bg-critical', 'text-on-critical'],\n      },\n\n      {\n        variant: 'tonal',\n        color: 'primary',\n        class: ['bg-primary-container', 'text-on-primary-container'],\n      },\n      {\n        variant: 'tonal',\n        color: 'secondary',\n        class: ['bg-secondary-container', 'text-on-secondary-container'],\n      },\n      {\n        variant: 'tonal',\n        color: 'info',\n        class: ['bg-info-container', 'text-on-info-container'],\n      },\n      {\n        variant: 'tonal',\n        color: 'success',\n        class: ['bg-success-container', 'text-on-success-container'],\n      },\n      {\n        variant: 'tonal',\n        color: 'caution',\n        class: ['bg-caution-container', 'text-on-caution-container'],\n      },\n      {\n        variant: 'tonal',\n        color: 'critical',\n        class: ['bg-critical-container', 'text-on-critical-container'],\n      },\n    ],\n  },\n);\n\nconst iconVariants = cva(['extended-fab--icon'], {\n  variants: {\n    size: {\n      sm: ['size-6 mr-2'],\n      md: ['size-7 mr-3'],\n      lg: ['size-9 mr-4'],\n    },\n    variant: {\n      filled: [],\n      tonal: [],\n    },\n    color: {\n      primary: [],\n      secondary: [],\n      info: [],\n      success: [],\n      caution: [],\n      critical: [],\n    },\n  },\n  defaultVariants: {\n    size: 'sm',\n    variant: 'filled',\n    color: 'primary',\n  },\n  compoundVariants: [],\n});\n\nconst labelVariants = cva(['extended-fab--label'], {\n  variants: {\n    size: {\n      sm: [],\n      md: [],\n      lg: [],\n    },\n    variant: {\n      filled: [],\n      tonal: [],\n    },\n    color: {\n      primary: [],\n      secondary: [],\n      info: [],\n      success: [],\n      caution: [],\n      critical: [],\n    },\n  },\n  defaultVariants: {\n    size: 'sm',\n    variant: 'filled',\n    color: 'primary',\n  },\n  compoundVariants: [],\n});\n\nexport const extendedFabVariants = Object.assign(variants, {\n  icon: iconVariants,\n  label: labelVariants,\n});\n\nexport type ExtendedFabVariants = Variants<typeof extendedFabVariants>;\n\nexport type ExtendedFabIconVariants = Variants<typeof extendedFabVariants.icon>;\n\nexport type ExtendedFabLabelVariants = Variants<\n  typeof extendedFabVariants.label\n>;\n","hash":"4bfd77bda327b78c9fb18a951e17516939dc4795d75a0f6ae4f4b46dcc40cbb0"},{"path":"components/actions/ui-extended-fab/ui-extended-fab.vue","content":"<script setup lang=\"ts\">\nimport { computedVariants, useButton, useRipple } from '@/composables';\nimport { AnimatePresence } from 'motion-v';\nimport { computed, useTemplateRef } from 'vue';\nimport {\n  type ExtendedFabVariants,\n  extendedFabVariants,\n} from './ui-extended-fab.variants';\nimport {\n  MotionComponent,\n  type MotionComponentProps,\n} from '@/components/utility';\nimport {\n  extendedFabIconMargin,\n  extendedFabIconSize,\n} from './ui-extended-fab.options';\nimport { transitionConfig } from '@/config';\n\nexport type ExtendedFabProps = Omit<MotionComponentProps, 'asChild'> & {\n  size?: ExtendedFabVariants['size'];\n  variant?: ExtendedFabVariants['variant'];\n  color?: ExtendedFabVariants['color'];\n  iconKey?: string;\n};\n\nconst {\n  size = 'sm',\n  variant = 'filled',\n  color = 'primary',\n  as = 'button',\n  iconKey,\n  initial,\n  animate,\n  exit,\n  ...motionProps\n} = defineProps<ExtendedFabProps>();\n\nconst elementRef = useTemplateRef<HTMLElement>('extended-fab');\n\nuseButton(elementRef, {\n  elementType: as === 'button' ? 'button' : '',\n  interaction: { disabled: false },\n});\nuseRipple(elementRef);\n\nconst variants = computed(() => ({\n  size,\n  variant,\n  color,\n}));\n\nconst {\n  initial: initialObject,\n  animate: animateObject,\n  exit: exitObject,\n} = computedVariants(() => ({\n  initial,\n  animate,\n  exit,\n}));\n</script>\n\n<template>\n  <MotionComponent\n    ref=\"extended-fab\"\n    :as\n    tabindex=\"0\"\n    v-bind=\"motionProps\"\n    :initial=\"{\n      transition: transitionConfig.preset.short.enter.asMotion(),\n      ...initialObject,\n    }\"\n    :animate=\"{\n      transition: transitionConfig.preset.short.beginEnd.asMotion(),\n      ...animateObject,\n    }\"\n    :exit=\"{\n      transition: transitionConfig.preset.short.exit.asMotion(),\n      ...exitObject,\n    }\"\n    :class=\"extendedFabVariants(variants)\"\n  >\n    <AnimatePresence mode=\"wait\">\n      <MotionComponent\n        as-child\n        v-if=\"$slots.icon\"\n        :key=\"iconKey\"\n        :initial=\"{\n          width: 0,\n          height: 0,\n          marginRight: 0,\n          transition: transitionConfig.preset.short.enter.asMotion(),\n        }\"\n        :animate=\"{\n          width: extendedFabIconSize[size],\n          height: extendedFabIconSize[size],\n          marginRight: extendedFabIconMargin[size],\n          transition: transitionConfig.preset.short.beginEnd.asMotion(),\n        }\"\n        :exit=\"{\n          width: 0,\n          height: 0,\n          marginRight: 0,\n          transition: transitionConfig.preset.short.exit.asMotion(),\n        }\"\n        :class=\"extendedFabVariants.icon(variants)\"\n      >\n        <slot name=\"icon\" />\n      </MotionComponent>\n    </AnimatePresence>\n    <MotionComponent\n      as=\"span\"\n      :variants=\"{\n        enter: {\n          width: 0,\n          opacity: 0,\n          transition: transitionConfig.preset.short.enter.asMotion(),\n        },\n        default: {\n          width: 'max-content',\n          opacity: 1,\n          transition: transitionConfig.preset.short.beginEnd.asMotion(),\n        },\n        exit: {\n          width: 0,\n          opacity: 0,\n          transition: transitionConfig.preset.short.exit.asMotion(),\n        },\n      }\"\n      initial=\"enter\"\n      animate=\"default\"\n      exit=\"exit\"\n      :class=\"extendedFabVariants.label(variants)\"\n    >\n      <slot />\n    </MotionComponent>\n  </MotionComponent>\n</template>\n","hash":"aba96d2e008b254458da2f98dc406f2fb08122d1e81cb09c21ae90a85e803b9e"},{"path":"components/actions/ui-button/index.ts","content":"export * from './ui-button.variants';\nexport { default as Button, type ButtonProps } from './ui-button.vue';\n","hash":"1a460432726ef85804185e613d78ef25575e6929036804cff653a9fbb9e1548e"},{"path":"components/actions/ui-button/ui-button.options.ts","content":"import type { ButtonVariants } from './ui-button.variants';\n\nexport const buttonBorderRadius = {\n  rounded: {\n    xs: 'var(--spacing-4)',\n    sm: 'var(--spacing-5)',\n    md: 'var(--spacing-7)',\n    lg: 'var(--spacing-12)',\n    xl: 'var(--spacing-17)',\n  },\n  square: {\n    xs: 'var(--radius-md)',\n    sm: 'var(--radius-md)',\n    md: 'var(--radius-lg)',\n    lg: 'var(--radius-xl)',\n    xl: 'var(--radius-xl)',\n  },\n} satisfies Record<\n  NonNullable<ButtonVariants['shape']>,\n  Record<NonNullable<ButtonVariants['size']>, string>\n>;\n\nexport const buttonBorderRadiusAlt = {\n  rounded: buttonBorderRadius.square,\n  square: buttonBorderRadius.rounded,\n} satisfies Record<\n  NonNullable<ButtonVariants['shape']>,\n  Record<NonNullable<ButtonVariants['size']>, string>\n>;\n\nexport const buttonIconSize = {\n  xs: 'var(--spacing-5)',\n  sm: 'var(--spacing-5)',\n  md: 'var(--spacing-6)',\n  lg: 'var(--spacing-8)',\n  xl: 'var(--spacing-10)',\n} satisfies Record<NonNullable<ButtonVariants['size']>, string>;\n\n\nexport const buttonIconMargin = {\n  xs: 'var(--spacing-1)',\n  sm: 'var(--spacing-2)',\n  md: 'var(--spacing-2)',\n  lg: 'var(--spacing-3)',\n  xl: 'var(--spacing-4)',\n} satisfies Record<NonNullable<ButtonVariants['size']>, string>;\n","hash":"788d5bc480724018e8561eaa2feeebc12d4cedaa7620733c6465ea4734c33d47"},{"path":"components/actions/ui-button/ui-button.variants.ts","content":"import type { Variants } from '@/types';\nimport { cva } from 'class-variance-authority';\n\nconst variants = cva(\n  [\n    'button group/button',\n    [\n      'inline-flex items-center justify-center',\n      'relative',\n      'cursor-pointer',\n      'transition-box duration-medium-1 easing-standard',\n      ['ripple-wrapper:inset-0 ripple:bg-current'],\n      [\n        'state-current',\n        'is-disabled:state-transparent',\n        'is-disabled:pointer-events-none',\n        'is-hovered:state-hover',\n        'in-focus:state-focus',\n        'is-pressed:state-press',\n      ],\n      ['outline-offset-[3px]', 'in-focus-visible:outline-[3px]'],\n    ],\n  ],\n  {\n    variants: {\n      size: {\n        xs: ['h-8 px-3 border', 'typography-label-large'],\n        sm: ['h-10 px-4 border', 'typography-label-large'],\n        md: ['h-14 px-6 border', 'typography-title-medium'],\n        lg: ['h-24 px-12 border-2', 'typography-headline-small'],\n        xl: ['h-34 px-16 border-[3px]', 'typography-headline-large'],\n      },\n      shape: {\n        rounded: ['rounded-full'],\n        square: [],\n      },\n      variant: {\n        elevated: [\n          'bg-surface-container-low',\n          'is-disabled:bg-on-surface/10',\n          'is-disabled:text-on-surface/38',\n          'elevation-1',\n          'is-hovered:elevation-2',\n          'in-focus:elevation-1',\n          'is-pressed:elevation-1',\n          'is-disabled:elevation-0',\n        ],\n        filled: [\n          'aria-not-pressed:bg-surface-container',\n          'aria-not-pressed:text-on-surface-variant',\n          'is-disabled:bg-on-surface/10',\n          'is-disabled:text-on-surface/38',\n          'elevation-0',\n          'is-hovered:elevation-1',\n          'in-focus:elevation-0',\n          'is-pressed:elevation-0',\n          'is-disabled:elevation-0',\n        ],\n        tonal: [\n          'is-disabled:bg-on-surface/10',\n          'is-disabled:text-on-surface/38',\n          'elevation-0',\n          'is-hovered:elevation-1',\n          'in-focus:elevation-0',\n          'is-pressed:elevation-0',\n          'is-disabled:elevation-0',\n        ],\n        outlined: [\n          'border-outline-variant aria-pressed:border-transparent',\n          'bg-transparent aria-pressed:bg-inverse-surface',\n          'text-on-surface-variant  aria-pressed:text-inverse-on-surface',\n          'is-disabled:border-outline-variant',\n          'is-disabled:aria-pressed:bg-on-surface/10',\n          'is-disabled:text-on-surface/38',\n        ],\n        text: ['is-disabled:text-on-surface/38', 'elevation-0'],\n      },\n      color: {\n        primary: [],\n        secondary: [],\n        info: [],\n        success: [],\n        caution: [],\n        critical: [],\n      },\n    },\n    defaultVariants: {\n      size: 'sm',\n      shape: 'rounded',\n      variant: 'filled',\n      color: 'primary',\n    },\n    compoundVariants: [\n      {\n        variant: ['elevated', 'filled', 'tonal', 'text'],\n        class: 'border-0',\n      },\n\n      {\n        size: ['xs', 'sm'],\n        shape: 'square',\n        class: 'rounded-md',\n      },\n      {\n        size: 'md',\n        shape: 'square',\n        class: 'rounded-lg',\n      },\n      {\n        size: ['lg', 'xl'],\n        shape: 'square',\n        class: 'rounded-xl',\n      },\n\n      {\n        variant: 'elevated',\n        color: 'primary',\n        class: [\n          'aria-pressed:bg-primary',\n          'text-primary aria-pressed:text-on-primary',\n        ],\n      },\n      {\n        variant: 'elevated',\n        color: 'secondary',\n        class: [\n          'aria-pressed:bg-secondary',\n          'text-secondary aria-pressed:text-on-secondary',\n        ],\n      },\n      {\n        variant: 'elevated',\n        color: 'info',\n        class: ['aria-pressed:bg-info', 'text-info aria-pressed:text-on-info'],\n      },\n      {\n        variant: 'elevated',\n        color: 'success',\n        class: [\n          'aria-pressed:bg-success',\n          'text-success aria-pressed:text-on-success',\n        ],\n      },\n      {\n        variant: 'elevated',\n        color: 'caution',\n        class: [\n          'aria-pressed:bg-caution',\n          'text-caution aria-pressed:text-on-caution',\n        ],\n      },\n      {\n        variant: 'elevated',\n        color: 'critical',\n        class: [\n          'aria-pressed:bg-critical',\n          'text-critical aria-pressed:text-on-critical',\n        ],\n      },\n\n      {\n        variant: 'filled',\n        color: 'primary',\n        class: [\n          'bg-primary aria-pressed:bg-primary',\n          'text-on-primary aria-pressed:text-on-primary',\n        ],\n      },\n      {\n        variant: 'filled',\n        color: 'secondary',\n        class: [\n          'bg-secondary aria-pressed:bg-secondary',\n          'text-on-secondary aria-pressed:text-on-secondary',\n        ],\n      },\n      {\n        variant: 'filled',\n        color: 'info',\n        class: [\n          'bg-info aria-pressed:bg-info',\n          'text-on-info aria-pressed:text-on-info',\n        ],\n      },\n      {\n        variant: 'filled',\n        color: 'success',\n        class: [\n          'bg-success aria-pressed:bg-success',\n          'text-on-success aria-pressed:text-on-success',\n        ],\n      },\n      {\n        variant: 'filled',\n        color: 'caution',\n        class: [\n          'bg-caution aria-pressed:bg-caution',\n          'text-on-caution aria-pressed:text-on-caution',\n        ],\n      },\n      {\n        variant: 'filled',\n        color: 'critical',\n        class: [\n          'bg-critical aria-pressed:bg-critical',\n          'text-on-critical aria-pressed:text-on-critical',\n        ],\n      },\n\n      {\n        variant: 'tonal',\n        color: 'primary',\n        class: [\n          'bg-primary-container aria-pressed:bg-primary',\n          'text-on-primary-container aria-pressed:text-on-primary',\n        ],\n      },\n      {\n        variant: 'tonal',\n        color: 'secondary',\n        class: [\n          'bg-secondary-container aria-pressed:bg-secondary',\n          'text-on-secondary-container aria-pressed:text-on-secondary',\n        ],\n      },\n      {\n        variant: 'tonal',\n        color: 'info',\n        class: [\n          'bg-info-container aria-pressed:bg-info',\n          'text-on-info-container aria-pressed:text-on-info',\n        ],\n      },\n      {\n        variant: 'tonal',\n        color: 'success',\n        class: [\n          'bg-success-container aria-pressed:bg-success',\n          'text-on-success-container aria-pressed:text-on-success',\n        ],\n      },\n      {\n        variant: 'tonal',\n        color: 'caution',\n        class: [\n          'bg-caution-container aria-pressed:bg-caution',\n          'text-on-caution-container aria-pressed:text-on-caution',\n        ],\n      },\n      {\n        variant: 'tonal',\n        color: 'critical',\n        class: [\n          'bg-critical-container aria-pressed:bg-critical',\n          'text-on-critical-container aria-pressed:text-on-critical',\n        ],\n      },\n\n      {\n        variant: 'text',\n        color: 'primary',\n        class: ['text-primary'],\n      },\n      {\n        variant: 'text',\n        color: 'secondary',\n        class: ['text-secondary'],\n      },\n      {\n        variant: 'text',\n        color: 'info',\n        class: ['text-info'],\n      },\n      {\n        variant: 'text',\n        color: 'success',\n        class: ['text-success'],\n      },\n      {\n        variant: 'text',\n        color: 'caution',\n        class: ['text-caution'],\n      },\n      {\n        variant: 'text',\n        color: 'critical',\n        class: ['text-critical'],\n      },\n    ],\n  },\n);\n\nconst iconVariants = cva(['button--icon'], {\n  variants: {\n    size: {\n      xs: ['size-5'],\n      sm: ['size-5'],\n      md: ['size-6'],\n      lg: ['size-8'],\n      xl: ['size-10'],\n    },\n    shape: {\n      rounded: [],\n      square: [],\n    },\n    variant: {\n      elevated: [],\n      filled: [],\n      tonal: [],\n      outlined: [],\n      text: [],\n    },\n    color: {\n      primary: [],\n      secondary: [],\n      info: [],\n      success: [],\n      caution: [],\n      critical: [],\n    },\n    position: {\n      leading: [],\n      trailing: [],\n    },\n  },\n  defaultVariants: {\n    size: 'sm',\n    shape: 'rounded',\n    variant: 'filled',\n    color: 'primary',\n  },\n  compoundVariants: [\n    {\n      position: 'leading',\n      size: 'xs',\n      class: 'mr-1',\n    },\n    {\n      position: 'leading',\n      size: ['sm', 'md'],\n      class: 'mr-2',\n    },\n    {\n      position: 'leading',\n      size: 'lg',\n      class: 'mr-3',\n    },\n    {\n      position: 'leading',\n      size: 'xl',\n      class: 'mr-4',\n    },\n    {\n      position: 'trailing',\n      size: 'xs',\n      class: 'ml-1',\n    },\n    {\n      position: 'trailing',\n      size: ['sm', 'md'],\n      class: 'ml-2',\n    },\n    {\n      position: 'trailing',\n      size: 'lg',\n      class: 'ml-3',\n    },\n    {\n      position: 'trailing',\n      size: 'xl',\n      class: 'ml-4',\n    },\n  ],\n});\n\nconst labelVariants = cva(['button--label'], {\n  variants: {\n    size: {\n      xs: [],\n      sm: [],\n      md: [],\n      lg: [],\n      xl: [],\n    },\n    shape: {\n      rounded: [],\n      square: [],\n    },\n    variant: {\n      elevated: [],\n      filled: [],\n      tonal: [],\n      outlined: [],\n      text: [],\n    },\n    color: {\n      primary: [],\n      secondary: [],\n      info: [],\n      success: [],\n      caution: [],\n      critical: [],\n    },\n  },\n  defaultVariants: {\n    size: 'sm',\n    shape: 'rounded',\n    variant: 'filled',\n    color: 'primary',\n  },\n  compoundVariants: [],\n});\n\nexport const buttonVariants = Object.assign(variants, {\n  icon: iconVariants,\n  label: labelVariants,\n});\n\nexport type ButtonVariants = Variants<typeof buttonVariants>;\n\nexport type ButtonIconVariants = Variants<typeof buttonVariants.icon>;\n\nexport type ButtonLabelVariants = Variants<typeof buttonVariants.label>;\n","hash":"0d1811fbf4b8dd69ce0a94720146b74091a72e21d2233729c04e899454e43d83"},{"path":"components/actions/ui-button/ui-button.vue","content":"<script setup lang=\"ts\">\nimport { computedVariants, useRipple, useToggleButton } from '@/composables';\nimport { computed, useTemplateRef } from 'vue';\nimport { type ButtonVariants, buttonVariants } from './ui-button.variants';\nimport { AnimatePresence } from 'motion-v';\nimport {\n  buttonBorderRadius,\n  buttonBorderRadiusAlt,\n  buttonIconMargin,\n  buttonIconSize,\n} from './ui-button.options';\nimport {\n  MotionComponent,\n  type MotionComponentProps,\n} from '@/components/utility';\nimport { transitionConfig } from '@/config';\n\nexport type ButtonProps = Omit<MotionComponentProps, 'asChild'> & {\n  size?: ButtonVariants['size'];\n  shape?: ButtonVariants['shape'];\n  variant?: ButtonVariants['variant'];\n  color?: ButtonVariants['color'];\n  toggleable?: boolean;\n  selected?: boolean;\n  leadingKey?: string;\n  trailingKey?: string;\n};\n\nconst {\n  size = 'sm',\n  shape = 'rounded',\n  variant = 'filled',\n  color = 'primary',\n  toggleable,\n  selected,\n  as = 'button',\n  leadingKey,\n  trailingKey,\n  initial,\n  animate,\n  exit,\n  ...motionProps\n} = defineProps<ButtonProps>();\n\nconst emit = defineEmits<{\n  select: [];\n}>();\n\nconst elementRef = useTemplateRef<HTMLElement>('button');\n\nconst { isPressed } = useToggleButton(elementRef, {\n  isToggleable: () => toggleable,\n  isSelected: () => selected,\n  onClick: () => {\n    if (!toggleable) return;\n    emit('select');\n  },\n  elementType: as === 'button' ? 'button' : '',\n});\nuseRipple(elementRef);\n\nconst variants = computed(() => ({\n  size,\n  shape,\n  variant,\n  color,\n}));\n\nconst borderRadius = computed(() => {\n  if (toggleable) {\n    return selected\n      ? buttonBorderRadiusAlt[shape][size]\n      : buttonBorderRadius[shape][size];\n  }\n  if (shape === 'rounded' && isPressed.value) {\n    return buttonBorderRadiusAlt[shape][size];\n  }\n  return buttonBorderRadius[shape][size];\n});\n\nconst {\n  initial: initialObject,\n  animate: animateObject,\n  exit: exitObject,\n} = computedVariants(() => ({\n  initial,\n  animate,\n  exit,\n}));\n</script>\n\n<template>\n  <MotionComponent\n    ref=\"button\"\n    :as\n    tabindex=\"0\"\n    v-bind=\"motionProps\"\n    :initial=\"{\n      borderRadius,\n      transition: transitionConfig.preset.short.enter.asMotion(),\n      ...initialObject,\n    }\"\n    :animate=\"{\n      borderRadius,\n      transition: transitionConfig.preset.short.beginEnd.asMotion(),\n      ...animateObject,\n    }\"\n    :exit=\"{\n      transition: transitionConfig.preset.short.exit.asMotion(),\n      ...exitObject,\n    }\"\n    :class=\"buttonVariants(variants)\"\n  >\n    <AnimatePresence mode=\"wait\">\n      <MotionComponent\n        as-child\n        v-if=\"$slots.leading\"\n        :key=\"leadingKey\"\n        :initial=\"{\n          width: 0,\n          height: 0,\n          marginRight: 0,\n          transition: transitionConfig.preset.short.enter.asMotion(),\n        }\"\n        :animate=\"{\n          width: buttonIconSize[size],\n          height: buttonIconSize[size],\n          marginRight: buttonIconMargin[size],\n          transition: transitionConfig.preset.short.beginEnd.asMotion(),\n        }\"\n        :exit=\"{\n          width: 0,\n          height: 0,\n          marginRight: 0,\n          transition: transitionConfig.preset.short.exit.asMotion(),\n        }\"\n        :class=\"buttonVariants.icon({ ...variants, position: 'leading' })\"\n      >\n        <slot name=\"leading\" />\n      </MotionComponent>\n    </AnimatePresence>\n    <span :class=\"buttonVariants.label(variants)\" v-tw-merge>\n      <slot />\n    </span>\n    <AnimatePresence mode=\"wait\">\n      <MotionComponent\n        as-child\n        v-if=\"$slots.trailing\"\n        :key=\"trailingKey\"\n        :initial=\"{\n          width: 0,\n          height: 0,\n          marginLeft: 0,\n          transition: transitionConfig.preset.short.enter.asMotion(),\n        }\"\n        :animate=\"{\n          width: buttonIconSize[size],\n          height: buttonIconSize[size],\n          marginLeft: buttonIconMargin[size],\n          transition: transitionConfig.preset.short.beginEnd.asMotion(),\n        }\"\n        :exit=\"{\n          width: 0,\n          height: 0,\n          marginLeft: 0,\n          transition: transitionConfig.preset.short.exit.asMotion(),\n        }\"\n        :class=\"buttonVariants.icon({ ...variants, position: 'trailing' })\"\n      >\n        <slot name=\"trailing\" />\n      </MotionComponent>\n    </AnimatePresence>\n  </MotionComponent>\n</template>\n","hash":"44107f116c60349eefac5e2e401a27271fdb6bdeb978859f8a0ffbe91156384a"},{"path":"composables/computed-variant.ts","content":"import type { MotionComponentProps } from '@/components';\nimport { toRef } from '@vueuse/core';\nimport type { Variant } from 'motion-v';\nimport { type MaybeRefOrGetter, computed } from 'vue';\n\nexport function computedVariant<\n  T extends\n    | MotionComponentProps['initial']\n    | MotionComponentProps['animate']\n    | MotionComponentProps['exit'],\n>(valueMaybeRefOrGetter: MaybeRefOrGetter<T>) {\n  const value = toRef(valueMaybeRefOrGetter);\n\n  const valueObject = computed<Variant>(() => {\n    if (typeof value.value !== 'object') return {};\n    if (Array.isArray(value.value)) return {};\n    return value.value as Variant;\n  });\n\n  return valueObject;\n}\n\nexport function computedVariants<\n  T extends {\n    initial: MotionComponentProps['initial'];\n    animate: MotionComponentProps['animate'];\n    exit: MotionComponentProps['exit'];\n  },\n>(valueMaybeRefOrGetter: MaybeRefOrGetter<T>) {\n  const value = toRef(valueMaybeRefOrGetter);\n\n  const initial = computedVariant(() => value.value.initial);\n  const animate = computedVariant(() => value.value.animate);\n  const exit = computedVariant(() => value.value.exit);\n\n  return {\n    initial,\n    animate,\n    exit,\n  };\n}\n","hash":"b2eca1e252bc1c55b1ade5a3ef6876d2fbd42cf544255014e383d14ec94200a9"},{"path":"composables/index.ts","content":"export * from './computed-variant';\nexport * from './use-button';\nexport * from './use-carousel';\nexport * from './use-interactions';\nexport * from './use-ripple';\nexport * from './use-toggle-button';\n","hash":"611699bb672444d52680244c4026f7ee08337ef3b1128e26463c68d1d6c521b5"},{"path":"composables/use-button.ts","content":"import {\n    type MaybeRef,\n    type ShallowRef,\n    computed,\n    toRef,\n    watchEffect,\n} from 'vue';\nimport {\n    type UseInteractionsOptions,\n    useInteractions,\n} from './use-interactions';\n\nexport type UseButtonOptions = {\n  elementType?: 'button' | (string & {});\n  removeRole?: MaybeRef<boolean>;\n  interaction?: UseInteractionsOptions;\n};\n\nexport function useButton(\n  elementRef: Readonly<ShallowRef<HTMLElement | null>>,\n  {\n    elementType = 'button',\n    removeRole = false,\n    interaction,\n  }: UseButtonOptions = {},\n) {\n  const element = computed<HTMLElement | null>(() => {\n    if (elementRef.value && '$el' in elementRef.value) {\n      return elementRef.value.$el as HTMLElement | null;\n    }\n    return elementRef.value;\n  });\n\n  const removeRoleRef = toRef(removeRole);\n\n  const interactions = useInteractions(elementRef, interaction);\n\n  watchEffect(() => {\n    if (!element.value) return;\n    if (elementType !== 'button') {\n      if (removeRoleRef.value) {\n        element.value.removeAttribute('role');\n      } else {\n        element.value.setAttribute('role', 'button');\n      }\n      return;\n    }\n    if (element.value.getAttribute('type')) return;\n    element.value.setAttribute('type', 'button');\n  });\n\n  return interactions;\n}\n","hash":"4f64f53888ef57c543589aca34a158a37e1e4e08c6dbc8cb0392391819394701"},{"path":"composables/use-carousel.ts","content":"import useEmblaCarouselVue from 'embla-carousel-vue';\nimport { type MaybeRefOrGetter, type Ref, toRef } from 'vue';\n\ntype UnwrapRef<T> = T extends Ref<infer U> ? U : T;\n\ntype EmblaParameters = Parameters<typeof useEmblaCarouselVue>;\n\ntype EmblaParameter<T extends number> = UnwrapRef<\n  NonNullable<EmblaParameters[T]>\n>;\n\ntype EmblaReturn = ReturnType<typeof useEmblaCarouselVue>;\n\nexport type EmblaOptions = EmblaParameter<0>;\nexport type EmblaPlugin = EmblaParameter<1>[number];\n\nexport type EmblaCarouselApi = NonNullable<UnwrapRef<EmblaReturn[1]>>;\n\nexport type UseCarouselOptions = {\n  options?: MaybeRefOrGetter<EmblaOptions>;\n  plugins?: MaybeRefOrGetter<EmblaPlugin[]>;\n};\n\nexport function useCarousel(opts: UseCarouselOptions = {}): {\n  ref: Ref<HTMLElement | undefined>;\n  api: Ref<EmblaCarouselApi | undefined>;\n} {\n  const options = toRef(opts.options ?? (() => ({})));\n  const plugins = toRef(opts.plugins ?? (() => []));\n\n  const [ref, api] = useEmblaCarouselVue(options, plugins);\n\n  return { ref, api };\n}\n","hash":"0b5e409e3e349beafe491b7204d88f12f17d55616bfb990fe2a6162dfd5ab50e"},{"path":"composables/use-interactions.ts","content":"import {\n  useElementHover,\n  useFocus,\n  useFocusWithin,\n  useMousePressed,\n  useMutationObserver,\n} from '@vueuse/core';\nimport { type ShallowRef, computed, ref, watchEffect } from 'vue';\n\nexport type UseInteractionsOptions = {\n  focus?: boolean;\n  focusWithin?: boolean;\n  focusVisible?: boolean;\n  hover?: boolean;\n  press?: boolean;\n  disabled?: boolean;\n};\n\nexport function useInteractions(\n  elementRef: Readonly<ShallowRef<HTMLElement | null>>,\n  {\n    focus = true,\n    focusWithin = true,\n    focusVisible = true,\n    hover = true,\n    press = true,\n    disabled = true,\n  }: UseInteractionsOptions = {},\n) {\n  const element = computed<HTMLElement | null>(() => {\n    if (elementRef.value && '$el' in elementRef.value) {\n      return elementRef.value.$el as HTMLElement | null;\n    }\n    return elementRef.value;\n  });\n\n  const { focused: inFocus } = useFocus(elementRef);\n  const { focused: inFocusWithin } = useFocusWithin(elementRef);\n  const { focused: inFocusVisible } = useFocus(elementRef, {\n    focusVisible: true,\n  });\n  const isHovered = useElementHover(elementRef);\n  const { pressed: isPressed } = useMousePressed({\n    target: elementRef,\n  });\n  const isDisabledMutation = ref<boolean | undefined>(undefined);\n  const isDisabled = computed(() => {\n    if (isDisabledMutation.value !== undefined) return isDisabledMutation.value;\n    if (!element.value) return false;\n    const isAriaDisabled = element.value.ariaDisabled?.toLowerCase() === 'true';\n    return (\n      (isAriaDisabled || (element.value as HTMLButtonElement).disabled) ?? false\n    );\n  });\n\n  useMutationObserver(\n    elementRef,\n    (mutations) => {\n      const mutation = mutations[0];\n      if (!mutation || mutation.type !== 'attributes') return;\n      const el = mutation.target as HTMLButtonElement;\n      const isAriaDisabled = el.ariaDisabled?.toLowerCase() === 'true';\n      isDisabledMutation.value = (isAriaDisabled || el.disabled) ?? false;\n    },\n    {\n      attributes: true,\n    },\n  );\n\n  function setData(name: string, value: boolean, isEnabled: boolean) {\n    if (!element.value) return;\n    if (value && isEnabled) {\n      element.value.setAttribute(`data-${name}`, `${value}`);\n    } else if (isEnabled) {\n      element.value.removeAttribute(`data-${name}`);\n    }\n  }\n\n  watchEffect(() => {\n    setData('in-focus', inFocus.value, focus);\n    setData('in-focus-within', inFocusWithin.value, focusWithin);\n    setData('in-focus-visible', inFocusVisible.value, focusVisible);\n    setData('is-hovered', isHovered.value, hover);\n    setData('is-pressed', isPressed.value, press);\n    setData('is-disabled', isDisabled.value, disabled);\n  });\n\n  return {\n    inFocus: inFocus,\n    inFocusVisible: inFocusVisible,\n    inFocusWithin: inFocusWithin,\n    isHovered: isHovered,\n    isPressed: isPressed,\n    isDisabled: isDisabled,\n  };\n}\n","hash":"35128baff09828fb2fb48accb6b38f0831456c06974af34da29bc3929d897c27"},{"path":"composables/use-ripple.ts","content":"import { materialDuration } from '@/config';\nimport { useEventListener } from '@vueuse/core';\nimport { type AnimationPlaybackControls, animate } from 'motion-v';\nimport { type ShallowRef, computed } from 'vue';\n\nexport type UseRippleOptions = {\n  duration?: number;\n  centered?: boolean;\n  speedDelta?: number;\n};\n\ntype Controls = {\n  __value__: [string, AnimationPlaybackControls][];\n  get: (id: string) => AnimationPlaybackControls | undefined;\n  set: (id: string, controls: AnimationPlaybackControls) => void;\n  remove: (id: string) => void;\n};\n\ntype RippleData = {\n  id: string | undefined;\n  isAnimationEnded: boolean;\n  isPressed: boolean;\n  animation: 'entering' | 'exiting' | null;\n  controls: AnimationPlaybackControls | undefined;\n};\n\nexport function useRipple(\n  ref: Readonly<ShallowRef<HTMLElement | null>>,\n  {\n    duration = materialDuration['extra-long-4'],\n    centered = false,\n    speedDelta = 2,\n  }: UseRippleOptions = {},\n) {\n  const element = computed<HTMLElement | null>(() => {\n    if (ref.value && '$el' in ref.value) {\n      return ref.value.$el as HTMLElement | null;\n    }\n    return ref.value;\n  });\n\n  const controls: Controls = {\n    __value__: [],\n    get(id: string): AnimationPlaybackControls | undefined {\n      const tuple = this.__value__.find((v) => v[0] === id);\n      return tuple?.[1];\n    },\n    set(id: string, ctrls: AnimationPlaybackControls): void {\n      this.remove(id);\n\n      this.__value__.push([id, ctrls]);\n    },\n    remove(id: string): void {\n      const current = this.get(id);\n      current?.cancel();\n\n      this.__value__ = this.__value__.filter((v) => v[0] !== id);\n    },\n  };\n\n  function animateEnter(ripple: HTMLElement, onComplete: () => void) {\n    return animate(\n      ripple,\n      { '--ripple-scale': 1 },\n      {\n        duration: (duration * 2) / 1000,\n        onComplete,\n      },\n    );\n  }\n\n  function animateExit(ripple: HTMLElement, onComplete: () => void) {\n    return animate(\n      ripple,\n      { opacity: 0 },\n      {\n        duration: duration / (speedDelta * 2) / 1000,\n        onComplete,\n      },\n    );\n  }\n\n  useEventListener(element, 'mousedown', (e) => {\n    if (!element.value) return;\n    const el = e.currentTarget as HTMLElement;\n    const bounding = el.getBoundingClientRect();\n    const coordinates = {\n      x: bounding.width / 2,\n      y: bounding.height / 2,\n    };\n    if (!centered) {\n      if (typeof MouseEvent !== 'undefined' && e instanceof MouseEvent) {\n        coordinates.x = e.clientX - bounding.x;\n        coordinates.y = e.clientY - bounding.y;\n      }\n    }\n\n    const [ripple, data] = createRipple(controls, {\n      ...coordinates,\n      width: bounding.width,\n      height: bounding.height,\n    });\n    element.value?.append(ripple);\n    data.controls = animateEnter(ripple, () => {\n      if (!data.isPressed) {\n        data.animation = 'exiting';\n        data.controls = animateExit(ripple, () => {\n          ripple.remove();\n        });\n        return;\n      }\n      data.isAnimationEnded = true;\n    });\n  });\n\n  useEventListener(element, 'click', (e: PointerEvent) => {\n    if (!element.value) return;\n    if (e.pointerType) return;\n    const el = e.currentTarget as HTMLElement;\n    const bounding = el.getBoundingClientRect();\n    const coordinates = {\n      x: bounding.width / 2,\n      y: bounding.height / 2,\n    };\n\n    const [ripple, data] = createRipple(controls, {\n      ...coordinates,\n      width: bounding.width,\n      height: bounding.height,\n    });\n    element.value?.append(ripple);\n    data.controls = animateEnter(ripple, () => {\n      if (!data.isPressed) {\n        data.animation = 'exiting';\n        data.controls = animateExit(ripple, () => {\n          ripple.remove();\n        });\n        return;\n      }\n      data.isAnimationEnded = true;\n    });\n    data.isPressed = false;\n    data.controls.speed = speedDelta * 2;\n  });\n\n  useEventListener(element, 'mouseup', () => {\n    if (!element.value) return;\n    const ripples =\n      element.value.querySelectorAll<HTMLSpanElement>('span.ripple');\n    ripples.forEach((ripple) => {\n      const data = rippleData(ripple, controls);\n      data.isPressed = false;\n      if (data.animation !== 'entering') return;\n      if (data.isAnimationEnded) {\n        data.animation = 'exiting';\n        data.isAnimationEnded = false;\n        data.controls = animateExit(ripple, () => {\n          ripple.remove();\n        });\n        return;\n      }\n      if (!data.controls) return;\n      data.controls.speed = speedDelta * 2;\n    });\n  });\n}\n\nfunction createRipple(\n  controls: Controls,\n  {\n    x,\n    y,\n    width,\n    height,\n  }: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  },\n): [HTMLElement, RippleData] {\n  const ripple = document.createElement('span');\n  const diameter = Math.max(width, height) * 2;\n  ripple.style.setProperty('--ripple-x', `${x}px`);\n  ripple.style.setProperty('--ripple-y', `${y}px`);\n  ripple.className = 'ripple';\n  ripple.style.setProperty('--ripple-diameter', `${diameter}px`);\n  ripple.setAttribute('aria-hidden', 'true');\n\n  const data = rippleData(ripple, controls);\n  data.id = `ripple-${Math.random().toString(16).substring(2)}`;\n  data.isPressed = true;\n  data.isAnimationEnded = false;\n  data.animation = 'entering';\n\n  return [ripple, data];\n}\n\nfunction rippleData(ripple: HTMLElement, controls: Controls): RippleData {\n  return {\n    get id(): string | undefined {\n      return ripple.dataset.id;\n    },\n    set id(value: string | undefined) {\n      ripple.dataset.id = value;\n    },\n    get isAnimationEnded(): boolean {\n      return ripple.dataset.isAnimationEnded === 'true';\n    },\n    set isAnimationEnded(value: boolean) {\n      ripple.dataset.isAnimationEnded = `${value}`;\n    },\n    get isPressed(): boolean {\n      return ripple.dataset.isPressed === 'true';\n    },\n    set isPressed(value: boolean) {\n      ripple.dataset.isPressed = `${value}`;\n    },\n    get animation(): 'entering' | 'exiting' | null {\n      const animation = ripple.dataset.animation;\n      if (animation === 'entering' || animation === 'exiting') {\n        return animation;\n      }\n      return null;\n    },\n    set animation(value: 'entering' | 'exiting' | null) {\n      ripple.dataset.animation = value || undefined;\n    },\n    get controls(): AnimationPlaybackControls | undefined {\n      if (!this.id) return undefined;\n      return controls.get(this.id);\n    },\n    set controls(ctrls: AnimationPlaybackControls | undefined) {\n      if (!this.id) return;\n      if (ctrls) {\n        controls.set(this.id, ctrls);\n      } else {\n        controls.remove(this.id);\n      }\n    },\n  };\n}\n","hash":"267475a998ea815ae69000fd6ae60040e59bd62d8590e3c311ec434c6e69edcc"},{"path":"composables/use-toggle-button.ts","content":"import { useEventListener } from '@vueuse/core';\nimport {\n  type MaybeRefOrGetter,\n  type ShallowRef,\n  computed,\n  toRef,\n  watchEffect,\n} from 'vue';\nimport { type UseButtonOptions, useButton } from './use-button';\n\nexport type UseToggleButtonOptions = {\n  isToggleable: Readonly<MaybeRefOrGetter<boolean>>;\n  isSelected: Readonly<MaybeRefOrGetter<boolean>>;\n  onClick?: () => void;\n} & UseButtonOptions;\n\nexport function useToggleButton(\n  elementRef: Readonly<ShallowRef<HTMLElement | null>>,\n  {\n    isToggleable: isToggleableMaybeRefOrGetter,\n    isSelected: isSelectedMaybeRefOrGetter,\n    onClick = () => {},\n    ...options\n  }: UseToggleButtonOptions,\n) {\n  const element = computed<HTMLElement | null>(() => {\n    if (elementRef.value && '$el' in elementRef.value) {\n      return elementRef.value.$el as HTMLElement | null;\n    }\n    return elementRef.value;\n  });\n\n  const isToggleable = toRef(isToggleableMaybeRefOrGetter);\n  const isSelected = toRef(isSelectedMaybeRefOrGetter);\n\n  const button = useButton(elementRef, options);\n\n  watchEffect(() => {\n    if (!element.value) return;\n    if (!isToggleable.value) {\n      element.value.removeAttribute('aria-pressed');\n      return;\n    }\n    if (!element.value.hasAttribute('aria-checked'))\n      element.value.setAttribute('aria-pressed', `${isSelected.value}`);\n  });\n\n  useEventListener(elementRef, 'click', () => {\n    onClick();\n  });\n\n  return button;\n}\n","hash":"e7fd28ccd3db1736c0b85b812b9222570458ef0165b16bd1c6ec0c53eb820400"},{"path":"config/duration.ts","content":"export type Duration = number;\n\nexport type DurationAsString<T extends Duration> = `${T}ms`;\n\nexport const durationMapper = {\n  asMotion<T extends Duration>(value: T) {\n    return value / 1000;\n  },\n  asString<T extends Duration>(value: T): DurationAsString<T> {\n    return `${value}ms`;\n  },\n};\n","hash":"42519e326ee1157ed92c67fcb794c04dafc5a8dd4b09b9e15b354b68f4515b94"},{"path":"config/easing.ts","content":"export type Easing = [number, number, number, number];\n\nexport type EasingAsString<T extends Easing> =\n  `cubic-bezier(${T[0]}, ${T[1]}, ${T[2]}, ${T[3]})`;\n\nexport const easingMapper = {\n  asMotion<T extends Easing>(value: T) {\n    return value;\n  },\n  asString<T extends Easing>(value: T): EasingAsString<T> {\n    return `cubic-bezier(${value[0]}, ${value[1]}, ${value[2]}, ${value[3]})`;\n  },\n};\n","hash":"eef4c598ddc47cd541990e49b4020f59c1cdbb8ea8a5dc6f9cab52fb76b5fb7c"},{"path":"config/index.ts","content":"export * from './material-duration';\nexport * from './material-easing';\nexport * from './transition';\n","hash":"a5419a05493f7acc67d0de05bf92ceafbafa3826a8784062ee7a5458bdb59a7a"},{"path":"config/material-duration.ts","content":"import { type Duration, type DurationAsString, durationMapper } from './duration';\n\nexport const materialDurationValues = {\n  'short-1': 50,\n  'short-2': 100,\n  'short-3': 150,\n  'short-4': 200,\n  'medium-1': 250,\n  'medium-2': 300,\n  'medium-3': 350,\n  'medium-4': 400,\n  'long-1': 450,\n  'long-2': 500,\n  'long-3': 550,\n  'long-4': 600,\n  'extra-long-1': 700,\n  'extra-long-2': 800,\n  'extra-long-3': 900,\n  'extra-long-4': 1000,\n} satisfies Record<string, Duration>;\n\ntype Registry = typeof materialDurationValues;\n\ntype Key = keyof Registry;\n\nexport type MaterialDuration = Key;\n\nexport type MaterialDurationValue<T extends Key> = Registry[T];\n\ntype StringRegistry = {\n  [K in Key]: DurationAsString<Registry[K]>;\n};\n\nexport const materialDuration = {\n  ...materialDurationValues,\n  keys(): Key[] {\n    return Object.keys(materialDurationValues) as Key[];\n  },\n  has(key: Key | (string & {})): key is Key {\n    return this.keys().includes(key as Key);\n  },\n  value<T extends Key>(key: T): Registry[T] {\n    return materialDurationValues[key];\n  },\n  asMotion<T extends Key>(key: T): Registry[T] {\n    return durationMapper.asMotion(materialDurationValues[key]);\n  },\n  asString<T extends Key>(key: T): DurationAsString<Registry[T]> {\n    return durationMapper.asString(materialDurationValues[key]);\n  },\n  toStringRegistry(): StringRegistry {\n    const result = {} as StringRegistry;\n\n    this.keys().forEach((key) => {\n      result[key] = this.asString(key);\n    });\n\n    return result as StringRegistry;\n  },\n} as const;\n","hash":"52ee55f5c42354334c2a3b15414c25252974c967622be09468f29e2781d722ca"},{"path":"config/material-easing.ts","content":"import { type Easing, type EasingAsString, easingMapper } from './easing';\n\nexport const materialEasingValues = {\n  standard: [0.2, 0.0, 0, 1.0],\n  'standard-decelerate': [0, 0, 0, 1],\n  'standard-accelerate': [0.3, 0.0, 0.8, 0.15],\n  emphasized: [0.2, 0.0, 0, 1.0],\n  'emphasized-decelerate': [0.05, 0.7, 0.1, 1.0],\n  'emphasized-accelerate': [0.3, 0.0, 0.8, 0.15],\n} satisfies Record<string, Easing>;\n\ntype Registry = typeof materialEasingValues;\n\ntype Key = keyof Registry;\n\nexport type MaterialEasing = Key;\n\nexport type MaterialEasingValue<T extends Key> = Registry[T];\n\ntype StringRegistry = {\n  [K in Key]: EasingAsString<Registry[K]>;\n};\n\nexport const materialEasing = {\n  ...materialEasingValues,\n  keys(): Key[] {\n    return Object.keys(materialEasingValues) as Key[];\n  },\n  has(key: Key | (string & {})): key is Key {\n    return this.keys().includes(key as Key);\n  },\n  value<T extends Key>(key: T): Registry[T] {\n    return materialEasingValues[key];\n  },\n  asMotion<T extends Key>(key: T): Registry[T] {\n    return easingMapper.asMotion(materialEasingValues[key]);\n  },\n  asString<T extends Key>(key: T): EasingAsString<Registry[T]> {\n    return easingMapper.asString(materialEasingValues[key]);\n  },\n  toStringRegistry(): StringRegistry {\n    const result = {} as StringRegistry;\n\n    this.keys().forEach((key) => {\n      result[key] = this.asString(key);\n    });\n\n    return result as StringRegistry;\n  },\n} as const;\n","hash":"ed3b2e0b26591d25e6af7982bb0c30324933de7b7cea4c0b04d9b03b44002725"},{"path":"config/transition.ts","content":"import {\n  type Duration,\n  type DurationAsString,\n  durationMapper,\n} from './duration';\nimport { type Easing, type EasingAsString, easingMapper } from './easing';\nimport {\n  type MaterialDuration,\n  type MaterialDurationValue,\n  materialDuration,\n} from './material-duration';\nimport {\n  type MaterialEasing,\n  type MaterialEasingValue,\n  materialEasing,\n} from './material-easing';\n\ntype TransitionEasing = MaterialEasing | Easing;\n\ntype EasingValue<T extends TransitionEasing> = T extends MaterialEasing\n  ? MaterialEasingValue<T>\n  : T;\n\ntype TransitionEasingFunctions<E extends TransitionEasing> = {\n  absoluteValue: EasingValue<E>;\n  asMotion(): EasingValue<E>;\n  asString(): EasingAsString<EasingValue<E>>;\n};\n\ntype TransitionDuration = MaterialDuration | Duration;\n\ntype DurationValue<T extends TransitionDuration> = T extends MaterialDuration\n  ? MaterialDurationValue<T>\n  : T;\n\ntype TransitionDurationFunctions<D extends TransitionDuration> = {\n  absoluteValue: DurationValue<D>;\n  asMotion(): DurationValue<D>;\n  asString(): DurationAsString<DurationValue<D>>;\n};\n\ntype Transition<E extends TransitionEasing, D extends TransitionDuration> = {\n  easing: E & TransitionEasingFunctions<E>;\n  duration: D & TransitionDurationFunctions<D>;\n  withEasing<T extends TransitionEasing>(value: T): Transition<T, D>;\n  withDuration<T extends TransitionDuration>(value: T): Transition<E, T>;\n  asMotion(): {\n    easing: EasingValue<E>;\n    duration: DurationValue<D>;\n  };\n  preset: DefaultPresets;\n};\n\ntype DefaultPresets = {\n  default: Transition<'standard', 'short-4'>,\n  long: {\n    beginEnd: Transition<'emphasized', 'long-2'>;\n    enter: Transition<'emphasized-decelerate', 'medium-4'>;\n    exit: Transition<'emphasized-accelerate', 'short-4'>;\n  };\n  short: {\n    beginEnd: Transition<'standard', 'medium-2'>;\n    enter: Transition<'standard-decelerate', 'medium-1'>;\n    exit: Transition<'standard-accelerate', 'short-4'>;\n  };\n};\n\nconst defaultPresets: DefaultPresets = {\n  get default() {\n    return createTransition({ easing: 'standard', duration: 'short-4' })\n  },\n  long: {\n    get beginEnd() {\n      return createTransition({ easing: 'emphasized', duration: 'long-2' });\n    },\n    get enter() {\n      return createTransition({\n        easing: 'emphasized-decelerate',\n        duration: 'medium-4',\n      });\n    },\n    get exit() {\n      return createTransition({\n        easing: 'emphasized-accelerate',\n        duration: 'short-4',\n      });\n    },\n  },\n  short: {\n    get beginEnd() {\n      return createTransition({ easing: 'standard', duration: 'medium-2' });\n    },\n    get enter() {\n      return createTransition({\n        easing: 'standard-decelerate',\n        duration: 'medium-1',\n      });\n    },\n    get exit() {\n      return createTransition({\n        easing: 'standard-accelerate',\n        duration: 'short-4',\n      });\n    },\n  },\n};\n\nfunction createTransition<\n  E extends TransitionEasing = 'standard',\n  D extends TransitionDuration = 'short-4',\n>({ easing, duration }: { easing: E; duration: D }): Transition<E, D> {\n  const easingFunctions: TransitionEasingFunctions<E> = {\n    get absoluteValue() {\n      if (typeof easing === 'string') {\n        if (materialEasing.has(easing))\n          return materialEasing.value(easing) as EasingValue<E>;\n        throw new Error('invalid material easing');\n      }\n      return easing as EasingValue<E>;\n    },\n    asMotion() {\n      return easingMapper.asMotion(this.absoluteValue);\n    },\n    asString() {\n      return easingMapper.asString(this.absoluteValue);\n    },\n  };\n\n  const durationFunctions: TransitionDurationFunctions<D> = {\n    get absoluteValue() {\n      if (typeof duration === 'string') {\n        if (materialDuration.has(duration))\n          return materialDuration.value(duration) as DurationValue<D>;\n        throw new Error('invalid material duration');\n      }\n      return duration as DurationValue<D>;\n    },\n    asMotion() {\n      return durationMapper.asMotion(this.absoluteValue) as DurationValue<D>;\n    },\n    asString() {\n      return durationMapper.asString(this.absoluteValue);\n    },\n  };\n\n  return {\n    preset: defaultPresets,\n    easing: Object.assign(easing, easingFunctions) as Transition<\n      E,\n      D\n    >['easing'],\n    duration: Object.assign(duration, durationFunctions) as Transition<\n      E,\n      D\n    >['duration'],\n    withEasing<T extends TransitionEasing>(value: T): Transition<T, D> {\n      return createTransition({ easing: value, duration }) as Transition<T, D>;\n    },\n    withDuration<T extends TransitionDuration>(value: T): Transition<E, T> {\n      return createTransition({ easing, duration: value }) as Transition<E, T>;\n    },\n    asMotion() {\n      return {\n        easing: this.easing.asMotion(),\n        duration: this.duration.asMotion(),\n      };\n    },\n  };\n}\n\nexport const transitionConfig = defaultPresets.short.beginEnd;\n","hash":"88df525ca4b34e00283637526f9b1f07a76ddf2cdb3a568cc2004c56c6d30390"},{"path":"tailwind/directive.ts","content":"import { extendTailwindMerge } from 'tailwind-merge';\nimport type { DirectiveBinding, Plugin } from 'vue';\n\nexport const mergeDirective: Plugin = (app) => {\n  app.directive('tw-merge', {\n    beforeMount: computeClasses,\n    updated: computeClasses,\n  });\n};\n\nconst twMerge = extendTailwindMerge<string, string>({\n  extend: {\n    classGroups: {\n      stateType: [\n        'state-hover',\n        'state-focus',\n        'state-press',\n        'state-drag',\n        (className: string) => /^state-\\d+$/.test(className),\n      ],\n      state: [\n        (className: string) =>\n          /^state-(?!hover$|focus$|press$|drag$|\\d+$).+$/.test(className),\n      ],\n      elevation: [(className: string) => /^elevation-.+$/.test(className)],\n      easing: [(className: string) => /^easing-.+$/.test(className)],\n      duration: [(className: string) => /^duration-.+$/.test(className)],\n    },\n  },\n});\n\nfunction computeClasses(\n  el: HTMLElement,\n  binding: DirectiveBinding,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  vNode: any,\n) {\n  const existingClasses = el.classList.value;\n  const inheritedClasses = vNode?.ctx?.attrs as string | undefined;\n\n  if (!existingClasses || !inheritedClasses) return;\n\n  el.classList.value = twMerge(existingClasses, inheritedClasses);\n}\n","hash":"b1d5eea82f89a2caaf7ded8deb2901a6bf6fefed8e5b6bfb3a2e791a05108861"},{"path":"tailwind/duration.css","content":"@theme {\n  --duration-short-1: 50ms;\n  --duration-short-2: 100ms;\n  --duration-short-3: 150ms;\n  --duration-short-4: 200ms;\n  --duration-medium-1: 250ms;\n  --duration-medium-2: 300ms;\n  --duration-medium-3: 350ms;\n  --duration-medium-4: 400ms;\n  --duration-long-1: 450ms;\n  --duration-long-2: 500ms;\n  --duration-long-3: 550ms;\n  --duration-long-4: 600ms;\n  --duration-extra-long-1: 700ms;\n  --duration-extra-long-2: 800ms;\n  --duration-extra-long-3: 900ms;\n  --duration-extra-long-4: 1000ms;\n}\n\n@utility duration-* {\n  transition-duration: --value(--duration- *);\n}\n","hash":"2d36e1874a7a6385e266b77e88f0a8e578804fd7abd26712bef538f440900b67"},{"path":"tailwind/easing.css","content":"@theme {\n  --easing-standard: cubic-bezier(0.2, 0, 0, 1);\n  --easing-standard-decelerate: cubic-bezier(0, 0, 0, 1);\n  --easing-standard-accelerate: cubic-bezier(0.3, 0, 0.8, 0.15);\n  --easing-emphasized: cubic-bezier(0.2, 0, 0, 1);\n  --easing-emphasized-decelerate: cubic-bezier(0.05, 0.7, 0.1, 1);\n  --easing-emphasized-accelerate: cubic-bezier(0.3, 0, 0.8, 0.15);\n}\n\n@utility easing-* {\n  transition-timing-function: --value(--easing- *);\n}\n","hash":"ffd4dc091ad582ae43b7e215bae08c1d07856bbbb63876506c223759c7501d77"},{"path":"tailwind/elevation.css","content":"@theme {\n  --elevation-0: 0px 0px #0000;\n  --elevation-1:\n    rgba(0, 0, 0, 0.2) 0px 2px 1px -1px, rgba(0, 0, 0, 0.14) 0px 1px 1px 0px,\n    rgba(0, 0, 0, 0.12) 0px 1px 3px 0px;\n  --elevation-2:\n    rgba(0, 0, 0, 0.2) 0px 3px 3px -2px, rgba(0, 0, 0, 0.14) 0px 3px 4px 0px,\n    rgba(0, 0, 0, 0.12) 0px 1px 8px 0px;\n  --elevation-3:\n    rgba(0, 0, 0, 0.2) 0px 3px 5px -1px, rgba(0, 0, 0, 0.14) 0px 6px 10px 0px,\n    rgba(0, 0, 0, 0.12) 0px 1px 18px 0px;\n  --elevation-4:\n    rgba(0, 0, 0, 0.2) 0px 5px 5px -3px, rgba(0, 0, 0, 0.14) 0px 8px 10px 1px,\n    rgba(0, 0, 0, 0.12) 0px 3px 14px 2px;\n  --elevation-5:\n    rgba(0, 0, 0, 0.2) 0px 7px 8px -4px, rgba(0, 0, 0, 0.14) 0px 12px 17px 2px,\n    rgba(0, 0, 0, 0.12) 0px 5px 22px 4px;\n}\n\n@utility elevation-* {\n  box-shadow: --value(--elevation- *);\n}\n","hash":"3fcbaafb9346e3da3e2d02b69584f4c660ee7d0a49e28591a2ef744e43d54959"},{"path":"tailwind/index.css","content":"@import './duration.css';\n@import './easing.css';\n@import './elevation.css';\n@import './ripple.css';\n@import './interactions.css';\n@import './state.css';\n@import './scrollbar.css';\n\n@theme {\n  --color-transparent: transparent;\n}\n\n@utility transition-box {\n  transition-property:\n    width,\n    height,\n    min-width,\n    min-height,\n    max-width,\n    max-height,\n    font-weight,\n    line-height,\n    font-size,\n    letter-spacing,\n    color,\n    background-color,\n    border-color,\n    border-radius,\n    border-top-left-radius,\n    border-top-right-radius,\n    border-bottom-left-radius,\n    border-bottom-right-radius,\n    text-decoration-color,\n    fill,\n    stroke,\n    --tw-gradient-from,\n    --tw-gradient-via,\n    --tw-gradient-to,\n    opacity,\n    box-shadow,\n    transform,\n    translate,\n    scale,\n    rotate,\n    filter,\n    -webkit-backdrop-filter,\n    backdrop-filter;\n  transition-timing-function: var(--default-transition-timing-function);\n  transition-duration: var(--default-transition-duration);\n}\n","hash":"1a5829bb4f50e016c0e68894b5a124b7a88021623e9ac7130dcd6a295d52ed32"},{"path":"tailwind/index.ts","content":"export * from './directive';\n","hash":"6d4b89928d07c3344ab1d9ff455f33e212952f2b989da265336aed8c762f61bb"},{"path":"tailwind/interactions.css","content":"@custom-variant in-focus (&[data-in-focus=true]);\n@custom-variant in-focus-within (&[data-in-focus-within=true]);\n@custom-variant in-focus-visible (&[data-in-focus-visible=true]);\n@custom-variant is-hovered (&[data-is-hovered=true]);\n@custom-variant is-pressed (&[data-is-pressed=true]);\n@custom-variant is-disabled (&[data-is-disabled=true]);\n\n@custom-variant aria-pressed (&[aria-pressed=true], &[aria-checked=true]);\n@custom-variant aria-not-pressed (&[aria-pressed=false], &[aria-checked=false]);\n","hash":"68272330e189e0ff7b35d47123c4b68a44727c50e4472de8e1218826a951cf8b"},{"path":"tailwind/ripple.css","content":"@custom-variant ripple (& > .ripple::after);\n@custom-variant ripple-wrapper (& > .ripple);\n\n@layer components {\n  .ripple {\n    z-index: 1;\n    position: absolute;\n    inset: 0;\n    overflow: hidden;\n    pointer-events: none;\n    border-radius: inherit;\n\n    &::after {\n      content: '';\n      position: absolute;\n      translate: -50% -50%;\n      width: var(--ripple-diameter);\n      height: var(--ripple-diameter);\n      top: var(--ripple-y);\n      left: var(--ripple-x);\n      scale: var(--ripple-scale, 0);\n      filter: blur(4px);\n      opacity: 0.1;\n      border-radius: 9999px;\n    }\n  }\n}\n","hash":"9eb43e0acff3aa98c89a50a7060ed99d0a2a088b8b4f270605d39ed3286dd55a"},{"path":"tailwind/scrollbar.css","content":"@theme {\n}\n\n@property --ui-scrollbar-width {\n  syntax: '<length>';\n  inherits: false;\n  initial-value: 8px;\n}\n\n@property --ui-scrollbar-thumb-color {\n  syntax: '<color>';\n  inherits: false;\n  initial-value: rgba(0, 0, 0, 0.38);\n}\n\n@property --ui-scrollbar-track-color {\n  syntax: '<color>';\n  inherits: false;\n  initial-value: transparent;\n}\n\n@property --ui-scrollbar-thumb-radius {\n  syntax: '<length>';\n  inherits: false;\n  initial-value: 9999px;\n}\n\n@property --ui-scrollbar-track-radius {\n  syntax: '<length>';\n  inherits: false;\n  initial-value: 0px;\n}\n\n@layer base {\n  *,\n  *::after,\n  *::before {\n    --ui-scrollbar-width: 8px;\n    --ui-scrollbar-thumb-color: color-mix(\n      in oklab,\n      var(--color-on-surface) 38%,\n      transparent\n    );\n    --ui-scrollbar-track-color: transparent;\n    --ui-scrollbar-thumb-radius: 9999px;\n    --ui-scrollbar-track-radius: 0px;\n  }\n\n  @supports selector(::-webkit-scrollbar) {\n    ::-webkit-scrollbar {\n      width: var(--ui-scrollbar-width);\n      height: var(--ui-scrollbar-width);\n    }\n\n    ::-webkit-scrollbar-track {\n      background-color: var(--ui-scrollbar-track-color);\n      border-radius: var(--ui-scrollbar-track-radius);\n    }\n\n    ::-webkit-scrollbar-thumb {\n      background-color: var(--ui-scrollbar-thumb-color);\n      border-radius: var(--ui-scrollbar-thumb-radius);\n      border: 2px solid var(--ui-scrollbar-track-color);\n      background-clip: content-box;\n    }\n\n    ::-webkit-scrollbar-corner {\n      background-color: var(--ui-scrollbar-track-color);\n    }\n  }\n\n  @supports not selector(::-webkit-scrollbar) {\n    *,\n    *::after,\n    *::before {\n      scrollbar-color: var(--ui-scrollbar-thumb-color)\n        var(--ui-scrollbar-track-color);\n      scrollbar-width: thin;\n    }\n  }\n}\n","hash":"27e45961f156094e867b931f7e8de07ebb3e23c297c6613db6cd029eb94cbd4f"},{"path":"tailwind/state.css","content":"@theme {\n  --color-current: currentColor;\n  --state-hover: 8;\n  --state-focus: 10;\n  --state-press: 10;\n  --state-drag: 16;\n}\n\n@property --ui-background-color {\n  syntax: '<color>';\n  inherits: false;\n  initial-value: transparent;\n}\n\n@property --ui-state-color {\n  syntax: '<color>';\n  inherits: false;\n  initial-value: transparent;\n}\n\n@property --ui-state-opacity {\n  syntax: '<percentage>';\n  inherits: false;\n  initial-value: 0%;\n}\n\n@utility bg-* {\n  --ui-background-color: --value(--color- *, [color]);\n  --ui-background-color: color-mix(\n    in oklab,\n    --value(--color- *, [color]) calc(--modifier(integer) * 1%),\n    transparent\n  );\n  background-color: color-mix(\n    in oklab,\n    var(--ui-background-color, transparent)\n      calc(100% - var(--ui-state-opacity, 0%)),\n    var(--ui-state-color, transparent)\n  );\n}\n\n@utility state-* {\n  --ui-state-opacity: calc(--value(--state- *, integer) * 1%);\n  --ui-state-color: --value(--color- *, [color]);\n  --ui-state-color: color-mix(\n    in oklab,\n    --value(--color- *, [color]) calc(--modifier(integer) * 1%),\n    transparent\n  );\n  background-color: color-mix(\n    in oklab,\n    var(--ui-background-color, transparent)\n      calc(100% - var(--ui-state-opacity, 0%)),\n    var(--ui-state-color, transparent)\n  );\n}\n\n@utility state-transparent {\n  --ui-state-opacity: 0%;\n  --ui-state-color: transparent;\n}\n","hash":"4879d18e29624f86fb59300d645765bc93d3e8c3655b7caaafb88c9acee58b5e"},{"path":"types/context.ts","content":"import type { EmptyObject } from '@bruhabruh/type-safe';\nimport { type ComputedRef, type MaybeRefOrGetter } from 'vue';\n\nexport type Context<\n  T extends Record<string, unknown> = EmptyObject,\n  Options extends Record<string, unknown> = EmptyObject,\n  ReadonlyOptions extends Record<string, unknown> = EmptyObject,\n  RawOptions extends Record<string, unknown> = EmptyObject,\n  ProvideOptions = {\n    [key in keyof Options]: MaybeRefOrGetter<Options[key]>;\n  },\n  ProvideReadonlyOptions = {\n    [key in keyof ReadonlyOptions]: ComputedRef<ReadonlyOptions[key]>;\n  },\n> = {\n  state: T;\n  options: Options & ReadonlyOptions & RawOptions & {};\n  provideOptions: ProvideOptions & ProvideReadonlyOptions & RawOptions & {};\n};\n","hash":"1581c9b6f8837e8e62b47891a46ecb92364cb73bd3643c099f2e3d9fadbbd657"},{"path":"types/index.ts","content":"export * from './context';\nexport * from './props';\nexport * from './variants';\n\n","hash":"6fae365eaf5a8b5612fad3319df756dfd8d214611d2c3e9d235f93790dac9a3f"},{"path":"types/props.ts","content":"import type { AsTag } from 'motion-v';\n\nexport type PropsPolymorphic = {\n  as?: AsTag;\n};\n","hash":"e568c427cd1afa851c9714805a245218a17532971c57eab55e1df657f9b50f78"},{"path":"types/variants.ts","content":"import type { VariantProps } from 'class-variance-authority';\n\nexport type Variants<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Component extends (...args: any) => any,\n  T = VariantProps<Component>,\n> = {\n  [K in keyof T]: NonNullable<T[K]>;\n} & {};\n","hash":"afaab52bd2997e4bfa832af6a8346cbbb136968e19b4f6f810c35ee11e613c7f"}]}
